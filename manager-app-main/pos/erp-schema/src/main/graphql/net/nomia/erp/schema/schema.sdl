# This file was generated. Do not edit manually.

directive @Pattern(regexp: String!, message: String) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Range(min: Int, max: Int, message: String) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Email on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Login on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Timezone on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Max(value: Int! = 2147483647) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NotEmpty(message: String) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @ContainerNotEmpty(message: String) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NotBlank on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Digits(integer: Int!, fraction: Int!, message: String) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Positive(message: String) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @PositiveOrZero(message: String) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Size(min: Int, max: Int, message: String) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @VatinChecksum on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @SnilsChecksum on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Sizes(sizes: [Int!]!, message: String, allowEmpty: Boolean) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @SizeOrEmpty(min: Int, max: Int, message: String, allowEmpty: Boolean) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @PasswordStrength on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @ActivityPeriod(message: String) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Patch on FIELD_DEFINITION

directive @NotNull on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @BigDecimalScale(scale: Int!, roundingMode: String!) on FIELD_DEFINITION

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""Subscription to tariff"""
type _Subscription {
  """Subscription id"""
  id: UUID
  active: Boolean!
  status: SubscriptionStatus!

  """Subscription start time. Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  startDate: Instant

  """
  The time when the subscription will be renewed. The format is yyyy-MM-dd'T'HH:mm:ss.SS'Z'
  """
  endDate: Instant

  """Next payment"""
  nextPayment: PaymoPayment

  """Rate"""
  servicePlan: ServicePlan!

  """Acitive Service Plan Option"""
  activeServicePlanOption: ServicePlanOption
  trialPeriod: Boolean!

  """
  Trial period duration. ISO 8601 format: P (n) Y (n) M (n) DT (n) H (n) M (n) S
  """
  trialPeriodDuration: String!

  """
  The time the trial period started. The format is yyyy-MM-dd'T'HH:mm:ss.SS'Z'
  """
  trialPeriodStartDate: Instant

  """Trial period expiration time. Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  trialPeriodEndDate: Instant
}

"""
Popular product (which is also called ABC product) which most revenue for the selected period
"""
type ABCReport {
  """name of the product"""
  name: String!

  """product revenue for the selected period"""
  revenue: BigDecimal!

  """product profit for the selected period"""
  profit: BigDecimal!

  """margin on product sales for the selected period"""
  profitPercent: BigDecimal!

  """product sales quantity for the selected period"""
  quantity: BigDecimal!

  """percent of margin for current product out of others"""
  profitPercentOutOfTotal: BigDecimal!

  """product unitType"""
  unitType: UnitType!
}

input AbcReportInput {
  search: String
  storeIds: [UUID!]!
  types: [ProductType!]
  sectionIds: [UUID!]
  dateRange: DateRangeInput!
}

type AbcReportOutput {
  total: AbcReportV2Total!
  rows(pageRequest: PageRequestInput, sort: [AbcReportV2Sort!]): AbcReportV2Page!
}

input AbcReportPageableFilterInput {
  """start & end of a period (yyyy-MM-dd'T'hh:mm:ss.ssssssZ)"""
  dateRangeInput: DateRangeInput!

  """list of stores to filter"""
  storeIds: [UUID!]

  """list of terminals to filter"""
  terminalIds: [UUID!]
}

type AbcReportV2 {
  name: String!
  categories: [CategorySnapshot!]
  quantity: BigDecimal!
  unitType: UnitType!
  revenue: BigDecimal!
  profit: BigDecimal!
  profitPercent: BigDecimal!
  revenuePercentOutOfTotal: BigDecimal!
  profitPercentOutOfTotal: BigDecimal!
  productType: ProductType!
}

type AbcReportV2Page implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [AbcReportV2!]!
}

input AbcReportV2Sort {
  field: AbcReportV2SortField
  direction: SortDirection
}

enum AbcReportV2SortField {
  NAME
  QUANTITY
  UNIT_TYPE
  REVENUE
  PROFIT
  PROFIT_PERCENT

  """
  REVENUE_PERCENT_OUT_OF_TOTAL,
  PROFIT_PERCENT_OUT_OF_TOTAL,
  """
  PRODUCT_TYPE
}

type AbcReportV2Total {
  quantity: BigDecimal!
  revenue: BigDecimal!
  profit: BigDecimal!
  percentageRevenue: BigDecimal!
  percentageProfit: BigDecimal!
}

input AbstractDocumentFilterInput {
  dateFrom: Instant
  dateTo: Instant
  statuses: [StatusDocument!]
}

input AbstractTaskFilterInput {
  kitchenWorkshopId: UUID!
  typeTasks: [TypeTask!]
  statuses: [Status!]
}

"""Accept employee invite response"""
type AcceptEmployeeInviteResponse {
  employeeId: UUID!
}

type Account {
  """User ID"""
  id: UUID!

  """Describes account accessibility"""
  active: Boolean!

  """Human-friendly user ID"""
  userId: Int!

  """Describes that user passed through Nomia welcome tutorial"""
  onboarded: Boolean!

  """Available logins for this user"""
  identities: [Identity!]

  """Identity claims"""
  identityClaims: [IdentityClaim!]

  """IDs of employments for current user"""
  employeeIds: [UUID!]

  """Employees list"""
  employees: [Employee]

  """Account's avatar image id"""
  imageId: UUID

  """Avatar image"""
  avatarUrl: String

  """Is password set for this account"""
  hasPassword: Boolean!

  """Is this account tech support member"""
  supportAssistant: Boolean!
  firstName: String!
  middleName: String
  lastName: String!
  workEmail: String!
  workPhone: String
  pin: String
  roles: [RoleCode!]
}

"""Account updating input"""
input AccountInput {
  """User avatar"""
  image: ImageInput

  """Mark that user passed nomia welcome tutorial"""
  onboarded: Boolean
}

type AccountNotification {
  notification: Notification!
  isRead: Boolean!
}

input AcquiringDataInput {
  terminalId: String!
  amount: AmountDataInput!
  authCode: String!
  rrn: String!
  receiptData: String!
  pan: String!
  responseMessage: String!
  merchantId: String!
  expDate: Instant!
  trxId: Int!
  transactionStatus: TransactionStatus!
  orgDateTime: Instant
  stan: Int!
  hostDateTime: Instant!
  responseCode: String!
}

"""Project interaction actions"""
enum Action {
  READ
  EDIT
}

"""Period when discount is active"""
type ActivityPeriod {
  """Activity period ID"""
  id: UUID!

  """Type"""
  periodType: PeriodType

  """Minimal date when discount is active (for `periodType == TEMPORARY`)"""
  minDate: LocalDate

  """Maximum date when discount is active (for `periodType == TEMPORARY`)"""
  maxDate: LocalDate

  """
  Minimal time of day when discount is active (for `periodType == SCHEDULED`)
  """
  minTime: LocalTime @deprecated(reason: "Use dailyPeriods instead")

  """
  Maximum time of day when discount is active (for `periodType == SCHEDULED`)
  """
  maxTime: LocalTime @deprecated(reason: "Use dailyPeriods instead")

  """Days of week when discount is active (for `periodType == SCHEDULED`)"""
  daysOfWeek: [DayOfWeek!] @deprecated(reason: "Use dailyPeriods instead")

  """
  Periods of time within days when discount is active (for `periodType == SCHEDULED`)
  """
  dailyPeriods: [DailyPeriod!]
}

"""Period when discount is active"""
input ActivityPeriodInput {
  """Activity period ID"""
  id: UUID

  """Type"""
  periodType: PeriodType!

  """Minimal date when discount is active (for `periodType == TEMPORARY`)"""
  minDate: LocalDate

  """Maximum date when discount is active (for `periodType == TEMPORARY`)"""
  maxDate: LocalDate

  """
  !!! @deprecated Use dailyPeriods instead
  Minimal time of day when discount is active (for `periodType == SCHEDULED`)
  """
  minTime: LocalTime

  """
  !!! @deprecated Use dailyPeriods instead
  Maximum time of day when discount is active (for `periodType == SCHEDULED`)
  """
  maxTime: LocalTime

  """
  !!! @deprecated Use dailyPeriods instead
  Days of week when discount is active (for `periodType == SCHEDULED`)
  """
  daysOfWeek: [DayOfWeek!]

  """
  Periods of time within days when discount is active (for `periodType == SCHEDULED`)
  """
  dailyPeriods: [DailyPeriodInput!]
}

input AddAddonInput {
  addonId: UUID!
  quantity: Int!
}

type Addon {
  id: UUID!
  name: String!
  description: String!
  price: AmountData!
  terms: [AddonTerms!]!
}

type AddonPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Addon!]!
}

type AddonSubscription {
  quantity: Int!
  addon: Addon!
}

type AddonTerms {
  deviceType: TermsDeviceType!
  limit: Int!
}

type AddressSearchDTO {
  address: String
  fullAddress: String
  latitude: String
  longitude: String
  postalCode: String
  timezone: String
}

type AddressSearchResponse {
  addressSearchDTOList: [AddressSearchDTO]!
}

enum AgentSign {
  NONE
  BANK_PAYING_AGENT
  BANK_PAYING_SUBAGENT
  PAYING_AGENT
  PAYING_SUBAGENT
  ATTORNEY
  COMMISSION_AGENT
  ANOTHER
}

enum Aligment {
  LEFT
  CENTER
  RIGHT
}

input AllArrivalDocumentsPageableV2Sort {
  field: AllArrivalDocumentsPageableV2SortField
  direction: SortDirection
}

enum AllArrivalDocumentsPageableV2SortField {
  DOC_NUMBER
  DATE
  CREATION_DATE
  TOTAL_AMOUNT
  WAREHOUSE
  SUPPLIER
  STATUS
  ORGANIZATION
}

type AllImageWithSizes {
  """array of images with size and url"""
  images: [ImagesWithSize!]!
}

input AllInventoryDocumentsPageableV2Sort {
  field: AllInventoryDocumentsPageableV2SortField
  direction: SortDirection
}

enum AllInventoryDocumentsPageableV2SortField {
  DOC_NUMBER
  DATE
  WAREHOUSE
  TOTAL_AMOUNT_DELTA
  INVENTORY_TYPE
  STATUS
}

input AllLeavingDocumentsPageableV2Sort {
  field: AllLeavingDocumentsPageableV2SortField
  direction: SortDirection
}

enum AllLeavingDocumentsPageableV2SortField {
  ORGANIZATION
  DOC_NUMBER
  DATE
  TOTAL_AMOUNT
  WAREHOUSE
  STATUS
  CREATION_DATE
}

input AllMoveDocumentsPageableSort {
  field: AllMoveDocumentsPageableSortField
  direction: SortDirection
}

enum AllMoveDocumentsPageableSortField {
  ORGANIZATION
  DOC_NUMBER
  DATE
  CREATION_DATE
}

input AllMoveDocumentsPageableV2Sort {
  field: AllMoveDocumentsPageableV2SortField
  direction: SortDirection
}

enum AllMoveDocumentsPageableV2SortField {
  ORGANIZATION
  DOC_NUMBER
  DATE
  TOTAL_AMOUNT
  WAREHOUSE_FROM
  WAREHOUSE_TO
  STATUS
  CREATION_DATE
}

input AllSuppliersPageableSort {
  field: AllSuppliersPageableSortField
  direction: SortDirection
}

enum AllSuppliersPageableSortField {
  COMPANY_NAME
  TYPE
  TOTAL_COSTS
  CONTACT_POINT
}

"""Measure of value for money type"""
type AmountData {
  """Value of money"""
  amountValue: BigDecimal!

  """Money currency"""
  currencyUnit: String!
}

"""Amount data input"""
input AmountDataInput {
  """Value of money"""
  amountValue: BigDecimal!

  """Money currency"""
  currencyUnit: String!
}

"""Data grouped by day of week for the selected period"""
type AnalyticsByDayOfWeek {
  """
  at which day of week data has been collected, from 0 - sunday to 6 - saturday
  """
  dayOfWeek: Int!

  """dayly average checks count"""
  averageWeeklyProfit: BigDecimal!

  """dayly average revenue"""
  averageWeeklyRevenue: BigDecimal!

  """dayly average check"""
  averageWeeklyCheck: BigDecimal!

  """dayly average guests count"""
  totalWeeklyGuestsCount: Int!

  """dayly average checks count"""
  totalWeeklyChecksCount: Int!
}

"""Data grouped by hour for the selected period"""
type AnalyticsByHour {
  """at which hour data has been collected"""
  hour: Int!

  """hourly average profit"""
  averageHourlyProfit: BigDecimal!

  """hourly average revenue"""
  averageHourlyRevenue: BigDecimal!

  """hourly average check"""
  averageHourlyCheck: BigDecimal!

  """hourly average guests count"""
  totalHourlyGuestsCount: Int!

  """hourly average checks count"""
  totalHourlyChecksCount: Int!
}

"""Data grouped by day for the selected period"""
type AnalyticsChartReport {
  """at which day data has been collected"""
  date: LocalDate!

  """daily profit"""
  profit: BigDecimal!

  """daily revenue"""
  revenue: BigDecimal!

  """daily averageCheck"""
  averageCheck: BigDecimal!

  """daily guests count"""
  guestsCount: Int!

  """daily checks count"""
  checksCount: Int!

  """quantity"""
  quantity: Int!

  """quantity"""
  stockUnitQuantity: BigDecimal!
}

"""Data grouped by hour for the selected period"""
type AnalyticsChartReportHourly {
  """at which day data has been collected"""
  date: LocalDateTime!

  """daily profit"""
  profit: BigDecimal!

  """daily revenue"""
  revenue: BigDecimal!

  """daily averageCheck"""
  averageCheck: BigDecimal!

  """daily guests count"""
  guestsCount: Int!

  """daily checks count"""
  checksCount: Int!

  """stockUnit quantity if stockUnit has been provided"""
  quantity: Int!

  """stockUnit quantity if stockUnit has been provided"""
  stockUnitQuantity: BigDecimal!
}

"""data for given period"""
type AnalyticsChartReportSummary {
  """all profit for the selected period"""
  profit: BigDecimal!

  """all revenue for the selected period"""
  revenue: BigDecimal!

  """all average check for the selected period"""
  averageCheck: BigDecimal!

  """all guests count for the selected period"""
  guestsCount: Int!

  """all checks count for the selected period"""
  checksCount: Int!

  """all quantity of a stockUnit for the selected period"""
  quantity: BigDecimal!

  """stockUnit unitType"""
  unitType: UnitType!
}

type AnalyticsWarehouseItemMoveHistoriesDetails {
  productName: String
  stockUnitId: UUID
  sectionName: String
  unitType: UnitType
  quantityAtStartOfPeriod: BigDecimal
  primePriceAtStartOfPeriod: AmountData
  arrivalDuringPeriod: BigDecimal
  writtenOffDuringPeriod: BigDecimal
  quantityAtEndOfPeriod: BigDecimal
  primePriceAtEndOfPeriod: AmountData
  productType: ProductType
  warehouseName: String
}

input AnalyticsWarehouseItemMoveHistoriesDetailsFilterInput {
  skuName: String
  dateFrom: LocalDate
  dateTo: LocalDate
  warehouseIds: [UUID!]
  productTypes: [ProductType!]
  sectionIds: [UUID!]
}

type AnalyticsWarehouseItemMoveHistoriesDetailsPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [AnalyticsWarehouseItemMoveHistoriesDetails!]!
}

type AnalyticsWarehouseItemMoveHistory {
  name: String!
  stockUnitId: UUID!
  unit: UnitType
  warehouseId: UUID!
  warehouseName: UUID!
  documentId: UUID!
  docNumber: Long!
  date: Instant!
  quantity: BigDecimal!
  initialQuantity: BigDecimal!
  remainsQuantity: BigDecimal!
  event: WarehouseItemEvent!
  reason: WarehouseItemReasonEvent!
  storeId: UUID
  coreItemId: UUID
  coreItemName: String
}

type AnalyticsWarehouseItemMoveHistoryDetails {
  documentId: UUID
  documentDate: Instant
  docNumber: Long
  stockUnitName: String
  unit: UnitType
  event: WarehouseItemEvent
  reason: WarehouseItemReasonEvent
  warehouseName: String

  """Changing amount of document"""
  quantity: BigDecimal

  """Arrival"""
  arrival: BigDecimal

  """Written off"""
  writtenOff: BigDecimal

  """Amount before this document"""
  previousQuantity: BigDecimal

  """Previous item move unit type"""
  previousUnit: UnitType

  """Amount after this document"""
  newQuantity: BigDecimal

  """Prime price before this document"""
  previousPrimePrice: AmountData

  """Prime price after this document"""
  newPrimePrice: AmountData
}

input AnalyticsWarehouseItemMoveHistoryDetailsFilterInput {
  stockUnitId: UUID
  warehouseIds: [UUID!]
  statuses: [WarehouseItemReasonEvent!]
  dateFrom: LocalDate
  dateTo: LocalDate
}

type AnalyticsWarehouseItemMoveHistoryDetailsPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [AnalyticsWarehouseItemMoveHistoryDetails!]!
}

input AnalyticsWarehouseItemMoveHistoryFilterInput {
  stockUnitId: UUID!
  warehouseIds: [UUID!]!
  statuses: [WarehouseItemReasonEvent!]!
  dateFrom: LocalDate!
  dateTo: LocalDate!
}

type AnalyticsWarehouseItemMoveHistoryPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [AnalyticsWarehouseItemMoveHistory!]!
}

interface ApiException {
  message: String
}

"""Request a token for an external device / application"""
input ApplicationInfoInput {
  """Token name"""
  name: String

  """Id of the store for which the token is requested"""
  storeId: UUID!

  """Id of the terminal for which the token is requested"""
  terminalId: UUID!
}

input ApplicationInfoInputV2 {
  """Token name"""
  name: String

  """Id of the store for which the token is requested"""
  storeId: UUID!

  """Id of the terminal for which the token is requested"""
  terminalId: UUID!

  """Device model"""
  deviceModel: String

  """Device type"""
  deviceType: DeviceType!

  """Unique key of the device"""
  deviceUniqueKey: String!
}

"""Discount applied to the order"""
type AppliedDiscount {
  """Id of applying discount to order"""
  id: UUID

  """Discount Id"""
  discountId: UUID

  """Discount name"""
  discountName: String

  """Discount type"""
  discountType: DiscountType

  """
  The number of items in the cart for applying a discount with the type` COUNTED`
  """
  freeQuantity: Int

  """Discount percentage"""
  percent: BigDecimal

  """Discount period"""
  period: AppliedDiscountActivityPeriod

  """
  Binding discounts to catalog items (the catalog itself, sections and products)
  """
  bindings: [AppliedDiscountBinding!]
}

"""Discount period"""
type AppliedDiscountActivityPeriod {
  """Id of the discount period"""
  id: UUID

  """Period type"""
  periodType: PeriodType

  """The minimum validity date of the discount (for the type` TEMPORARY`) """
  minDate: LocalDate

  """Maximum discount validity date (for the` TEMPORARY` type) """
  maxDate: LocalDate

  """The minimum duration of the discount (for the type` SCHEDULED`) """
  minTime: LocalTime @deprecated(reason: "Use dailyPeriods instead")

  """The maximum duration of the discount (for the type` SCHEDULED`) """
  maxTime: LocalTime @deprecated(reason: "Use dailyPeriods instead")

  """
  Days of the week in which the discount is valid (for type` SCHEDULED`)
  """
  daysOfWeek: [DayOfWeek!] @deprecated(reason: "Use dailyPeriods instead")

  """
  Periods of time whithin days when discount is active (for type `SCHEDULED`)
  """
  dailyPeriods: [AppliedDiscountDailyPeriod!]
}

"""Linking a discount to a catalog item"""
type AppliedDiscountBinding {
  """Bind Id"""
  id: UUID

  """Related entity type"""
  entityType: BoundEntityType

  """Id of the related entity"""
  entityId: UUID

  """
  The quantity of goods for this binding in the cart, for which a discount with the` COMBO` type is applied
  """
  amount: BigDecimal
}

"""Scheduled discount daily activity period"""
type AppliedDiscountDailyPeriod {
  """Minimal time of day when discount is active"""
  minTime: LocalTime!

  """Maximum time of day when discount is active"""
  maxTime: LocalTime!

  """Day of week for which the activity period is set"""
  dayOfWeek: DayOfWeek!
}

"""Discount applied to the order"""
input AppliedDiscountInput {
  """applied discount id"""
  id: UUID

  """discount Id"""
  discountId: UUID!

  """discount name"""
  discountName: String

  """discount type"""
  discountType: DiscountType

  """discount percent"""
  percent: BigDecimal

  """whether discount sets automatically"""
  automatic: Boolean

  """whether discount is combined with others discounts"""
  combined: Boolean
}

enum AppliedDiscountType {
  ITEM_DISCOUNT
  ORDER_DISCOUNT
  LOYALTY
}

type AppliedLoyalty {
  id: UUID!
  appliedId: UUID!
  name: String!
  amount: BigDecimal!
}

union AppliedModifier = TextAppliedModifier | StockUnitAppliedModifier

type AppliedModifierGroup {
  modifierGroupId: UUID!
  name: String!
  minValue: Int!
  maxValue: Int!
  required: Boolean!
  entityId: UUID!
  entityType: ModifierEntityType!
  entityName: String!
  type: ModifierType!
}

input AppliedModifierGroupInput {
  modifierGroupId: UUID!
  name: String!
  minValue: Int!
  maxValue: Int!
  required: Boolean!
  entityId: UUID!
  entityName: String!
  entityType: ModifierEntityType!
  type: ModifierType!
}

input AppliedModifierInput {
  stockUnitId: UUID
  quantity: MeasureDataInput
  unitQuantity: MeasureDataInput
  amount: AmountDataInput
  unitAmount: AmountDataInput
  salePrice: AmountDataInput
  primePrice: AmountDataInput
  resultAmount: AmountDataInput
  vatType: VatType
  sno: Sno
  positionTypeCode: PositionTypeCode
  id: UUID!
  modifierId: UUID!
  name: String!
  modifierGroup: AppliedModifierGroupInput!
  type: ModifierType!
}

union AppliedOrderDiscount = AppliedOrderDiscountSnapshot | AppliedOrderItemDiscountSnapshot | AppliedLoyalty

type AppliedOrderDiscountSnapshot {
  id: UUID!
  appliedId: UUID!
  name: String!
  amount: BigDecimal!
}

type AppliedOrderItemDiscountSnapshot {
  id: UUID!
  appliedId: UUID!
  name: String!
  amount: BigDecimal!
}

input ApplyOrderDiscountInput {
  """discountId OR loyaltyId"""
  id: UUID!

  """applied discountId OR applied loyaltyId"""
  appliedId: UUID!

  """discountName OR loyaltyName"""
  name: String!

  """discountAmount OR loyaltyAmount"""
  amount: BigDecimal!

  """type to qualify given entity"""
  type: AppliedDiscountType!
}

type AreaMetrics {
  """Square metre"""
  totalArea: Int

  """Square metre"""
  publicArea: Int

  """Square metre"""
  kitchenArea: Int
  seatingCapacity: Int
}

input AreaMetricsInput {
  """Square metre"""
  totalArea: Int

  """Square metre"""
  publicArea: Int

  """Square metre"""
  kitchenArea: Int
  seatingCapacity: Int
}

"""Arrival document data"""
type ArrivalDocument {
  """Arrival document ID"""
  id: UUID

  """Supplier of arrival"""
  supplier: Supplier

  """Organization that created the document"""
  organization: Organization

  """Arrived items"""
  documentItems: [DocumentItem!]

  """Number"""
  docNumber: Long

  """Total document item's amount"""
  totalAmount: BigDecimal!

  """Execution date"""
  date: Instant

  """Creation date"""
  creationDate: Instant

  """Type"""
  typeDocument: TypeDocument

  """Status"""
  status: StatusDocument

  """Description"""
  description: String

  """Warehouse of arrival"""
  to: Warehouse
}

"""Arrival document data"""
input ArrivalDocumentCreateInput {
  """Description"""
  description: String

  """Date of arrival"""
  date: Instant

  """ID of warehouse to which items arrived"""
  toWarehouseId: UUID!

  """ID of supplier from which items arrived"""
  supplierId: UUID!

  """Arrived items"""
  documentItems: [DocumentItemInput!]
}

type ArrivalDocumentPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [ArrivalDocument!]!
}

type ArrivalDocumentResult implements RequestResult {
  transactionId: UUID
  output: ArrivalDocument

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

"""Arrival document data"""
input ArrivalDocumentUpdateInput {
  """Arrival document ID"""
  id: UUID!

  """Description"""
  description: String

  """Date of arrival"""
  date: Instant

  """ID of warehouse to which items arrived"""
  toWarehouseId: UUID!

  """ID of supplier from which items arrived"""
  supplierId: UUID!

  """Arrived items"""
  documentItems: [DocumentItemInput!]
}

"""Second-phase auth response, contains access token & refresh token"""
type AuthData {
  """
  Access token: short duration token, required for every permission-required
  request, must be passed in 'Authorization' header with 'Bearer' prefix
  """
  accessToken: String!

  """
  Refresh token: long lifetime token, required to renew previously issued access
  token, can be used only once; must be passed in 'RefreshToken' header without prefix
  """
  refreshToken: String!
}

type BankSearchResponse {
  bic: String!
  name: String!
  correspondentAccount: String!
}

type Barcode {
  id: UUID!
  code: String!
}

input BarcodeInput {
  id: UUID
  code: String!
}

enum BarcodeType {
  EAN8
  EAN13
  UPCA
  UPCE
  CODE39
  CODE93
  CODE128
  CODABAR
  ITF
  ITF14
  GS1_128
  PDF417
  QR
}

"""An arbitrary precision signed decimal"""
scalar BigDecimal

type Bill {
  id: UUID!
  billNumber: Int!
  organizationId: UUID!
  accountingPeriod: DateRange!
  amount: AmountData
  discount: AmountData
  totalAmount: AmountData!
  items: [BillItem!]!
  status: BillStatus!
  paymentDate: LocalDate
}

type BillItem {
  id: UUID!
  name: String
  quantity: Int!
  price: AmountData
  amount: AmountData
  discount: AmountData
}

type BillPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Bill!]!
}

enum BillStatus {
  OPEN
  CLOSED
  EXPIRED
}

type BonusProgram {
  id: UUID!
  promotionProgram: PromotionProgram!
  pointPrice: PointPrice!
  bonusProgramType: BonusProgramType!
}

input BonusProgramCreateInput {
  promotionProgram: PromotionProgramCreateInput!
  pointPrice: PointPriceInput!
  bonusProgramType: BonusProgramType!
}

type BonusProgramResult implements RequestResult {
  transactionId: UUID
  output: BonusProgram

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

enum BonusProgramType {
  INCREASE
  DECREASE
}

input BonusProgramUpdateInput {
  id: UUID!
  promotionProgram: PromotionProgramUpdateInput
  pointPrice: PointPriceInput
}

"""Type of entity bound to discount"""
enum BoundEntityType {
  """Whole catalog"""
  CATALOG

  """Section of catalog"""
  SECTION

  """Product in catalog"""
  PRODUCT
}

"""Get all information for provided type (warehouse, catalog, store)"""
type BoundOverview {
  """id of an essence"""
  id: UUID!

  """
  type for which data will be collected, if warehouses then search all catalogs
  and stores with selected warehouse. If type is catalog then search all
  warehouses and stores for catalog
  """
  type: Type!

  """all warehouses for selected type"""
  warehouses: [Warehouse!]!

  """all warehouses for selected type"""
  catalogs: [Catalog!]!

  """all stores for selected type"""
  stores: [Store!]!

  """all menus for selected type"""
  menus: [Menu!]!
}

type CachedCategory {
  id: UUID!
  name: String!
  categories: [CachedCategory!]
  products: [CachedProduct!]
}

type CachedProduct {
  id: UUID!
  stockUnitId: UUID!
  name: String!
}

input CalculatePointsInput {
  storeId: UUID!
  customerId: UUID!
  orderPrice: BigDecimal!
  items: [ItemCalculatePointsInput!]!
}

input CancelAddonInput {
  addonId: UUID!
  quantity: Int!
}

"""Catalog output data"""
type Catalog {
  """Catalog ID"""
  id: UUID!

  """Catalog name"""
  name: String!

  """Organization which the catalog belongs to"""
  organization: Organization!

  """Count of products contained in the catalog"""
  countOfProducts: Int

  """Count of sections contained in the catalog"""
  countOfSections: Int

  """Catalog TaxProfile"""
  taxProfile: TaxProfile @deprecated(reason: "use snoValue & taxValue")

  """Catalog SNO (taxation system) with source info"""
  snoValue: SnoValue

  """Catalog VAT (tax rate) with source info"""
  vatValue: VatValue

  """Catalog position type with source info"""
  positionType: PositionType
}

"""Catalog input data"""
input CatalogCreateInput {
  """Catalog name"""
  name: String!

  """Catalog sort"""
  sort: Int

  """Catalog active"""
  active: Boolean

  """TaxProfile for catalog"""
  taxProfile: TaxProfileCreateInput

  """Position type for catalog"""
  positionTypeCode: PositionTypeCode
}

enum CatalogEntityType {
  STOCK_UNIT
  PRODUCT
  SECTION
  CATALOG
  STORE @deprecated
}

type CatalogResult implements RequestResult {
  transactionId: UUID
  output: Catalog

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

"""Section output data"""
type CatalogSection {
  """Section ID"""
  id: UUID!

  """Section name"""
  name: String!

  """Catalog which the section belongs to"""
  catalog: Catalog!

  """Whether the section is the parent"""
  isParent: Boolean!

  """Products quantity in section, not includes nested sections"""
  productsCount: Long!
  nestedCounts: CategoryNestedCounts

  """Section labels"""
  labels: [String!]!

  """Section depth level"""
  depthLevel: Int!

  """Section left margin in the tree"""
  leftMargin: Int!

  """Section right margin in the tree"""
  rightMargin: Int!

  """Section image"""
  image: Image

  """Parent section, if present"""
  parent: CatalogSection

  """Section color"""
  color: CatalogSectionColor! @deprecated(reason: "use colorSection")

  """Color section"""
  colorSection: ColorSection

  """Section TaxProfile"""
  taxProfile: TaxProfile @deprecated(reason: "use snoValue & taxValue")

  """Section SNO (taxation system) with source info"""
  snoValue: SnoValue

  """SNO (taxation system) of nearest parent catalog element, if available"""
  parentSnoValue: SnoValue

  """Section VAT (tax rate) with source info"""
  vatValue: VatValue

  """VAT (tax rate) of nearest parent catalog element, if available"""
  parentVatValue: VatValue

  """Section position type with source info"""
  positionType: PositionType

  """Position type of nearest parent catalog element, if available"""
  parentPositionType: PositionType

  """Section products"""
  products: [Product!]!
  modifierGroups: [ModifierGroup!]!
}

"""Section color"""
type CatalogSectionColor {
  """Color code in hex"""
  code: String!

  """Color name"""
  name: String!
}

"""Section color input data"""
input CatalogSectionColorInput {
  """Color code in hex"""
  code: String!

  """Color name"""
  name: String
}

"""Section input data"""
input CatalogSectionCreateInput {
  """Section name"""
  name: String!

  """Section sort"""
  sort: Int

  """Section active"""
  active: Boolean

  """Id of catalog which the section belongs to"""
  catalogId: UUID!

  """Id of parent section which the section belongs to"""
  parentSectionId: UUID

  """Section color"""
  color: CatalogSectionColorInput!

  """Section image"""
  image: ImageInput

  """TaxProfile for section"""
  taxProfile: TaxProfileCreateInput

  """Position type for section"""
  positionTypeCode: PositionTypeCode
}

"""Section input data"""
input CatalogSectionCreateInputV2 {
  """Section name"""
  name: String!

  """Section sort"""
  sort: Int

  """Section active"""
  active: Boolean

  """Id of catalog which the section belongs to"""
  catalogId: UUID!

  """Id of parent section which the section belongs to"""
  parentSectionId: UUID

  """Section image"""
  imageId: UUID

  """TaxProfile for section"""
  taxProfile: TaxProfileCreateInput

  """Position type for section"""
  positionTypeCode: PositionTypeCode
}

"""Filter object for catalog sections"""
input CatalogSectionFilterInput {
  """Catalog ID"""
  catalogId: UUID

  """Parent section ID"""
  parentSectionId: UUID

  """Search substring within section name"""
  depthLevel: Int
  search: String
}

"""Page of catalog sections"""
type CatalogSectionPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [CatalogSection!]!
}

type CatalogSectionResult implements RequestResult {
  transactionId: UUID
  output: CatalogSection

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

input CatalogSectionUpdateInput {
  """Section id"""
  id: UUID!

  """Section name"""
  name: String!

  """Section sort"""
  sort: Int

  """Section active"""
  active: Boolean

  """Id of catalog which the section belongs to"""
  catalogId: UUID!

  """Id of parent section which the section belongs to"""
  parentSectionId: UUID

  """Section color"""
  color: CatalogSectionColorInput!

  """Section image"""
  image: ImageInput

  """TaxProfile for section"""
  taxProfile: TaxProfileCreateInput

  """Position type for section"""
  positionTypeCode: PositionTypeCode
}

input CatalogSectionUpdateInputV2 {
  """Section id"""
  id: UUID!

  """Section name"""
  name: String!

  """Section sort"""
  sort: Int

  """Section active"""
  active: Boolean

  """Id of catalog which the section belongs to"""
  catalogId: UUID!

  """Id of parent section which the section belongs to"""
  parentSectionId: UUID

  """Section color"""
  colorSection: ColorSection!

  """Section image"""
  imageId: UUID

  """TaxProfile for section"""
  taxProfile: TaxProfileCreateInput

  """Position type for section"""
  positionTypeCode: PositionTypeCode
}

"""Catalog techCard input data"""
input CatalogTechCardInput {
  """TechCard ID (only when update)"""
  id: UUID

  """List of techCard items"""
  items: [CatalogTechCardItemInput!]

  """description of the cooking process"""
  processOfCooking: String
}

"""Catalog techCard item input data"""
input CatalogTechCardItemInput {
  techCardItemId: UUID

  """ID of contained stockUnit"""
  stockUnitId: UUID!

  """Brutto quantity of item in specified units"""
  brutto: BigDecimal!

  """Netto quantity of item in specified units"""
  netto: BigDecimal!

  """Measurement unit type"""
  bruttoUnit: UnitType!
}

input CatalogUpdateInput {
  """Catalog ID"""
  id: UUID!

  """Catalog sort"""
  sort: Int

  """Catalog active"""
  active: Boolean

  """Catalog name"""
  name: String!

  """TaxProfile for catalog"""
  taxProfile: TaxProfileCreateInput

  """Position type for catalog"""
  positionTypeCode: PositionTypeCode
}

type CategoryNestedCounts {
  """Products count in current and nested sections"""
  productCount: Int!

  """Categories count in current and nested sections"""
  categoryCount: Int!
}

type CategoryReport {
  categoryId: UUID!
  categoryName: String!
  categories: [CategorySnapshot!]
  pieceQuantity: BigDecimal!
  kilogramQuantity: BigDecimal!
  literQuantity: BigDecimal!
  ordersQuantity: Int!
  primePrice: BigDecimal!
  revenue: BigDecimal!
  tax: BigDecimal!
  profit: BigDecimal!
  foodCost: Int!
}

input CategoryReportInput {
  dateRange: DateRangeInput!
  storeIds: [UUID!]
  sectionIds: [UUID!]
  search: String
}

type CategoryReportOutput {
  total: CategoryReportTotal!
  rows(pageRequest: PageRequestInput, sort: [CategoryReportSort!]): CategoryReportPage!
}

type CategoryReportPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [CategoryReport!]!
}

input CategoryReportSort {
  field: CategoryReportSortField
  direction: SortDirection
}

enum CategoryReportSortField {
  CATEGORY_NAME
  ORDERS_QUANTITY
  REVENUE
  PROFIT
  PRIME_PRICE
  PIECE_QUANTITY
  KILOGRAM_QUANTITY
  LITER_QUANTITY
  TAX
  FOOD_COST
}

type CategoryReportTimeSeries {
  recordedAt: Instant!
  revenue: BigDecimal!
  profit: BigDecimal!
  foodCost: Int!
}

type CategoryReportTotal {
  pieceQuantity: BigDecimal!
  kilogramQuantity: BigDecimal!
  literQuantity: BigDecimal!
  ordersQuantity: Int!
  primePrice: BigDecimal!
  revenue: BigDecimal!
  tax: BigDecimal!
  profit: BigDecimal!
  foodCost: Int!
}

type CategorySnapshot {
  id: UUID!
  name: String!
}

"""Account password change request input"""
input ChangePasswordInput {
  """Old account password"""
  oldPassword: String!

  """New account password"""
  newPassword: String!
}

input ChartInput {
  dateRange: DateRangeInput!
  storeIds: [UUID!]
  terminalIds: [UUID!]
}

type Client {
  email: String
  phone: String
  vatin: String
  name: String
}

input ClientInput {
  email: String
  phone: String
  vatin: String
  name: String
}

enum ColorSection {
  COLOR_V1
  COLOR_V2
  COLOR_V3
  COLOR_V4
  COLOR_V5
  COLOR_V6
  COLOR_V7
  COLOR_V8
  COLOR_V9
  COLOR_V10
}

"""Support control claim confirmation input"""
input ConfirmSupportControlClaimInput {
  organizationId: UUID!
  password: String!
}

type ConfirmSupportControlClaimResult {
  id: UUID!
}

type ConsolidatedReport {
  timestamp: Instant!
  revenue: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
  ordersCount: Int!
  guestCount: Int!
  averageCheck: BigDecimal!
}

input ConsolidatedReportInput {
  storeIds: [UUID!]
  dateRange: DateRangeInput!
}

type ConsolidatedReportOutput {
  total: ConsolidatedReportTotal!
  rows(pageRequest: PageRequestInput, sort: [ConsolidatedReportSort!]): ConsolidatedReportPage!
}

type ConsolidatedReportPage {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [ConsolidatedReport!]!
}

input ConsolidatedReportSort {
  field: ConsolidatedReportSortFields
  direction: SortDirection
}

enum ConsolidatedReportSortFields {
  TIMESTAMP
  REVENUE
  DISCOUNT
  PROFIT
  ORDERS_COUNT
  AVERAGE_CHECK
}

type ConsolidatedReportTimeSeries {
  timestamp: Instant!
  revenue: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
  ordersCount: Int!
  guestCount: Int!
  averageCheck: BigDecimal!
}

type ConsolidatedReportTotal {
  revenue: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
  ordersCount: Int!
  guestCount: Int!
  averageCheck: BigDecimal!
}

type ConsolidatedReportXlsOutput {
  url: String!
}

type ConsolidatedTimeSeriesOutput {
  elements: [ConsolidatedReportTimeSeries!]!
}

type ConvertableUnit {
  convertableUnitType: UnitType!
  convertableQuantity: BigDecimal!
}

input ConvertableUnitInput {
  convertableUnitType: UnitType!
  convertableQuantity: BigDecimal!
}

type Coordinates {
  """latitude (e.g. of Moscow is 55.75000)"""
  latitude: Float!

  """longitude (e.g. of Moscow is 37.62100)"""
  longitude: Float!
}

input CoordinatesInput {
  """In case of geo pos: longitude (e.g. of Moscow is 55.75000)"""
  latitude: Float!

  """In case of geo pos: latitude (e.g. of Moscow is 37.62100)"""
  longitude: Float!
}

type CorrectionDocument implements KKTDocument {
  documentNumber: Int

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime

  """Fiscal storage serial number"""
  fnSerial: String
  fiscalSign: String
  registrationNumber: String
  documentType: DocumentType
  shiftNumber: Int
  ofdTicket: OfdTicket
  ffdVersion: FFDVersion
  storePlaceName: String
  storeAddress: String
  organizationVatin: String
  organizationName: String
  ofd: Ofd
  receiptType: CorrectionReceiptType
  correctionType: CorrectionType
  correctionBaseName: String

  """An RFC-3339 compliant DateTime"""
  correctionBaseDate: DateTime
  correctionBaseNumber: String
  roundTotal: Boolean
  electronically: Boolean
  operator: Operator
  payments: [Payment]
  checksum: String
  orderId: UUID
  items: [ReceiptItemWrapper]
}

input CorrectionDocumentInput {
  documentNumber: Int!

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime

  """Fiscal storage serial number"""
  fnSerial: String!
  fiscalSign: String
  registrationNumber: String
  documentType: DocumentType
  shiftNumber: Int
  ofdTicket: OfdTicketInput
  ffdVersion: FFDVersion
  storePlaceName: String
  storeAddress: String
  organizationVatin: String
  organizationName: String
  ofd: OfdInput
  receiptType: CorrectionReceiptType
  correctionType: CorrectionType
  correctionBaseName: String
  correctionBaseDate: DateTime
  correctionBaseNumber: String
  roundTotal: Boolean
  electronically: Boolean
  operator: OperatorInput
  payments: [PaymentInput]
  checksum: String
  orderId: UUID
  items: [ReceiptItemWrapperInput]
}

enum CorrectionReceiptType {
  SELL_CORRECTION
  BUY_CORRECTION
  SELL_RETURN_CORRECTION
  BUY_RETURN_CORRECTION
}

enum CorrectionType {
  SELF
  INSTRUCTION
}

"""Employee creation input"""
input CreateEmployeeInput {
  """Employee alias name"""
  firstName: String!
  middleName: String
  lastName: String!

  """Describes employee accessibility"""
  active: Boolean!

  """Usergroup membership"""
  userGroups: [UserGroupInput!]!

  """ИНН"""
  vatin: String

  """Employee access pin-code"""
  pin: String

  """Contact email"""
  workEmail: String!

  """СНИЛС"""
  snils: String

  """Medical book expire date (ISO-8601)"""
  medicalBookExpiresAt: Instant

  """Date of birth (ISO-8601)"""
  dateOfBirth: Instant

  """Date of employment (ISO-8601)"""
  dateOfEmployment: Instant

  """Contact phone"""
  workPhone: String

  """Living address"""
  address: String
}

"""Employee invitation create input"""
input CreateEmployeeInvitationInput {
  """Employee willing for employement"""
  employeeId: UUID!

  """Invitation expire date (ISO-8601)"""
  expiresAt: Instant
}

input CreateModifierGroupInput {
  name: String!
  minValue: Int
  maxValue: Int
  required: Boolean
  sort: Int
  type: ModifierType

  """there is no concept of activity at the moment"""
  active: Boolean
  modifiers: [CreateModifierInput!]
  productIds: [UUID!]
}

input CreateModifierInput {
  stockUnitModifier: CreateStockUnitModifierInput
  textModifier: CreateTextModifierInput
}

"""Organization creation input"""
input CreateOrganizationInput {
  """Name of new organization"""
  name: String

  """Currency unit e.g. RUB"""
  currencyUnit: String
  timezone: String
}

"""Organization invitation creation input"""
input CreateOrganizationInvitationInput {
  """Name of invitation"""
  name: String!

  """Describes active state for this invitation"""
  active: Boolean
}

input CreateStockUnitModifierInput {
  name: String!
  pinned: Boolean!
  sort: Int!
  stockUnitId: UUID!
}

input CreateTextModifierInput {
  name: String!
  pinned: Boolean!
  sort: Int!
}

type CreditLoyalty {
  id: UUID!
  image: Image
  name: String!
  description: String
  pointPrice: BigDecimal!
  beginsAt: LocalDate
  endsAt: LocalDate
  active: Boolean!
  customerGroups(pageRequest: PageRequestInput): CustomerGroupPage
  storeBindings: [LoyaltyStoreBinding!]!
}

type CreditLoyaltyBinding {
  entityType: BoundEntityType!
  entityId: UUID!
  stockUnitIds: [UUID!]
}

input CreditLoyaltyCreateInput {
  name: String!
  description: String
  pointPrice: BigDecimal!
  beginsAt: LocalDate
  endsAt: LocalDate
  active: Boolean!
  imageId: UUID
  customerGroupIds: [UUID!]
  storeBindings: [LoyaltyStoreBindingInput!]
}

"""CreditLoyalty"""
input CreditLoyaltyFilterInput {
  search: String
  storeIds: [UUID!]
  withoutStoreBindings: Boolean
}

type CreditLoyaltyPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [CreditLoyalty!]!
}

type CreditLoyaltyResult implements RequestResult {
  transactionId: UUID
  output: CreditLoyalty

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

input CreditLoyaltyUpdateInput {
  id: UUID!
  name: String
  description: String
  pointPrice: BigDecimal
  beginsAt: LocalDate
  endsAt: LocalDate
  active: Boolean
  imageId: UUID
  customerGroupIds: [UUID!]
  storeBindings: [LoyaltyStoreBindingInput!]
}

enum Currency {
  """Afghani"""
  AFN

  """Euro"""
  EUR

  """Lek"""
  ALL

  """Algerian Dinar"""
  DZD

  """US Dollar"""
  USD

  """Kwanza"""
  AOA

  """East Caribbean Dollar"""
  XCD

  """Argentine Peso"""
  ARS

  """Armenian Dram"""
  AMD

  """Aruban Florin"""
  AWG

  """Australian Dollar"""
  AUD

  """Azerbaijan Manat"""
  AZN

  """Bahamian Dollar"""
  BSD

  """Bahraini Dinar"""
  BHD

  """Taka"""
  BDT

  """Barbados Dollar"""
  BBD

  """Belarusian Ruble"""
  BYN

  """Belize Dollar"""
  BZD

  """CFA Franc BCEAO"""
  XOF

  """Bermudian Dollar"""
  BMD

  """Indian Rupee"""
  INR

  """Ngultrum"""
  BTN

  """Boliviano"""
  BOB

  """Mvdol"""
  BOV

  """Convertible Mark"""
  BAM

  """Pula"""
  BWP

  """Norwegian Krone"""
  NOK

  """Brazilian Real"""
  BRL

  """Brunei Dollar"""
  BND

  """Bulgarian Lev"""
  BGN

  """Burundi Franc"""
  BIF

  """Cabo Verde Escudo"""
  CVE

  """Riel"""
  KHR

  """CFA Franc BEAC"""
  XAF

  """Canadian Dollar"""
  CAD

  """Cayman Islands Dollar"""
  KYD

  """Chilean Peso"""
  CLP

  """Unidad de Fomento"""
  CLF

  """Yuan Renminbi"""
  CNY

  """Colombian Peso"""
  COP

  """Unidad de Valor Real"""
  COU

  """Comorian Franc """
  KMF

  """Congolese Franc"""
  CDF

  """New Zealand Dollar"""
  NZD

  """Costa Rican Colon"""
  CRC

  """Cuban Peso"""
  CUP

  """Peso Convertible"""
  CUC

  """Netherlands Antillean Guilder"""
  ANG

  """Czech Koruna"""
  CZK

  """Danish Krone"""
  DKK

  """Djibouti Franc"""
  DJF

  """Dominican Peso"""
  DOP

  """Egyptian Pound"""
  EGP

  """El Salvador Colon"""
  SVC

  """Nakfa"""
  ERN

  """Lilangeni"""
  SZL

  """Ethiopian Birr"""
  ETB

  """Falkland Islands Pound"""
  FKP

  """Fiji Dollar"""
  FJD

  """CFP Franc"""
  XPF

  """Dalasi"""
  GMD

  """Lari"""
  GEL

  """Ghana Cedi"""
  GHS

  """Gibraltar Pound"""
  GIP

  """Quetzal"""
  GTQ

  """Pound Sterling"""
  GBP

  """Guinean Franc"""
  GNF

  """Guyana Dollar"""
  GYD

  """Gourde"""
  HTG

  """Lempira"""
  HNL

  """Hong Kong Dollar"""
  HKD

  """Forint"""
  HUF

  """Iceland Krona"""
  ISK

  """Rupiah"""
  IDR

  """SDR (Special Drawing Right)"""
  XDR

  """Iranian Rial"""
  IRR

  """Iraqi Dinar"""
  IQD

  """New Israeli Sheqel"""
  ILS

  """Jamaican Dollar"""
  JMD

  """Yen"""
  JPY

  """Jordanian Dinar"""
  JOD

  """Tenge"""
  KZT

  """Kenyan Shilling"""
  KES

  """North Korean Won"""
  KPW

  """Won"""
  KRW

  """Kuwaiti Dinar"""
  KWD

  """Som"""
  KGS

  """Lao Kip"""
  LAK

  """Lebanese Pound"""
  LBP

  """Loti"""
  LSL

  """Rand"""
  ZAR

  """Liberian Dollar"""
  LRD

  """Libyan Dinar"""
  LYD

  """Swiss Franc"""
  CHF

  """Pataca"""
  MOP

  """Denar"""
  MKD

  """Malagasy Ariary"""
  MGA

  """Malawi Kwacha"""
  MWK

  """Malaysian Ringgit"""
  MYR

  """Rufiyaa"""
  MVR

  """Ouguiya"""
  MRU

  """Mauritius Rupee"""
  MUR

  """ADB Unit of Account"""
  XUA

  """Mexican Peso"""
  MXN

  """Mexican Unidad de Inversion (UDI)"""
  MXV

  """Moldovan Leu"""
  MDL

  """Tugrik"""
  MNT

  """Moroccan Dirham"""
  MAD

  """Mozambique Metical"""
  MZN

  """Kyat"""
  MMK

  """Namibia Dollar"""
  NAD

  """Nepalese Rupee"""
  NPR

  """Cordoba Oro"""
  NIO

  """Naira"""
  NGN

  """Rial Omani"""
  OMR

  """Pakistan Rupee"""
  PKR

  """Balboa"""
  PAB

  """Kina"""
  PGK

  """Guarani"""
  PYG

  """Sol"""
  PEN

  """Philippine Peso"""
  PHP

  """Zloty"""
  PLN

  """Qatari Rial"""
  QAR

  """Romanian Leu"""
  RON

  """Russian Ruble"""
  RUB

  """Rwanda Franc"""
  RWF

  """Saint Helena Pound"""
  SHP

  """Tala"""
  WST

  """Dobra"""
  STN

  """Saudi Riyal"""
  SAR

  """Serbian Dinar"""
  RSD

  """Seychelles Rupee"""
  SCR

  """Leone"""
  SLL

  """Leone"""
  SLE

  """Singapore Dollar"""
  SGD

  """Sucre"""
  XSU

  """Solomon Islands Dollar"""
  SBD

  """Somali Shilling"""
  SOS

  """South Sudanese Pound"""
  SSP

  """Sri Lanka Rupee"""
  LKR

  """Sudanese Pound"""
  SDG

  """Surinam Dollar"""
  SRD

  """Swedish Krona"""
  SEK

  """WIR Euro"""
  CHE

  """WIR Franc"""
  CHW

  """Syrian Pound"""
  SYP

  """New Taiwan Dollar"""
  TWD

  """Somoni"""
  TJS

  """Tanzanian Shilling"""
  TZS

  """Baht"""
  THB

  """Pa’anga"""
  TOP

  """Trinidad and Tobago Dollar"""
  TTD

  """Tunisian Dinar"""
  TND

  """Turkish Lira"""
  TRY

  """Turkmenistan New Manat"""
  TMT

  """Uganda Shilling"""
  UGX

  """Hryvnia"""
  UAH

  """UAE Dirham"""
  AED

  """US Dollar (Next day)"""
  USN

  """Peso Uruguayo"""
  UYU

  """Uruguay Peso en Unidades Indexadas (UI)"""
  UYI

  """Unidad Previsional"""
  UYW

  """Uzbekistan Sum"""
  UZS

  """Vatu"""
  VUV

  """Bolívar Soberano"""
  VES

  """Bolívar Soberano"""
  VED

  """Dong"""
  VND

  """Yemeni Rial"""
  YER

  """Zambian Kwacha"""
  ZMW

  """Zimbabwe Dollar"""
  ZWL
}

type Customer {
  id: UUID!
  firstName: String!
  lastName: String
  points: Int!
  phoneNumber: String
  dateOfBirth: LocalDate
  cardNumber: String
  address: CustomerAddress
  groups(pageRequest: PageRequestInput): CustomerGroupPage
  comment: String
  age: Int
  gender: GenderType
}

type CustomerAddress {
  baseAddress: String!
  flatNumber: String
  door: String
  doorCode: String
  floor: Int @deprecated(reason: "use floorString")
  floorString: String
}

input CustomerAddressInput {
  baseAddress: String!
  flatNumber: String
  door: String
  doorCode: String
  floor: Int
  floorString: String
}

input CustomerCreateInput {
  firstName: String!
  lastName: String
  phoneNumber: String
  dateOfBirth: LocalDate
  cardNumber: String
  address: CustomerAddressInput
  groups: [UUID!]
  comment: String
  gender: GenderType
}

"""Customer"""
input CustomerFilterInput {
  search: String
  groupIds: [UUID!]
  withoutGroups: Boolean
}

type CustomerForCurrentDayWidget {
  points: Int!
  orderAmount: BigDecimal!
  orderCount: Int!
  averageCheck: BigDecimal!
  since: Instant
}

input CustomerForCurrentDayWidgetInput {
  customerId: UUID!
}

type CustomerForCurrentDayWidgetOutput {
  widget: CustomerForCurrentDayWidget!
}

type CustomerGroup {
  id: UUID!
  name: String!
  store: Store
  color: String!
  description: String
  customersCount: Int!
  customers(pageRequest: PageRequestInput): CustomerPage
}

input CustomerGroupCreateInput {
  name: String!
  storeId: UUID
  description: String
}

"""CustomerGroup"""
input CustomerGroupFilterInput {
  search: String
  storeIds: [UUID!]
}

type CustomerGroupPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [CustomerGroup!]!
}

type CustomerGroupResult implements RequestResult {
  transactionId: UUID
  output: CustomerGroup

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

input CustomerGroupsSort {
  field: CustomerGroupsSortField
  direction: SortDirection
}

enum CustomerGroupsSortField {
  NAME
  CUSTOMERS_COUNT
}

input CustomerGroupUpdateInput {
  id: UUID!
  name: String
  storeId: UUID
  description: String
}

type CustomerOrder {
  orderId: UUID!
  orderNumber: String!
  paymentDate: Instant!
  itemsCount: Int!
  orderAmount: BigDecimal!
  discountAmount: BigDecimal!
  revenue: BigDecimal!
  paySystemNames: String!
  shift: Int!
}

input CustomerOrdersInput {
  customerId: UUID!
  storeIds: [UUID!]
  dateRange: DateRangeInput!
}

type CustomerOrdersPage {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [CustomerOrder!]!
}

type CustomerPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Customer!]!
}

type CustomerResult implements RequestResult {
  transactionId: UUID
  output: Customer

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

type CustomerSnapshot {
  id: UUID!
  firstName: String
  lastName: String
  phoneNumber: String
  dateOfBirth: LocalDate
  cardNumber: String
}

input CustomerSnapshotInput {
  id: UUID!
  firstName: String!
  lastName: String
  phoneNumber: String
  dateOfBirth: LocalDate
  cardNumber: String
  address: CustomerAddressInput
}

input CustomerUpdateInput {
  id: UUID!
  firstName: String
  lastName: String
  phoneNumber: String
  dateOfBirth: LocalDate
  cardNumber: String
  address: CustomerAddressInput
  groups: [UUID!]
  comment: String
  gender: GenderType
}

input CustomerUpdateInputV2 {
  id: UUID!
  firstName: String
  lastName: String
  phoneNumber: String
  dateOfBirth: LocalDate
  cardNumber: String
  address: CustomerAddressInput
  addGroups: [UUID!]
  removeGroups: [UUID!]
  comment: String
  gender: GenderType
}

type DailyLoyaltyAnalytics {
  date: LocalDate!
  loyaltyAnalytics: LoyaltyAnalytics!
}

"""Timespan within day when discount is active"""
type DailyPeriod {
  """Minimal time of day when discount is active"""
  minTime: LocalTime!

  """Maximum time of day when discount is active"""
  maxTime: LocalTime!

  """Day of week for which the activity period is set"""
  dayOfWeek: DayOfWeek!
}

"""Timespan within day when discount is active"""
input DailyPeriodInput {
  """Minimal time of day when discount is active"""
  minTime: LocalTime!

  """Maximum time of day when discount is active"""
  maxTime: LocalTime!

  """Day of week for which the activity period is set"""
  dayOfWeek: DayOfWeek!
}

type DarkTask {
  id: UUID!
  taskNumber: Long
  accountId: UUID
  kitchenWorkshopId: UUID
  inWarehouseId: UUID
  outWarehouseId: UUID
  store: Store!
  employeeId: UUID
  status: Status
  createdAt: Instant
  inProgressedAt: Instant
  doneAt: Instant
  closedAt: Instant
  canceledAt: Instant
  taskItems: [TaskItem!]!
}

input DarkTaskFilterInput {
  statuses: [Status!]
}

"""Dark task data"""
input DarkTaskInput {
  """Dark task ID"""
  id: UUID

  """ID of kitchen workshop this task has been assigned to"""
  kitchenWorkshopId: UUID!

  """ID of warehouse which supplies items for this task"""
  inWarehouseId: UUID

  """ID of warehouse which stores items made during this task"""
  outWarehouseId: UUID

  """ID of store this task is for"""
  storeId: UUID!

  """Items created with this task"""
  taskItems: [TaskItemInput!]
}

type DarkTaskPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [DarkTask!]!
}

enum DateGrouping {
  HOUR
  DAY
  MONTH
}

type DateRange {
  from: LocalDate
  to: LocalDate
}

input DateRangeInput {
  dateFrom: LocalDate!
  dateTo: LocalDate!
}

"""An RFC-3339 compliant DateTime Scalar"""
scalar DateTime

input DateTimeRange {
  from: DateTime
  to: DateTime
}

"""Day of week"""
enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

type DebitLoyalty {
  id: UUID!
  image: Image
  name: String!
  description: String
  pointPrice: BigDecimal!
  maxPercentage: Int!
  beginsAt: LocalDate
  endsAt: LocalDate
  active: Boolean!
  customerGroups(pageRequest: PageRequestInput): CustomerGroupPage
  storeBindings: [LoyaltyStoreBinding!]!
}

input DebitLoyaltyCreateInput {
  name: String!
  description: String
  pointPrice: BigDecimal!
  maxPercentage: Int!
  beginsAt: LocalDate
  endsAt: LocalDate
  active: Boolean!
  customerGroupIds: [UUID!]
  storeBindings: [LoyaltyStoreBindingInput!]
  imageId: UUID
}

"""DebitLoyalty"""
input DebitLoyaltyFilterInput {
  search: String
  storeIds: [UUID!]
  withoutStoreBindings: Boolean
}

type DebitLoyaltyPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [DebitLoyalty!]!
}

type DebitLoyaltyResult implements RequestResult {
  transactionId: UUID
  output: DebitLoyalty

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

input DebitLoyaltyUpdateInput {
  id: UUID!
  name: String
  description: String
  pointPrice: BigDecimal
  maxPercentage: Int
  beginsAt: LocalDate
  endsAt: LocalDate
  active: Boolean
  customerGroupIds: [UUID!]
  storeBindings: [LoyaltyStoreBindingInput!]
  imageId: UUID
}

type DeclineSupportControlClaimResult {
  id: UUID!
}

type DeliveryApiKey {
  apiKey: UUID!
  organizationId: UUID!
  storeIds: [UUID!]!
  secret: String!
  deliveryCounterparty: DeliveryCounterparty!
}

"""Delivery Counterparty"""
type DeliveryCounterparty {
  id: UUID!

  """Counterparty name"""
  name: String!

  """Description of the counterparty"""
  description: String
}

"""Shipping Information"""
type DeliveryInfo {
  """Shipping cost of the order"""
  deliveryAmount: AmountData
  change: AmountData

  """Number of guests for whom the order will be created"""
  personCount: Int

  """Delivery address"""
  fullAddress: String
  phoneNumber: String
  clientName: String

  """Delivery start time. Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  startAt: Instant

  """Delivery end time. Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  endOf: Instant

  """
  The time by which the order should be delivered in the yyyy-MM-dd'T'HH:mm:ss.SS'Z'format.
  If NULL, it will be delivered as soon as possible.
  """
  deliveryDate: Instant
  courierArrivementDate: Instant
  clientArrivementDate: Instant

  """Comment"""
  comment: String

  """Delivery Counterparty"""
  deliveryCounterparty: DeliveryCounterparty

  """The stages that the order went through"""
  stages: [OrderStage!]

  """Current stage of order"""
  currentStage: OrderStage!
  nextStage: Stage
  yandexPromos: [YandexPromo!]
}

"""Shipping Information"""
input DeliveryInfoInput {
  deliveryAmount: AmountDataInput!
  change: AmountDataInput

  """Number of guests for whom the order will be created"""
  personCount: Int!

  """Delivery address"""
  fullAddress: String!

  """
  The time by which the order should be delivered in the yyyy-MM-dd'T'HH:mm:ss.SS'Z'format.
  If NULL, it will be delivered as soon as possible.
  """
  deliveryDate: Instant

  """Comment"""
  comment: String

  """latitude (e.g. of Moscow is 55.75000)"""
  latitude: Float!

  """longitude (e.g. of Moscow is 37.62100)"""
  longitude: Float!
}

"""Demand Reset Password Response"""
type DemandResetPasswordResponse {
  """Demand Reset Password. Request ID"""
  requestId: UUID!

  """Identity type, such as email or phone"""
  identityType: IdentityType!
}

type DemandResetPasswordResult implements RequestResult {
  transactionId: UUID
  output: DemandResetPasswordResponse

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

type Device {
  id: UUID!
  name: String
  deviceUniqueKey: String
  model: String
  deviceType: DeviceType!
  createdDate: LocalDate
}

type DevicePage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Device!]!
}

type DeviceRestriction {
  deviceType: TermsDeviceType!
  allowed: Int!
}

enum DeviceType {
  PHONE
  TABLET
}

type DeviceUsage {
  deviceType: DeviceType!
  used: Int!
}

"""Discount data"""
type Discount {
  """Discount ID"""
  id: UUID!

  """Catalog ID"""
  catalogId: UUID!

  """Store ID"""
  storeId: UUID!
  image: Image

  """Type"""
  discountType: DiscountType!

  """
  Quantity of items in cart needed for discount with `discountType == COUNTED` to be applied
  """
  freeQuantity: Int

  """Amount in percent"""
  percent: BigDecimal

  """Name"""
  name: String!

  """Short description"""
  description: String

  """Should percent be displayed alongside discount"""
  isPercentShown: Boolean!

  """Should discount be visible to client"""
  isShownToUser: Boolean!

  """
  Should discount be applied automatically when an order where it's applicable is created
  """
  isAutomatic: Boolean!

  """Can discont be combined with other discounts"""
  isCombined: Boolean!

  """Is discount active"""
  isActive: Boolean!

  """Period when discount is active"""
  period: ActivityPeriod!

  """List of binding this discount has on catalog, sections and/or products"""
  bindings: [DiscountBinding!]
}

"""Discounts data grouped by hour for the selected period"""
type DiscountAnalyticsByHour {
  """at which hour data has been collected"""
  hour: Int!

  """hourly average discount amount"""
  averageHourlyDiscountAmount: BigDecimal!

  """hourly average revenue for orders with discounts"""
  averageHourlyRevenueWithDiscounts: BigDecimal!

  """hourly average revenue for orders without discounts"""
  averageHourlyRevenueWithoutDiscounts: BigDecimal!

  """hourly average check with discounts"""
  averageHourlyCheck: BigDecimal!

  """hourly total used unique discounts"""
  totalHourlyDiscountsCount: Int!

  """hourly total guests count with discounts"""
  totalHourlyGuestsCount: Int!
}

"""Discount analytics data for given date"""
type DiscountAnalyticsChartReport {
  """date for which data has been collected"""
  date: LocalDate!

  """daily profit"""
  revenue: BigDecimal! @deprecated(reason: "use revenueWithDiscounts and revenueWithoutDiscounts")

  """daily amount of discounts"""
  discountAmount: BigDecimal!

  """daily revenue for sold positions with discounts in all orders"""
  revenueWithDiscounts: BigDecimal!

  """daily revenue for sold positions without discounts"""
  revenueWithoutDiscounts: BigDecimal!

  """daily number of used distinct discounts"""
  usedDiscountsCount: Int!

  """daily number of guests who used discounts"""
  guestsCount: Int!

  """average amount in check where discounts were used"""
  averageCheck: BigDecimal!
}

"""Summary of discount data for given period"""
type DiscountAnalyticsSummary {
  """daily profit"""
  revenue: BigDecimal! @deprecated(reason: "use revenueWithDiscounts and revenueWithoutDiscounts")

  """daily amount of discounts"""
  discountAmount: BigDecimal!

  """daily revenue for sold positions with discounts in all orders"""
  revenueWithDiscounts: BigDecimal!

  """daily revenue for sold positions without discounts"""
  revenueWithoutDiscounts: BigDecimal!

  """daily number of used distinct discounts"""
  usedDiscountsCount: Int!

  """daily number of guests who used discounts"""
  guestsCount: Int!

  """average check with applied discounts"""
  averageCheck: BigDecimal!
}

enum DiscountBasis {
  ORDER
  ORDER_ITEM
}

"""Binding of discount either to catalog, section or product"""
type DiscountBinding {
  """Discount binding ID"""
  id: UUID!

  """Type of bound entity"""
  entityType: BoundEntityType

  """ID of bound entity from catalog"""
  entityId: UUID

  """
  Amount of items in cart, which belong to entity from this binding, for `discountType == COMBO` to be applied
  """
  amount: BigDecimal

  """Applications of discount to stock units"""
  stockUnitIds: [UUID!]
}

"""Binding of discount either to catalog, section or product"""
input DiscountBindingInput {
  """Discount binding ID"""
  id: UUID

  """Type of bound entity"""
  entityType: BoundEntityType!

  """ID of bound entity from catalog"""
  entityId: UUID!

  """
  Amount of items in cart, which belong to entity from this binding, for `discountType == COMBO` to be applied
  """
  amount: BigDecimal
}

"""Discount data"""
input DiscountCreateInput {
  """ID of store which discount belongs to"""
  storeId: UUID!

  """ID of catalog  which discount belongs to"""
  catalogId: UUID!

  """Type"""
  discountType: DiscountType!

  """
  Quantity of items in cart needed for discount with `discountType == COUNTED` to be applied
  """
  freeQuantity: Int

  """Amount in percent"""
  percent: BigDecimal!

  """Name"""
  name: String!

  """Short description"""
  description: String

  """Should percent be displayed alongside discount"""
  isPercentShown: Boolean!

  """Should discount be visible to client"""
  isShownToUser: Boolean!

  """
  Should discount be applied automatically when an order where it's applicable is created
  """
  isAutomatic: Boolean!

  """Can discont be combined with other discounts"""
  isCombined: Boolean!

  """Period when discount is active"""
  period: ActivityPeriodInput!

  """List of binding this discount has on catalog, sections and/or products"""
  bindings: [DiscountBindingInput!]!

  """Image"""
  image: ImageInput
}

"""Discount data"""
input DiscountCreateInputV2 {
  """Amount in percent"""
  percent: BigDecimal!

  """Name"""
  name: String!

  """Short description"""
  description: String

  """Should percent be displayed alongside discount"""
  isPercentShown: Boolean

  """
  Should discount be applied automatically when an order where it's applicable is created
  """
  isAutomatic: Boolean!

  """Can discount be combined with other discounts"""
  isCombined: Boolean!

  """Is discount active"""
  isActive: Boolean!

  """Period when discount is active"""
  period: ActivityPeriodInput!

  """Image"""
  imageId: UUID
  customerGroups: [UUID!]
  storeBindings: [LoyaltyStoreBindingInput!]!
  basis: DiscountBasis!
}

"""Discounts filtering object"""
input DiscountFilterInput {
  """Store ID"""
  storeId: UUID

  """Catalog ID"""
  catalogId: UUID

  """
  MENU ID FILTER NOT IMPLEMENTED YET! Menu ID, also filters applications by stockUnitId
  """
  menuId: UUID
}

"""Discounts filtering object"""
input DiscountFilterInputV2 {
  """Store ID"""
  storeId: UUID

  """Catalog ID"""
  catalogId: UUID

  """
  MENU ID FILTER NOT IMPLEMENTED YET! Menu ID, also filters applications by stockUnitId
  """
  menuId: UUID

  """Filter by discount enabled state"""
  active: Boolean

  """
  whether to filter out discounts which is used in any customer groups. This
  parameter has default value FALSE if does not passed
  """
  withoutCustomerGroups: Boolean

  """discountBasis e.g. discount for order or order_item"""
  basis: DiscountBasis

  """search string for discont name"""
  search: String

  """discounts specific customer could get"""
  customerId: UUID
}

type DiscountProgram {
  id: UUID!
  basis: DiscountBasis!
  promotionProgram: PromotionProgram!
  percent: BigDecimal!
  dailyPeriods: [DailyPeriod!]
  automatic: Boolean!
  combined: Boolean!
}

input DiscountProgramCreateInput {
  basis: DiscountBasis!
  promotionProgram: PromotionProgramCreateInput!
  percent: BigDecimal!
  dailyPeriods: [DailyPeriodInput!]

  """
  Should discount be applied automatically when an order where it's applicable is created
  """
  automatic: Boolean!

  """Can discount be combined with other discounts"""
  combined: Boolean!
}

input DiscountProgramPatchUpdateRequest {
  id: UUID!
  basis: DiscountBasis
  promotionProgram: PromotionProgramUpdateInput
  percent: BigDecimal
  dailyPeriods: [DailyPeriodInput!]

  """
  Should discount be applied automatically when an order where it's applicable is created
  """
  automatic: Boolean

  """Can discount be combined with other discounts"""
  combined: Boolean
}

type DiscountProgramResult implements RequestResult {
  transactionId: UUID
  output: DiscountProgram

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

type DiscountResult implements RequestResult {
  transactionId: UUID
  output: DiscountV2

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

type DiscountsRevenue {
  discountMarginLoss: BigDecimal!
  revenueWithDiscounts: BigDecimal!
  revenueWithoutDiscounts: BigDecimal!
}

type DiscountsUsed {
  ordersWithDiscounts: Int!
  ordersWithoutDiscounts: Int!
}

"""Table of discount applications"""
type DiscountTableViewRow {
  """Name of an item sold"""
  itemName: String!

  """Store in which item was sold"""
  storeName: String!

  """Date-time of sale"""
  appliedAt: LocalDateTime!

  """Sale price of a position in order"""
  totalPrice: AmountData!

  """Amount of applied discount"""
  discountPrice: AmountData!
}

"""Type of discount"""
enum DiscountType {
  """Default type"""
  STANDARD

  """Type for product combos (e.g. 15% discount for 2 burgers and 1 cola)"""
  COMBO

  """Type for products made free on certain quantity (e.g. 3rd coffee free)"""
  COUNTED
}

input DiscountUpdateInput {
  """Discount ID"""
  id: UUID!

  """ID of store which discount belongs to"""
  storeId: UUID!

  """ID of catalog  which discount belongs to"""
  catalogId: UUID!

  """Type"""
  discountType: DiscountType!

  """
  Quantity of items in cart needed for discount with `discountType == COUNTED` to be applied
  """
  freeQuantity: Int

  """Amount in percent"""
  percent: BigDecimal!

  """Name"""
  name: String!

  """Short description"""
  description: String

  """Should percent be displayed alongside discount"""
  isPercentShown: Boolean!

  """Should discount be visible to client"""
  isShownToUser: Boolean!

  """
  Should discount be applied automatically when an order where it's applicable is created
  """
  isAutomatic: Boolean!

  """Can discont be combined with other discounts"""
  isCombined: Boolean!

  """Is discount active"""
  isActive: Boolean

  """Period when discount is active"""
  period: ActivityPeriodInput!

  """List of binding this discount has on catalog, sections and/or products"""
  bindings: [DiscountBindingInput!]!

  """Image"""
  image: ImageInput
}

input DiscountUpdateInputV2 {
  """Discount ID"""
  id: UUID!

  """Amount in percent"""
  percent: BigDecimal

  """Name"""
  name: String

  """Short description"""
  description: String

  """Should percent be displayed alongside discount"""
  isPercentShown: Boolean

  """
  Should discount be applied automatically when an order where it's applicable is created
  """
  isAutomatic: Boolean

  """Can discount be combined with other discounts"""
  isCombined: Boolean

  """Is discount active"""
  isActive: Boolean

  """Period when discount is active"""
  period: ActivityPeriodInput

  """Image"""
  imageId: UUID
  customerGroups: [UUID!]
  storeBindings: [LoyaltyStoreBindingInput!]
  basis: DiscountBasis
}

"""Discount data"""
type DiscountV2 {
  """Discount ID"""
  id: UUID!

  """image"""
  image: Image

  """Amount in percent"""
  percent: BigDecimal!

  """Name"""
  name: String!

  """Short description"""
  description: String

  """Should percent be displayed alongside discount"""
  isPercentShown: Boolean!

  """
  Should discount be applied automatically when an order where it's applicable is created
  """
  isAutomatic: Boolean!

  """Can discont be combined with other discounts"""
  isCombined: Boolean!

  """Is discount active"""
  isActive: Boolean!

  """Period when discount is active"""
  period: ActivityPeriod!

  """customer groups discount belongs to"""
  customerGroups(pageRequest: PageRequestInput): CustomerGroupPage

  """old bindings now bounded to store"""
  storeBindings: [LoyaltyStoreBinding!]!

  """discount based on order or order item"""
  basis: DiscountBasis!
}

type DiscountV2Page implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [DiscountV2!]!
}

"""Document data"""
type Document {
  """Document ID"""
  id: UUID

  """ID of actual typed document (e.g. arrival document ID)"""
  originalDocumentId: UUID

  """Organization that created the document"""
  organization: Organization
  docNumber: Long

  """Execution date"""
  date: Instant

  """Creation date"""
  creationDate: Instant

  """Type"""
  typeDocument: TypeDocument

  """Status"""
  status: StatusDocument

  """Description"""
  description: String
}

input DocumentFilterInput {
  warehouseId: UUID
  supplierId: UUID
  status: StatusDocument
  dateFrom: Instant
  dateTo: Instant
  search: String
}

input DocumentFilterInputV2 {
  warehouseIds: [UUID!]
  supplierIds: [UUID!]
  statuses: [StatusDocument!]
  dateRange: DateRangeInput
  search: String
}

"""Document item data"""
type DocumentItem {
  """id"""
  id: UUID

  """Name"""
  name: String

  """Factual quantity of items"""
  factQuantity: Float

  """Initially planned quantity of items"""
  planQuantity: Float

  """Stock unit"""
  stockUnit: StockUnit

  """Currency of amount literal code (e.g. RUB)"""
  currency: String

  """Amount of money transferred for this item"""
  amount: Float

  """Comment"""
  comment: String
  resultLeavingItem: [ResultLeavingItem!]

  """Last inventory Date"""
  lastInventoryDate: Instant
  lastInventoryDocumentId: UUID

  """Leftover on last inventory (fact quantity from last inventory)"""
  leftoverOnLastInventory: BigDecimal

  """
  total ARRIVAL and MOVE quantity of a corresponding document item since last
  inventory where warehouse TO is equal to warehouse where inventory is being processed
  """
  arrivalFromLastInventory: BigDecimal

  """total sold quantity of a corresponding stock unit since last inventory"""
  soldFromLastInventory: BigDecimal

  """
  total LEAVING and MOVE quantity of a corresponding document item since last
  inventory where warehouse FROM is equal to warehouse where inventory is being processed
  """
  writtenOffFromLastInventory: BigDecimal

  """amount difference between fact and plan quantity"""
  amountDelta: BigDecimal
  convertableUnit: ConvertableUnit

  """quantity difference between fact and plan quantity"""
  quantityDelta: BigDecimal
}

"""Item described in non-inventory document"""
input DocumentItemInput {
  """Factual quantity of items"""
  factQuantity: Float

  """If passed then factQuantity will be overridden due to convert policy"""
  convertableUnit: ConvertableUnitInput

  """Stock unit ID"""
  stockUnit: StockUnitWarehouseInput!

  """Currency of amount literal code (e.g. RUB)"""
  currency: String

  """Amount of money transferred for this item"""
  amount: Float

  """Comment"""
  comment: String

  """Name"""
  name: String
}

type DocumentPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Document!]!
}

enum DocumentType {
  REGISTRATION
  OPEN_SHIFT
  RECEIPT
  BSO
  CLOSE_SHIFT
  CLOSE_FN
  OPERATOR_CONFIRMATION
  REREGISTRATION
  EXCHANGE_STATUS
  CORRECTION
  BSO_CORRECTION
}

"""Menu duplicating result"""
type DuplicateMenuResponse {
  storesMenus: [StoreMenu!]!
}

"""Employee (linking entity between account and organization)"""
type Employee {
  """Employee ID"""
  id: UUID!

  """Describes employee accessibility"""
  active: Boolean!

  """ID of account, employeed user"""
  accountId: UUID

  """Employee's account"""
  account: Account

  """Employee alias name"""
  firstName: String!
  middleName: String
  lastName: String!

  """PIN code"""
  pin: String

  """Encoded employee PIN code bcrypt"""
  pinToken: String

  """Organization, employer"""
  organization: Organization!

  """ID of organization, employer"""
  organizationId: UUID! @deprecated(reason: "use `organization` field")

  """Name of organization, employer"""
  organizationName: String! @deprecated(reason: "use `organization` field")

  """Usergroup membership"""
  userGroups: [EmployeeUserGroup!]!

  """Employee permissions"""
  permissions: [Permission!]!

  """Employee targeted permissions (access control list)"""
  targetPermissions: [EmployeeTargetPermission!]!

  """Invitation to organization for current employee"""
  employeeInvitation: EmployeeInvitation

  """Contact email"""
  workEmail: String!

  """Contact phone"""
  workPhone: String

  """ИНН"""
  vatin: String

  """СНИЛС"""
  snils: String

  """Medical book expire date (ISO-8601)"""
  medicalBookExpiresAt: Instant

  """Date of birth (ISO-8601)"""
  dateOfBirth: Instant

  """Date of employment (ISO-8601)"""
  dateOfEmployment: Instant

  """Living address"""
  address: String
  invitation: Invitation
}

type EmployeeByPointTransaction {
  id: UUID!
  firstName: String!
  middleName: String
  lastName: String!
  roles: [RoleCode]!
}

"""Employee changes subscriptions types"""
union EmployeeChange = EmployeeCreated | EmployeeUpdated | EmployeeRemoved

type EmployeeCreated {
  employee: Employee!
}

input EmployeeFilterInput {
  name: String
  active: Boolean
  hasAccount: Boolean
  roleCode: RoleCode
}

"""Private employee invitation"""
type EmployeeInvitation {
  id: UUID!

  """Employee account login (email), used to send invitation"""
  login: String

  """Employee willing for employement"""
  employee: Employee!

  """Invitation expire date (ISO-8601)"""
  expiresAt: Instant!

  """Confirmation token for this invitation"""
  confirmationToken: String!

  """URL"""
  url: String!
}

"""Invited employee roles"""
type EmployeeInvitationRole {
  storeName: String
  roleCode: RoleCode!
  role: String!
}

type EmployeePage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Employee!]!
}

type EmployeeRemoved {
  id: UUID!
}

type EmployeeSubscription {
  mutation: EmployeeSubscriptionType!
  employee: Employee!
}

enum EmployeeSubscriptionType {
  CREATED
  UPDATED
  REMOVED
  TARGET_PERMISSION_CHANGED
}

"""Security targeted permission. Can allow access to entities by ID"""
type EmployeeTargetPermission {
  """Target permission ID"""
  id: UUID!

  """Scope of target permission (e.g. **STORE** or **CATALOG**)"""
  scope: Scope!

  """Action performed for targeted permission (e.g. **READ** or **WRITE**)"""
  action: Action!

  """Entity targets for this permission"""
  targets: [UUID!]!
}

type EmployeeUpdated {
  employee: Employee!
}

"""Employee's user group binding"""
type EmployeeUserGroup {
  """ID of this employee's user group binding"""
  id: UUID!

  """User group ID"""
  userGroupId: UUID!

  """User group name"""
  name: String

  """Unique group code"""
  code: RoleCode!

  """ID of store in which user group is applied (null for admins)"""
  storeId: UUID
}

type ExtendSupportControlClaimResult {
  id: UUID!
}

type ExternalImage {
  url: String!
  ratio: Float!
  scale: Scale!
}

input ExternalImageInput {
  url: String!
  ratio: Float!
  scale: Scale!
}

enum FFDVersion {
  UNKNOWN
  FFD_1_0_5
  FFD_1_1
}

"""A file part in a multipart request"""
scalar FileUpload

type FiscalDocument implements KKTDocument {
  documentNumber: Int

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime

  """Fiscal storage serial number"""
  fnSerial: String
  fiscalSign: String
  registrationNumber: String
  documentType: DocumentType
  shiftNumber: Int
  ofdTicket: OfdTicket
  ffdVersion: FFDVersion
  storePlaceName: String
  storeAddress: String
  organizationVatin: String
  organizationName: String
  ofd: Ofd
  type: FiscalReceiptType
  roundTotal: Boolean
  electronically: Boolean
  taxSystem: TaxSystem
  client: Client
  operator: Operator
  payments: [Payment]
  checksum: String
  orderId: UUID
  items: [ReceiptItemWrapper]
}

input FiscalDocumentInput {
  documentNumber: Int!

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime

  """Fiscal storage serial number"""
  fnSerial: String!
  fiscalSign: String
  registrationNumber: String
  documentType: DocumentType
  shiftNumber: Int
  ofdTicket: OfdTicketInput
  ffdVersion: FFDVersion
  storePlaceName: String
  storeAddress: String
  organizationVatin: String
  organizationName: String
  ofd: OfdInput
  type: FiscalReceiptType
  roundTotal: Boolean
  electronically: Boolean
  taxSystem: TaxSystem
  client: ClientInput
  operator: OperatorInput
  payments: [PaymentInput]
  checksum: String
  orderId: UUID
  items: [ReceiptItemWrapperInput]
}

enum FiscalReceiptType {
  SELL
  BUY
  SELL_RETURN
  BUY_RETURN
}

enum FiscalStatus {
  NotFiscal
  SuccessfullyFiscalized
  FiscalizationError
}

type FrequentlyBoughtTogetherProducts {
  """StockUnitName in crossing percent order descending"""
  stockUnitName: String!

  """CrossingPercent out of 100"""
  crossingPercent: BigDecimal!
}

enum GenderType {
  MALE
  FEMALE
}

input GetAnalyticsWarehouseItemMoveHistoriesDetailsSort {
  field: GetAnalyticsWarehouseItemMoveHistoriesDetailsSortField
  direction: SortDirection
}

enum GetAnalyticsWarehouseItemMoveHistoriesDetailsSortField {
  MOVEMENT_DATE
  STOCK_UNIT_NAME
  WAREHOUSE
  CATEGORY
  PRODUCT_TYPE
  ARRIVAL
  WRITTEN_OFF
  QUANTITY_AT_START_OF_PERIOD
  QUANTITY_AT_END_OF_PERIOD
  PRIME_PRICE_AT_START_OF_PERIOD
  PRIME_PRICE_AT_END_OF_PERIOD
}

"""A single goal"""
type GoalItem {
  """Goal ID"""
  id: UUID!

  """Name"""
  name: String

  """Attribute describing whether the goal is completed by user"""
  isComplete: Boolean!
}

"""Group of associated goals"""
type GoalSection {
  """Goal group ID"""
  id: UUID!

  """Name"""
  name: String

  """List of goals in this group"""
  goals: [GoalItem!]!
}

enum GraphQLMethodType {
  QUERY
  MUTATION
}

"""Action on notification that triggers GraphQL query or mutation"""
type GraphQLNotificationAction {
  """Method type (query or mutation)"""
  methodType: GraphQLMethodType!

  """Method name"""
  methodName: String!

  """Optional parameters that need to be passed to GraphQL method"""
  parameters: [GraphQLNotificationActionParameter!]
}

"""Parameter to send in GraphQL query triggered by notification"""
type GraphQLNotificationActionParameter {
  """Parameter path"""
  path: String!

  """Parameter value as string"""
  value: String!
}

type HourlyLoyaltyAnalytics {
  hour: Int!
  loyaltyAnalytics: LoyaltyAnalytics!
}

"""Account identity. (different logins for same user)"""
type Identity {
  """Identity ID"""
  id: UUID!

  """Identity value (e.g. **unknown@mail.dot**)"""
  value: String!

  """Is this identity confirmed and allowed for using"""
  confirmed: Boolean! @deprecated(reason: "Do not use. Will be removed soon. Identity, if exists - is always confirmed")

  """Identity type (email or phone)"""
  identityType: IdentityType!
}

type IdentityClaim {
  """Identity claim ID"""
  id: UUID!

  """Claiming identity value"""
  value: String!

  """Claiming identity type"""
  identityType: IdentityType!

  """Account id"""
  accountId: UUID
}

"""Identity removed response payload"""
type IdentityRemovedPayload {
  id: UUID!
}

"""Identity type (login types)"""
enum IdentityType {
  EMAIL
  PHONE
}

type Image {
  """image id"""
  id: UUID!

  """original file name"""
  originalFileName: String!

  """image extension (e.g. jpg, png...)"""
  extension: String!

  """multiple image sizes with url to each image size"""
  imageSizes: [ImageSize!]!
}

input ImageInput {
  externalImage: ExternalImageInput

  """image id"""
  id: UUID

  """original image file name"""
  originalFileName: String

  """image extension (e.g. jpg, png...)"""
  extension: String

  """image width"""
  width: Int

  """image height"""
  height: Int

  """data"""
  body: FileUpload
}

type ImageSize {
  """image width"""
  width: Int

  """image height"""
  height: Int

  """url to specific image size"""
  url: String
}

input ImagesSizeInput {
  """image id"""
  id: UUID!

  """array of image size inputs with width and height"""
  sizes: [SizeInput!]!
}

type ImagesWithSize {
  """image id"""
  id: UUID!

  """array of urls to specific image"""
  urls: [URL!]!
}

"""Filter for catalog elements"""
input InCatalogFilterInput {
  """Catalog element IDs"""
  ids: [UUID!]

  """Catalog element type"""
  types: [CatalogEntityType!]

  """Catalog ID"""
  catalogId: UUID!

  """Parent sections"""
  parentSectionIds: [UUID!]

  """Product type filter"""
  productType: ProductType

  """Name substring"""
  name: String

  """Maximum nesting depth"""
  maxDepth: Long
}

"""Page of catalog subelements"""
type InCatalogPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [InCatalogResponse!]!
}

"""other types"""
union InCatalogResponse = Product | CatalogSection

type Ingredient {
  """Measurement unit type"""
  unitType: UnitType!

  """Quantity in specified units"""
  quantity: BigDecimal!

  """Stock Unit Id"""
  stockUnitId: UUID!
}

input IngredientInput {
  """Measurement unit type"""
  unitType: UnitType!

  """Quantity in specified units"""
  quantity: BigDecimal!

  """Stock Unit Id"""
  stockUnitId: UUID!
}

scalar Instant

type IntegrationProperty {
  restaurantId: UUID!
  clientId: UUID!
  clientSecret: String!
  host: String!
}

"""Inventory document data"""
type InventoryDocument {
  """Inventory document ID"""
  id: UUID

  """Organization that created the document"""
  organization: Organization

  """Inventory items"""
  documentItems: [DocumentItem!]

  """Number"""
  docNumber: Long

  """Total document item's amount delta"""
  totalAmountDelta: BigDecimal!

  """Execution date"""
  date: Instant

  """Creation date"""
  creationDate: Instant

  """Type"""
  typeDocument: TypeDocument

  """Status"""
  status: StatusDocument

  """Description"""
  description: String

  """Warehouse of inventory"""
  from: Warehouse
  type: InventoryType
}

"""Inventory document data"""
input InventoryDocumentCreateInput {
  """Description"""
  description: String

  """Date of inventory"""
  date: Instant

  """ID of warehouse where inventory occured"""
  fromWarehouseId: UUID!

  """Inventory items"""
  documentItems: [InventoryDocumentItemInput!]
  type: InventoryType
}

input InventoryDocumentFilterInputV2 {
  warehouseIds: [UUID!]
  statuses: [StatusDocument!]
  dateRange: DateRangeInput
  search: String
}

"""Item described in inventory document"""
input InventoryDocumentItemInput {
  """Factual quanity of items"""
  factQuantity: Float!

  """If passed then factQuantity will be overridden due to convert policy"""
  convertableUnit: ConvertableUnitInput

  """Stock unit ID"""
  stockUnit: StockUnitWarehouseInput!

  """Currency of amount literal code (e.g. RUB)"""
  currency: String

  """Amount of money transferred for this item"""
  amount: Float

  """Comment"""
  comment: String

  """Initially planned quantity of items"""
  planQuantity: Float!

  """Name"""
  name: String

  """Last inventory Date"""
  lastInventoryDate: Instant

  """Last inventory documentId"""
  lastInventoryDocumentId: UUID

  """Leftover on last inventory (fact quantity from last inventory)"""
  leftoverOnLastInventory: BigDecimal

  """
  total ARRIVAL and MOVE quantity of a corresponding document item since last
  inventory where warehouse TO is equal to warehouse where inventory is being processed
  """
  arrivalFromLastInventory: BigDecimal

  """total sold quantity of a corresponding stock unit since last inventory"""
  soldFromLastInventory: BigDecimal

  """
  total LEAVING and MOVE quantity of a corresponding document item since last
  inventory where warehouse FROM is equal to warehouse where inventory is being processed
  """
  writtenOffFromLastInventory: BigDecimal

  """amount difference between fact and plan quantity"""
  amountDelta: BigDecimal

  """quantity difference between fact and plan quantity"""
  quantityDelta: BigDecimal
}

type InventoryDocumentPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [InventoryDocument!]!
}

type InventoryDocumentResult implements RequestResult {
  transactionId: UUID
  output: InventoryDocument

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

"""Inventory document data"""
input InventoryDocumentUpdateInput {
  """Inventory document ID"""
  id: UUID!

  """Description"""
  description: String

  """Date of inventory"""
  date: Instant

  """ID of warehouse where inventory occured"""
  fromWarehouseId: UUID!

  """Inventory items"""
  documentItems: [InventoryDocumentItemInput!]
  type: InventoryType
}

enum InventoryType {
  FULL
  PARTIAL
}

"""Employee invitation"""
type Invitation {
  id: UUID!
  employeeId: UUID!
  organizationName: String @deprecated(reason: "use organizationInfo")
  organizationInfo: InvitationOrganizationInfo!
  employeeRoles: [EmployeeInvitationRole!]!
}

type InvitationOrganizationInfo {
  id: UUID!
  name: String
  shortId: String!
}

"""Issuing support control claim input"""
input IssueSupportControlClaimInput {
  organizationId: UUID!
}

type IssueSupportControlClaimResult {
  supportControlClaimIds: [UUID!]!
}

type ItemBarcode {
  barcode: String
  barcodeType: BarcodeType
  alignment: Aligment
  scale: Int
}

input ItemBarcodeInput {
  text: String
  alignment: Aligment
  wrap: TextWrap
  fontNumber: Long
  fontDoubleWidth: Boolean
  fontDoubleHeight: Boolean
  linespacing: Long
}

input ItemCalculatePointsInput {
  id: UUID!
  price: BigDecimal!
}

type ItemText {
  text: String
  alignment: Aligment
  wrap: TextWrap
  fontNumber: Long
  fontDoubleWidth: Boolean
  fontDoubleHeight: Boolean
  linespacing: Long
}

input ItemTextInput {
  text: String
  alignment: Aligment
  wrap: TextWrap
  fontNumber: Long
  fontDoubleWidth: Boolean
  fontDoubleHeight: Boolean
  linespacing: Long
}

"""Kitchen workshop data"""
type KitchenWorkshop {
  """Kitchen workshop ID"""
  id: UUID!
  name: String!
  address: String

  """ID of organization kitchen workshop belongs to"""
  organizationId: UUID!

  """ID of store kitchen workshop serves"""
  store: Store

  """techcards kitchen workshop can process"""
  techCards: [TechCard!]!

  """ID of warehouse which supplies items to kitchen workshop"""
  inWarehouseId: UUID

  """ID of warehouse which stores items made in kitchen workshop"""
  outWarehouseId: UUID
  autoConfirm: Boolean!
  manualVerification: Boolean!

  """Creation date-time in system"""
  createdAt: Instant
}

"""Data for kitchen workshop creation"""
input KitchenWorkshopCreateInput {
  """Name"""
  name: String!
  address: String

  """ID of store kitchen workshop serves"""
  storeId: UUID!

  """ID of warehouse which supplies items to kitchen workshop"""
  inWarehouseId: UUID

  """ID of warehouse which stores items made in kitchen workshop"""
  outWarehouseId: UUID
  autoConfirm: Boolean!
  manualVerification: Boolean!
}

type KitchenWorkshopPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [KitchenWorkshop!]!
}

"""Data for kitchen workshop update"""
input KitchenWorkshopUpdateInput {
  """Kitchen workshop ID"""
  id: UUID!

  """Name"""
  name: String!
  address: String

  """ID of warehouse which supplies items to kitchen workshop"""
  inWarehouseId: UUID

  """ID of warehouse which stores items made in kitchen workshop"""
  outWarehouseId: UUID
  autoConfirm: Boolean!
  manualVerification: Boolean!
}

interface KKTDocument {
  documentNumber: Int

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime

  """Fiscal storage serial number"""
  fnSerial: String
  fiscalSign: String
  registrationNumber: String
  documentType: DocumentType
  shiftNumber: Int
  ofdTicket: OfdTicket
}

input KKTDocumentFilterInput {
  documentNumber: [Int!]

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTimeRange

  """Fiscal storage serial number"""
  fnSerial: [String!]
  fiscalSign: [String!]
  registrationNumber: [String!]
  documentType: [DocumentType!]
  shiftNumber: [Int!]
}

input KKTDocumentsInput {
  registrationDocuments: [RegistrationDocumentInput]
  reRegistrationDocuments: [ReRegistrationDocumentInput]
  shiftOpeningDocuments: [ShiftOpeningDocumentInput]
  shiftClosingDocuments: [ShiftClosingDocumentInput]
  fiscalDocuments: [FiscalDocumentInput]
  correctionDocuments: [CorrectionDocumentInput]
}

union KKTDocumentUnion = RegistrationDocument | ReRegistrationDocument | ShiftOpeningDocument | ShiftClosingDocument | FiscalDocument | CorrectionDocument

type KKTDocumentUnionPage implements Page {
  totalPages: Int!
  pageNumber: Int!
  pageSize: Int!
  total: Int!
  content: [KKTDocumentUnion]!
}

"""Arrival document data"""
type LeavingByOrderDocument {
  """Arrival document ID"""
  id: UUID

  """Supplier of arrival"""
  order: Order

  """Organization that created the document"""
  organization: Organization

  """Arrived items"""
  documentItems: [DocumentItem!]

  """Number"""
  docNumber: Long

  """Execution date"""
  date: Instant

  """Creation date"""
  creationDate: Instant

  """Type"""
  typeDocument: TypeDocument

  """Status"""
  status: StatusDocument

  """Description"""
  description: String

  """Warehouse of arrival"""
  warehouse: Warehouse
}

type LeavingByOrderDocumentPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [LeavingByOrderDocument!]!
}

input LeavingByOrderDocumentV2FilterInput {
  documentId: UUID
  orderId: UUID
}

"""Leaving document data"""
type LeavingDocument {
  """Leaving document ID"""
  id: UUID

  """Organization that created the document"""
  organization: Organization

  """Left items"""
  documentItems: [DocumentItem!]

  """Number"""
  docNumber: Long

  """Total document item's amount"""
  totalAmount: BigDecimal!

  """Execution date"""
  date: Instant

  """Creation date"""
  creationDate: Instant

  """Type"""
  typeDocument: TypeDocument

  """Status"""
  status: StatusDocument

  """Description"""
  description: String

  """Warehouse of leaving"""
  from: Warehouse
}

"""Leaving document data"""
input LeavingDocumentCreateInput {
  """Descritpion"""
  description: String

  """Date of leaving"""
  date: Instant

  """ID of warehouse from which items left"""
  fromWarehouseId: UUID!

  """Left items"""
  documentItems: [DocumentItemInput!]
}

type LeavingDocumentPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [LeavingDocument!]!
}

type LeavingDocumentResult implements RequestResult {
  transactionId: UUID
  output: LeavingDocument

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

"""Leaving document data"""
input LeavingDocumentUpdateInput {
  """Leaving document id"""
  id: UUID!

  """Descritpion"""
  description: String

  """Date of leaving"""
  date: Instant

  """ID of warehouse from which items left"""
  fromWarehouseId: UUID!

  """Left items"""
  documentItems: [DocumentItemInput!]
}

"""Light task data"""
type LightTask {
  """Light task ID"""
  id: UUID!

  """ID of kitchen workshop this task has been assigned to"""
  kitchenWorkshopId: UUID!

  """ID of warehouse which supplies items for this task"""
  inWarehouseId: UUID

  """ID of warehouse which stores items made during this task"""
  outWarehouseId: UUID

  """store this task is for"""
  store: Store!

  """ID of order that spawned this task"""
  orderId: UUID!

  """Items created with this task"""
  taskItems: [TaskItem!]
  status: Status
  cancelled: Boolean
}

"""Light task data"""
input LightTaskInput {
  """Light task ID"""
  id: UUID
  taskNumber: Long

  """ID of kitchen workshop this task has been assigned to"""
  kitchenWorkshopId: UUID!

  """ID of warehouse which supplies items for this task"""
  inWarehouseId: UUID!

  """ID of warehouse which stores items made during this task"""
  outWarehouseId: UUID!

  """ID of store this task is for"""
  storeId: UUID!

  """ID of order that spawned this task"""
  orderId: UUID!

  """Items created with this task"""
  taskItems: [TaskItemInput!]
}

scalar LocalDate

"""Java 8 LocalDateTime as scalar."""
scalar LocalDateTime

"""Java 8 LocalTime as scalar."""
scalar LocalTime

"""Seccond-phase auth input."""
input LoginInput {
  """Request ID received from first auth phase"""
  requestId: UUID!

  """Have to be passed if sign-in request allows password-auth"""
  password: String

  """Have to be passed if sign-in request does not allows password-auth"""
  code: String
}

"""A 64-bit signed integer"""
scalar Long

"""Lost password response"""
type LostPasswordResponse {
  """Lost password request ID"""
  requestId: UUID!

  """Identity type, such as email or phone"""
  identityType: IdentityType!
}

type LoyaltyAnalytics {
  revenueWithDiscounts: DiscountsRevenue!
  discountsUsed: DiscountsUsed!
  loyaltyUsed: LoyaltyUsed!
}

type LoyaltyAnalyticsSummary {
  revenueWithDiscounts: BigDecimal!
  discountsUsed: Int!
  loyaltyUsed: Int!
}

input LoyaltyBindingInput {
  entityType: BoundEntityType!
  entityId: UUID!
}

type LoyaltyPoints {
  earn: Int
  spent: Int
  spentAmount: BigDecimal
}

input LoyaltyPointsInput {
  """either points have been earn"""
  earn: Int

  """either points have been spent"""
  spent: Int

  """either amount have been spent"""
  spentAmount: BigDecimal
}

enum LoyaltyPointsTransactionType {
  INCREASE
  DECREASE
}

type LoyaltyPointTransaction {
  id: UUID!
  organizationId: UUID!
  date: Instant!
  pointTransactionFact: PointTransactionFactCore!
  beforePoints: Int!
  points: Int!
  customer: CustomerSnapshot!
  loyalties: [LoyaltySnapshot]!
  orderId: UUID!
  storeId: UUID!
  terminalId: UUID!
}

"""PointTransaction"""
type LoyaltyPointTransactionPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [LoyaltyPointTransaction]!
}

type LoyaltyPointTransactionResult implements RequestResult {
  transactionId: UUID
  output: LoyaltyPointTransaction

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

type LoyaltySnapshot {
  id: UUID!
  loyaltyId: UUID!
  name: String!
  pointPrice: BigDecimal!
  points: Int!
  stockUnitIds: [UUID]
}

type LoyaltyStoreBinding {
  storeId: UUID!
  bindings: [CreditLoyaltyBinding!]
}

input LoyaltyStoreBindingInput {
  storeId: UUID!
  bindings: [LoyaltyBindingInput!]!
}

type LoyaltyUsed {
  ordersWithLoyalty: Int!
  ordersWithoutLoyalty: Int!
}

input ManualLoyaltyPointsModificationInput {
  customerId: UUID!
  points: Int!
  type: LoyaltyPointsTransactionType!
  comment: String
}

type ManualLoyaltyPointsModificationTransactionResult implements RequestResult {
  transactionId: UUID
  output: ManualLoyaltyPointsTransaction

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

"""Manual"""
type ManualLoyaltyPointsTransaction {
  id: UUID!
  organizationId: UUID!
  date: Instant!
  type: LoyaltyPointsTransactionType!
  beforePoints: Int!
  points: Int!
  customerId: UUID!
  accountId: UUID!
  comment: String
  customer: Customer
}

input ManualModifyPointsInput {
  customerId: UUID!
  points: Int!
  type: PointTransactionType!
  comment: String
}

"""Sort direction"""
enum MarketingSortDirection {
  """Ascending (0-9, A-Z)"""
  ASC

  """Descending (9-0, Z-A)"""
  DESC
}

"""Measuring something"""
type MeasureData {
  """Qty"""
  quantity: BigDecimal!

  """Unit of measurement"""
  unit: UnitType!
}

"""Measuring something"""
input MeasureDataInput {
  """Qty"""
  quantity: BigDecimal!

  """Unit of measurement"""
  unit: UnitType
}

"""Menu object"""
type Menu {
  """menu id"""
  id: UUID!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  createdDate: Instant!

  """menu name"""
  name: String!

  """organization to which the menu belongs"""
  organization: Organization!

  """store to which the menu belongs"""
  storeId: UUID!

  """sort number"""
  position: Int

  """menu type"""
  type: MenuType

  """menu sections that current menu has inside"""
  menuSections: [MenuSection!]

  """amoumt of all menu items in all menu sections"""
  menuItemsAmount: Long @deprecated(reason: "use countOfItems")

  """Total number of sections in menu"""
  countOfSections: MenuItemsAmount!

  """Number of subsections in menu"""
  countOfSubSections: MenuItemsAmount!

  """amoumt of all menu items in all menu sections"""
  countOfItems: MenuItemsAmount!
  countOfTerminals: Long!
  countOfStores: Long!

  """Online menu for this pos menu"""
  onlineMenu: OnlineMenu
}

"""Menu input"""
input MenuCreateInput {
  """menu name"""
  name: String!

  """sort number"""
  position: Int

  """store id that menu belongs to"""
  storeId: UUID!

  """menu type"""
  type: MenuType!
}

input MenuDuplicateInput {
  menuIdToDuplicate: UUID!
  storeIds: [UUID!]!
}

union MenuElement = MenuSection | MenuItem

"""Menu elements filter"""
input MenuElementFilterInput {
  types: [MenuElementType!]

  """Filter by ids"""
  ids: [UUID!]

  """Filter by menu ids"""
  menuIds: [UUID!]

  """Filter by section ids"""
  sectionIds: [UUID!]

  """Filter by stockunit ids"""
  stockUnitIds: [UUID!]

  """Name substring"""
  name: String

  """Filter by active prop"""
  active: Boolean

  """Depth level"""
  depthLevel: [Int]
}

type MenuElementsPage implements Page {
  """The total amount of available items"""
  total: Int!

  """The number of items on that page"""
  pageSize: Int!

  """Current page number"""
  pageNumber: Int!

  """Count of available pages"""
  totalPages: Int!

  """Menu elements"""
  content: [MenuElement]!
}

enum MenuElementType {
  SECTION
  ITEM
}

input MenuFilterInput {
  search: String
}

"""Menu item object"""
type MenuItem {
  """menu item id"""
  id: UUID!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  createdDate: Instant!

  """menu section id"""
  menuSectionId: UUID

  """menu item name"""
  name: String!

  """menu item sort number"""
  position: Int @deprecated(reason: "use orderPosition instead")

  """is menu item active"""
  active: Boolean!

  """stock unit of menu item"""
  stockUnit: StockUnit

  """menu item images"""
  images: [Image]
  orderPosition: Float

  """Online menu section for this pos menu item"""
  onlineMenuItem: OnlineMenuItem

  """Sale price"""
  salePrice: AmountData! @deprecated(reason: "sale price may be null if stock unit not exist for this item. use itemSalePrice")

  """Sale price"""
  itemSalePrice: AmountData
}

type MenuItemCreatedDto {
  """Created menu item"""
  menuItem: MenuItem!
}

type MenuItemDeletedDto {
  """Deleted menu item ID"""
  menuItemId: UUID!
}

"""Menu item input"""
input MenuItemInput {
  """menu item id"""
  id: UUID

  """menu item name"""
  name: String!

  """sort number"""
  position: Int

  """is menu item active"""
  active: Boolean

  """menu section id that current menu item belongs to"""
  sectionId: UUID

  """menu id that current menu item belongs to"""
  menuId: UUID!

  """stock unit id that current menu item belongs to"""
  stockUnitId: UUID!

  """Image id"""
  imageIds: [UUID!]

  """Sale price"""
  salePrice: AmountDataInput
}

input MenuItemPositionUpdateInput {
  beforeId: UUID
  targetId: UUID!
  afterId: UUID
}

type MenuItemResult implements RequestResult {
  transactionId: UUID
  output: MenuItem

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

type MenuItemsAmount {
  total: Long!
  inactive: Long!
}

"""Abstract menu item event to subscribe to"""
union MenuItemSubscriptionDto = MenuItemCreatedDto | MenuItemUpdatedDto | MenuItemDeletedDto

type MenuItemUpdatedDto {
  """Updated menu item"""
  menuItem: MenuItem!
}

type MenuPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Menu!]!
}

"""Menu section object"""
type MenuSection {
  """menu section id"""
  id: UUID!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  createdDate: Instant!
  position: Int @deprecated(reason: "use orderPosition instead")

  """menu id"""
  menuId: UUID

  """parent menu section id"""
  parentSectionId: UUID

  """menu section name"""
  name: String!

  """is menu section active"""
  active: Boolean!

  """is menu section parent"""
  isParent: Boolean

  """labels of menu section"""
  labels: [String!]

  """depth level, if 0 then parent menu section"""
  depthLevel: Long

  """left margin in the sections nested set"""
  leftMargin: Int

  """right margin in the sections nested sets"""
  rightMargin: Int

  """color code of menu section"""
  colorCode: String @deprecated(reason: "use colorSection")

  """colorSection enum"""
  colorSection: ColorSection

  """nested menu sections"""
  menuSections: [MenuSection!]

  """menu items of current menu section"""
  menuItems: [MenuItem!]
  countOfSections: MenuItemsAmount!
  countOfItems: MenuItemsAmount!
  orderPosition: Float

  """Online menu section for this pos menu section"""
  onlineMenuSection: OnlineMenuSection
  image: Image
}

"""menu section color"""
type MenuSectionColor {
  """color code (e.g. `#FFAF8E`)"""
  code: String!

  """color name"""
  name: String
}

type MenuSectionCreatedDto {
  """Created menu section"""
  menuSection: MenuSection!
}

"""Menu section input"""
input MenuSectionCreateInput {
  """menu section name"""
  name: String!

  """menu that menu section belongs to"""
  menuId: UUID!

  """parent menu section id"""
  parentSectionId: UUID

  """sort number"""
  position: Int

  """color code (e.g. `#FFAF8E`)"""
  colorCode: String
  active: Boolean!
  imageId: UUID
}

type MenuSectionDeletedDto {
  """Deleted menu section ID"""
  menuSectionId: UUID!

  """Menu ID of deleted section"""
  menuId: UUID!
}

input MenuSectionPatchUpdateInput {
  """menu section id"""
  id: UUID!

  """menu section name"""
  name: String

  """menu that menu section belongs to"""
  menuId: UUID

  """parent menu section id"""
  parentSectionId: UUID

  """colorSection enum"""
  colorSection: ColorSection
  active: Boolean
  imageId: UUID
}

input MenuSectionPositionUpdateInput {
  beforeId: UUID
  targetId: UUID!
  afterId: UUID
}

type MenuSectionResult implements RequestResult {
  transactionId: UUID
  output: MenuSection

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

union MenuSectionSubscriptionDto = MenuSectionCreatedDto | MenuSectionUpdatedDto | MenuSectionDeletedDto

type MenuSectionUpdatedDto {
  """Updated menu section"""
  menuSection: MenuSection!
}

input MenuSectionUpdateInput {
  """menu section id"""
  id: UUID!

  """menu section name"""
  name: String!

  """menu that menu section belongs to"""
  menuId: UUID!

  """parent menu section id"""
  parentSectionId: UUID

  """sort number"""
  position: Int

  """color code (e.g. `#FFAF8E`)"""
  colorCode: String

  """colorSection enum"""
  colorSection: ColorSection
  active: Boolean!
  imageId: UUID
}

input MenuStructureInput {
  """allCatalog is true if you need to move the all catalog"""
  allCatalog: Boolean!

  """
  useStruct is true if you need to move the catalog elements by structure, if
  false that move only skus without category structure
  """
  useStruct: Boolean!

  """selected/excluded category IDs from the catalog"""
  categorySelection: MenuStructureSelectionInput!

  """selected/excluded SKU IDs from the catalog"""
  itemSelection: MenuStructureSelectionInput!
}

type MenuStructureResult implements RequestResult {
  transactionId: UUID
  output: Menu

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

input MenuStructureSelectionInput {
  """selected list of IDs from the catalog"""
  selected: [UUID!]!

  """excluded list of IDs from the catalog"""
  excluded: [UUID!]!
}

"""Menu type"""
enum MenuType {
  DEFAULT
  ONLINE
  DELIVERY
}

input MenuUpdateInput {
  """menu id"""
  id: UUID!

  """menu name"""
  name: String!

  """sort number"""
  position: Int

  """store id that menu belongs to"""
  storeId: UUID!

  """menu type"""
  type: MenuType!
}

union Modifier = TextModifier | StockUnitModifier

enum ModifierEntityType {
  PRODUCT
  SECTION
}

type ModifierGroup {
  id: UUID!
  name: String!
  minValue: Int!
  maxValue: Int!
  required: Boolean!
  sort: Int!
  depthLevel: Int!
  entityType: ModifierEntityType!
  entityId: UUID!
  entityName: String!
  type: ModifierType!
  active: Boolean!
  modifiers: [Modifier!]!
  stockUnitIds: [UUID!]!
}

input ModifierGroupFilterInput {
  text: String
  type: ModifierType
  productIds: [UUID!]
}

input ModifierGroupInput {
  id: UUID!
  name: String!
  minValue: Int!
  maxValue: Int!
  required: Boolean!
  sort: Int!
  type: ModifierType!
}

type ModifierGroupOutput {
  id: UUID!
  name: String
  minValue: Int
  maxValue: Int
  required: Boolean
  sort: Int
  type: ModifierType
  active: Boolean
  modifiers(pageRequest: PageRequestInput): ModifierPage!
  products(pageRequest: PageRequestInput): ProductPage!
}

type ModifierGroupOutputPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [ModifierGroupOutput!]!
}

type ModifierGroupPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [ModifierGroup!]!
}

type ModifierGroupResult implements RequestResult {
  transactionId: UUID
  output: ModifierGroupOutput

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

input ModifierGroupSortInput {
  id: UUID!
  sort: Int!
}

type ModifierPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Modifier!]!
}

input ModifierSortInput {
  id: UUID!
  sort: Int!
}

type ModifiersReport {
  stockUnitId: UUID!
  productName: String!
  productType: ProductType!

  """categories chain: child category first"""
  categories: [CategorySnapshot!]
  sales: BigDecimal!
  revenue: BigDecimal!
  prime: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
}

input ModifiersReportInput {
  stockUnitId: UUID!
  search: String
  storeIds: [UUID!]
  dateRange: DateRangeInput!
  sectionIds: [UUID!]
}

type ModifiersReportOutput {
  total: ModifiersReportTotal!
  rows(pageRequest: PageRequestInput): ModifiersReportPage!
}

type ModifiersReportPage {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [ModifiersReport!]!
}

type ModifiersReportTimeSeries {
  timestamp: Instant!
  revenue: BigDecimal!
  prime: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
}

type ModifiersReportTimeSeriesOutput {
  elements: [ModifiersReportTimeSeries!]!
}

type ModifiersReportTotal {
  revenue: BigDecimal!
  prime: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
}

enum ModifierType {
  STOCK_UNIT_MODIFIER
  TEXT_MODIFIER
}

type MonetizationOrder {
  id: UUID!
  organizationId: UUID!
  accountingPeriod: DateRange
  items: [MonetizationOrderItem!]
  amount: AmountData
  discount: AmountData
  totalAmount: AmountData
}

type MonetizationOrderItem {
  id: UUID!
  name: String
  description: String
  price: AmountData
  amount: AmountData
  quantity: Int
}

type MonetizationOrderResult implements RequestResult {
  transactionId: UUID
  output: MonetizationOrder

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

input MostPopularCategoriesWidgetInput {
  storeIds: [UUID!]
  dateRange: DateRangeInput!
}

type MostPopularCategoriesWidgetOutput {
  elements: [MostPopularCategory!]!
}

type MostPopularCategory {
  id: UUID!
  name: String!
  quantity: BigDecimal!
  revenue: BigDecimal!
  profit: BigDecimal!
}

type MostPopularProduct {
  id: UUID!
  name: String!
  quantity: BigDecimal!
  unitType: UnitType!
  revenue: BigDecimal!
  profit: BigDecimal!
}

input MostPopularProductsWidgetInput {
  storeIds: [UUID!]
  dateRange: DateRangeInput!
}

type MostPopularProductsWidgetOutput {
  elements: [MostPopularProduct!]!
}

"""Move document data"""
type MoveDocument {
  """Moving document ID"""
  id: UUID

  """Organization that created the document"""
  organization: Organization

  """Moved items"""
  documentItems: [DocumentItem!]

  """Total document item's amount"""
  totalAmount: BigDecimal!

  """Number"""
  docNumber: Long

  """Execution date"""
  date: Instant

  """Creation date"""
  creationDate: Instant

  """Type"""
  typeDocument: TypeDocument

  """Status"""
  status: StatusDocument

  """Description"""
  description: String

  """Source warehouse of moving"""
  from: Warehouse

  """Target warehouse of moving"""
  to: Warehouse
}

"""Move document data"""
input MoveDocumentCreateInput {
  """Description"""
  description: String

  """Date of moving"""
  date: Instant

  """ID of source warehouse from which items were moved"""
  fromWarehouseId: UUID!

  """ID of target warehouse to which items were moved"""
  toWarehouseId: UUID!

  """Moved items"""
  documentItems: [DocumentItemInput!]
}

type MoveDocumentPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [MoveDocument!]!
}

type MoveDocumentResult implements RequestResult {
  transactionId: UUID
  output: MoveDocument

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

"""Move document data"""
input MoveDocumentUpdateInput {
  """Move document ID"""
  id: UUID!

  """Description"""
  description: String

  """Date of moving"""
  date: Instant

  """ID of source warehouse from which items were moved"""
  fromWarehouseId: UUID!

  """ID of target warehouse to which items were moved"""
  toWarehouseId: UUID!

  """Moved items"""
  documentItems: [DocumentItemInput!]
}

type Mutation {
  fixStockUnitPrimePriceInAnalytics(stockUnitId: UUID!, dateFrom: LocalDateTime!, dateTo: LocalDateTime!, newPrimePrice: BigDecimal!): Void
  updateCachedCategories(orgId: UUID!): [CachedCategory!]
  updateCachedCategoriesAndProducts(orgId: UUID!): [CachedCategory!]

  """create catalog"""
  createCatalogV2(catalog: CatalogCreateInput!): CatalogResult

  """update catalog"""
  updateCatalogV2(catalog: CatalogUpdateInput!): CatalogResult

  """create catalog section"""
  createCatalogSectionV2(catalogSection: CatalogSectionCreateInputV2!): CatalogSectionResult

  """update catalog section"""
  updateCatalogSectionV2(catalogSection: CatalogSectionUpdateInputV2!): CatalogSectionResult

  """move catalog section"""
  moveSection(targetSectionId: UUID!, newSectionId: UUID): CatalogSectionResult

  """create product"""
  createProductV2(product: ProductCreateInput!): ProductResult

  """update product"""
  updateProductV2(product: ProductUpdateInput!): ProductResult
  updateProductV3(product: ProductPatchUpdateInput!): ProductResult

  """move product"""
  moveProduct(targetProductId: UUID!, newSectionId: UUID): ProductResult

  """duplicate product"""
  duplicateProduct(productId: UUID!): ProductResult

  """create catalog"""
  createCatalog(catalog: CatalogCreateInput!): UUID! @deprecated(reason: "use createCatalogV2")

  """update catalog"""
  updateCatalog(catalog: CatalogUpdateInput!): Void @deprecated(reason: "use updateCatalogV2")

  """delete catalog with sections, products and stockUnits"""
  deleteCatalog(
    """Catalog ID"""
    id: UUID!
  ): MutationResult

  """create section"""
  createCatalogSection(section: CatalogSectionCreateInput!): UUID! @deprecated(reason: "use createCatalogSectionV2")

  """update section"""
  updateCatalogSection(section: CatalogSectionUpdateInput!): Void @deprecated(reason: "use updateCatalogSectionV2")
  createModifierGroup(entityId: UUID!, entityType: ModifierEntityType!, sort: Int): MutationResult! @deprecated(reason: "use modifierGroupCreate")
  updateModifierGroup(modifierGroup: ModifierGroupInput!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  updateModifierGroupType(modifierGroupId: UUID!, type: ModifierType!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  deleteModifierGroup(modifierGroupId: UUID!): MutationResult!
  disableModifierGroup(modifierGroupId: UUID!, entityId: UUID!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  enableModifierGroup(modifierGroupId: UUID!, entityId: UUID!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  addStockUnitModifier(modifierGroupId: UUID!, modifier: StockUnitModifierInput!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  addTextModifier(modifierGroupId: UUID!, modifier: TextModifierInput!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  addStockUnitModifiers(modifierGroupId: UUID!, modifiers: [StockUnitModifierInput!]!): MutationResultMultiple! @deprecated(reason: "use modifierGroupUpdate")
  addTextModifiers(modifierGroupId: UUID!, modifiers: [TextModifierInput!]!): MutationResultMultiple! @deprecated(reason: "use modifierGroupUpdate")
  updateStockUnitModifier(modifierGroupId: UUID!, modifier: StockUnitModifierUpdateInput!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  updateTextModifier(modifierGroupId: UUID!, modifier: TextModifierUpdateInput!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  pinModifier(modifierGroupId: UUID!, modifierId: UUID!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  unpinModifier(modifierGroupId: UUID!, modifierId: UUID!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  removeModifier(modifierGroupId: UUID!, modifierId: UUID!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  updateModifierGroupMinValue(modifierGroupId: UUID!, minValue: Int!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  updateModifierGroupMaxValue(modifierGroupId: UUID!, maxValue: Int!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  sortModifiers(modifierGroupId: UUID!, sortedModifiers: [ModifierSortInput!]!): MutationResult! @deprecated(reason: "use modifierGroupUpdate")
  sortModifierGroups(entityId: UUID!, entityType: ModifierEntityType!, sortedModifierGroups: [ModifierGroupSortInput!]!): MutationResult! @deprecated

  """delete section with subsections? products and stockUnits"""
  deleteCatalogSection(
    """Section ID"""
    id: UUID!
  ): MutationResult!

  """create product and stockUnits with techCard"""
  createProduct(product: ProductCreateInput!): MutationResult!

  """update product and stockUnits with techCard"""
  updateProduct(product: ProductUpdateInput!): MutationResult!

  """delete product, stockUnits and techCards"""
  deleteProduct(
    """Product ID"""
    id: UUID!
  ): MutationResult!
  createTaxProfile(taxProfileCreateInput: TaxProfileCreateInput!): UUID! @deprecated
  updateTaxProfile(taxProfileUpdateInput: TaxProfileUpdateInput!): Void @deprecated
  addBarCodeToStockUnit(stockUnitId: UUID!, barcode: String!): Void @deprecated(reason: "use barcodes in stockUnitInput for create or update stockUnit with barcodes")

  """create a new discount"""
  createDiscount(
    """created discount data"""
    discountCreateInput: DiscountCreateInput!
  ): MutationResult!

  """Update an existing discount"""
  updateDiscount(
    """Updated discount data including its ID"""
    discountUpdateInput: DiscountUpdateInput!
  ): MutationResult!

  """create a new discount"""
  createDiscountV2(
    """created discount data"""
    discountCreateInput: DiscountCreateInputV2!
  ): DiscountResult

  """Update an existing discount"""
  updateDiscountV2(
    """Updated discount data including its ID"""
    discountUpdateInput: DiscountUpdateInputV2!
  ): DiscountResult

  """Delete an existing discount"""
  deleteDiscount(
    """Discount ID"""
    id: UUID!
  ): MutationResult!

  """Delete an existing discount"""
  deleteDiscountV2(
    """Discount ID"""
    id: UUID!
  ): DiscountResult
  createYandexMenuFromMenu(menuId: UUID!): UUID!
  createMenuFromYandexMenu(menuId: UUID!): UUID!

  """
  "
  save mapped menu from Yandex.Eats
  """
  saveMappedYandexEatsMenu(yandexMenuCategories: [YandexMenuCategoryInput!]!, storeId: UUID!, yandexEatsUrl: String!): UUID!

  """get api key for yandex eats"""
  yandexEatsAuthCredentials(storeId: UUID!): DeliveryApiKey!

  """revoke api key"""
  revokeDeliveryApiKey(apiKey: UUID!): Void
  uploadImages(images: [ImageInput!]!): UploadImageResponse!
  updateUIState(key: String!, uiState: String): UiStateResult

  """Mark all goals in group with `groupId` as done"""
  finalizeGoalsByGroupId(
    """ID of group which goals are to be marked as done"""
    groupId: UUID!

    """Optional feedback text to submit on goal group completion"""
    feedbackText: String
  ): Void

  """
  create or update cooking process. If `processCreateInput.id` is null, creates new process, else updates an existing one
  """
  createProcess(
    """created process data"""
    processCreateInput: ProcessCreateInput!
  ): UUID

  """
  create or update cooking process. If `processCreateInput.id` is null, creates new process, else updates an existing one
  """
  updateProcess(
    """updated process data"""
    processUpdateInput: ProcessUpdateInput!
  ): Void

  """Create new kitchen workshop"""
  createKitchenWorkshop(
    """created kitchen workshop data"""
    kitchenWorkshopCreateInput: KitchenWorkshopCreateInput
  ): UUID

  """Update an existing kitchen workshop"""
  updateKitchenWorkshop(
    """Updated kitchen workshop data"""
    kitchenWorkshopUpdateInput: KitchenWorkshopUpdateInput
  ): Void

  """Set specified tech cards to be supported by this kitchen workshop"""
  setTechCardsToKitchenWorkshop(
    """Kitchen workshop ID"""
    kitchenWorkshopId: UUID!

    """
    IDs of tech cards added to this kitchen workshop's supported tech cards list
    """
    techCardList: [UUID!]!
  ): Void
  deleteKitchenWorkshop(id: UUID!): Void

  """Create new dark task"""
  createDarkTask(
    """Created dark task data"""
    darkTaskInput: DarkTaskInput!
  ): MutationResult

  """Update processing status of existing dark task"""
  updateDarkTaskStatus(
    """Dark task ID"""
    darkTaskId: UUID!

    """New processing status for dark task"""
    status: Status!
  ): MutationResult

  """Create new light task"""
  createLightTask(
    """Create light task data"""
    input: LightTaskInput!
  ): UUID!

  """Update processing status of existing light task"""
  updateLightTaskStatus(
    """Light task ID"""
    lightTaskId: UUID!

    """New processing status for light task"""
    status: Status!
  ): Void

  """Delete light task"""
  deleteLightTask(
    """Light task ID"""
    id: UUID!
  ): Void
  saveKKTDocuments(kktDocuments: KKTDocumentsInput!): SaveKKTDocumentsPayload!
  createCustomer(customer: CustomerCreateInput!): CustomerResult
  updateCustomer(customer: CustomerUpdateInput!): CustomerResult
  updateCustomerV2(customer: CustomerUpdateInputV2!): CustomerResult
  deleteCustomer(id: UUID!): CustomerResult
  createCustomerGroup(customerGroup: CustomerGroupCreateInput!): CustomerGroupResult
  updateCustomerGroup(customerGroup: CustomerGroupUpdateInput!): CustomerGroupResult
  deleteCustomerGroup(id: UUID!): CustomerGroupResult
  createCreditLoyalty(creditLoyalty: CreditLoyaltyCreateInput!): CreditLoyaltyResult @deprecated(reason: "use createBonusProgram")
  updateCreditLoyalty(creditLoyalty: CreditLoyaltyUpdateInput!): CreditLoyaltyResult @deprecated(reason: "use updateBonusProgram")
  deleteCreditLoyalty(creditLoyaltyId: UUID!): CreditLoyaltyResult @deprecated(reason: "use deletePromotionProgram")
  createDebitLoyalty(debitLoyalty: DebitLoyaltyCreateInput!): DebitLoyaltyResult @deprecated(reason: "use createBonusProgram")
  updateDebitLoyalty(debitLoyalty: DebitLoyaltyUpdateInput!): DebitLoyaltyResult @deprecated(reason: "use updateBonusProgram")
  deleteDebitLoyalty(debitLoyaltyId: UUID!): DebitLoyaltyResult @deprecated(reason: "use deletePromotionProgram")
  spendLoyaltyPoints(order: UploadOrderInput): LoyaltyPointTransactionResult @deprecated(reason: "use spendPointsForOrder")
  manualModifyLoyaltyPoints(manualLoyaltyPointsModificationInput: ManualLoyaltyPointsModificationInput!): ManualLoyaltyPointsModificationTransactionResult @deprecated(reason: "use manualModifyPoints")
  initAuth(login: String!, type: SignInType): SignInResponseData

  """
  Create sign-in request for two-phase authorization
  Returned value describes identity type (email, phone, etc.) and password-based
  authorization availability for current request
  If SignInType not specified, default type will be 'ERP'
  """
  signIn(login: String!, type: SignInType): SignInResponse! @deprecated(reason: "Mutation is deprecated, use mutation 'signInV2' instead")

  """
  Create sign-in request for two-phase authorization
  Returned value describes identity type (email, phone, etc.) and password-based
  authorization availability for current request
  If SignInType not specified, default type will be 'ERP'
  The return value might be null if the login check fails
  """
  signInV2(login: String!, type: SignInType): SignInResponse

  """Perform second auth phase. Returns JWT pair if success"""
  login(
    """Seccond-phase auth input"""
    login: LoginInput!
  ): String! @deprecated(reason: "Mutation & return value is deprecated, use mutation 'auth' instead")

  """Perform second auth phase. Returns JWT pair if success"""
  auth(
    """Seccond-phase auth input"""
    login: LoginInput!
  ): AuthData!

  """
  Refresh JWT pair, RefreshToken header must be passed in request with actual refresh token;
  """
  refresh: AuthData! @deprecated(reason: "Use refreshTokens")

  """Refresh JWT pair;"""
  refreshTokens(refreshToken: String!): AuthData!

  """Request a token for access to an external device or application"""
  createApplicationToken(posInfo: ApplicationInfoInput!): String!
  createApplicationTokenV2(posInfo: ApplicationInfoInputV2!): String!

  """Claim identity for current account"""
  claimIdentity(
    """Identity value, e.g. EMAIL or PHONE number"""
    value: String!
  ): UUID!

  """
  Send identity confirmation code, returns TemporaryToken ID, which will be required for confirmation
  """
  identityClaimSendConfirmation(identityClaimId: UUID!): UUID!

  """Confirm identity with code"""
  identityClaimConfirm(
    """TemporaryToken ID"""
    temporaryTokenId: UUID!

    """Confirmation code, received by user"""
    code: String!
  ): Void

  """Remove identity claim by ID"""
  identityClaimRemove(
    """IdentityClaim ID"""
    id: UUID!
  ): Void

  """Remove identity by ID"""
  identityRemove(
    """Identity ID"""
    id: UUID!
  ): IdentityRemovedPayload

  """Update account info"""
  updateAccount(
    """Account data"""
    accountInput: AccountInput!
  ): Void

  """Update account password"""
  changeAccountPassword(
    """Change password data"""
    changePasswordInput: ChangePasswordInput!
  ): Void

  """Mark that user passed nomia welcome tutorial"""
  completeOnboarding: Void @deprecated(reason: "Use account update")

  """Demand Reset Password"""
  demandResetPassword(
    """Account login"""
    login: String!
  ): DemandResetPasswordResult

  """Request password recovery"""
  lostPassword(
    """Account login"""
    login: String!
  ): LostPasswordResponse! @deprecated(reason: "use demandResetPassword")
  changeLostPassword(
    """Lost password request ID"""
    requestId: UUID!

    """Confirmation code"""
    code: String!

    """New account password"""
    password: String!
  ): Void
  resetPassword(
    """Lost password request ID"""
    requestId: UUID!

    """Confirmation code"""
    code: String!
  ): ResetPasswordResult

  """Create new organization"""
  createOrganization(
    """Organization data"""
    createOrganizationInput: CreateOrganizationInput!
  ): UUID!

  """Create new organization"""
  createOrganizationV2(
    """Organization data"""
    createOrganizationInput: CreateOrganizationInput!
  ): OrganizationResult

  """Update existing organization"""
  updateOrganization(
    """Organization data"""
    updateOrganizationInput: UpdateOrganizationInput!
  ): Void

  """Update existing organization"""
  updateOrganizationV2(
    """Organization data"""
    updateOrganizationInput: UpdateOrganizationInput!
  ): OrganizationResult

  """Create new employee"""
  createEmployee(
    """Employee data"""
    createEmployeeInput: CreateEmployeeInput!
  ): UUID!

  """Update existing employee"""
  updateEmployee(
    """Employee data"""
    updateEmployeeInput: UpdateEmployeeInput!
  ): Void

  """Remove existing employee"""
  removeEmployee(
    """Employee ID to be removed"""
    employeeId: UUID!
  ): Void

  """Update employee pin code. Generates random employee pin"""
  updateEmployeePinCode(employeeId: UUID!): UpdateEmployeePinCodeResponse!

  """
  Creates invitation. If sendTo specified - sends invitation link to this destination
  """
  inviteEmployee(
    """Employee id"""
    employeeId: UUID!
    sendTo: String
  ): SendEmployeeInviteResponse!

  """Cancel employee invitation"""
  revokeEmployeeInvite(
    """Employee id"""
    employeeId: UUID!
  ): RevokeEmployeeInviteResponse!

  """Accept invitation"""
  acceptEmployeeInvite(
    """Validation token"""
    token: String!
  ): AcceptEmployeeInviteResponse!

  """Create employee invitation"""
  createEmployeeInvitation(
    """Invitation data"""
    createEmployeeInvitationInput: CreateEmployeeInvitationInput!
  ): UUID!

  """
  Updates employee invitation & refreshes confirmation token automatically
  """
  updateEmployeeInvitation(
    """Invitation data"""
    updateEmployeeInvitationInput: UpdateEmployeeInvitationInput!
  ): Void

  """Send employee invitation"""
  sendEmployeeInvitation(
    """Invitation id"""
    employeeInvitationId: UUID!
    sendTo: String!
  ): Void

  """Accept employee invitation"""
  acceptEmployeeInvitation(
    """Employee invitation ID"""
    employeeInvitationId: UUID!

    """Confirmation token"""
    confirmationToken: String!
  ): MutationResult!

  """Create new organization invitation"""
  createOrganizationInvitation(
    """Organization invitation data"""
    createOrganizationInvitationInput: CreateOrganizationInvitationInput!
  ): UUID!

  """Update existing organization invitation"""
  updateOrganizationInvitation(
    """Organization invitation data"""
    updateOrganizationInvitationInput: UpdateOrganizationInvitationInput!
  ): Void

  """Remove existing organization invitation"""
  removeOrganizationInvitation(
    """Organization invitation ID to be removed"""
    organizationInvitationId: UUID!
  ): Void

  """Accept organization invitation"""
  acceptOrganizationInvitation(
    """Organization invitation ID"""
    organizationInvitationId: UUID!

    """Confirmation token"""
    confirmationToken: String!
  ): Void

  """
  Issue new tech support claim; Issue will be created for organization passed in request header. Returns organization Id
  """
  issueTechSupportClaim: UUID! @deprecated(reason: "use issueSupportControlClaim")

  """Confirm tech support claim by password"""
  confirmTechSupportClaim(
    """Issued claim id"""
    claimId: UUID!

    """Password confirmation"""
    password: String!
  ): Void @deprecated(reason: "use confirmSupportControlClaim")

  """Revoke issued tech support claim"""
  revokeTechSupportClaim(claimId: UUID!): Void @deprecated(reason: "use revokeSupportControlClaim")

  """Creating support control claims for organization employees"""
  issueSupportControlClaim(issueClaim: IssueSupportControlClaimInput!): IssueSupportControlClaimResult!

  """Confirm supportControl claim by password."""
  confirmSupportControlClaim(confirmClaim: ConfirmSupportControlClaimInput!): ConfirmSupportControlClaimResult

  """Extend support control claims expiration datetime"""
  extendSupportControlClaim(claimId: UUID!, extendDuration: Int): ExtendSupportControlClaimResult!

  """Revoke issued support control claim"""
  revokeSupportControlClaim(claimId: UUID!): RevokeSupportControlClaimResult!

  """Decline revoked support control claim"""
  declineSupportControlClaim(claimId: UUID!): DeclineSupportControlClaimResult!

  """Change subscriptions to store rates"""
  setStoreSubscriptions(
    storeId: UUID!

    """
    Rate options that will be enabled for the store. All other subscriptions will be disabled
    """
    servicePlanOptionsId: [UUID!]!

    """Redirect URL from paymo wiget from successeful payment"""
    successRedirectUrl: String!

    """Redirect URL from paymo wiget from unsuccesseful payment"""
    failRedirectUrl: String

    """User payment card ID"""
    userCardId: UUID
    bindNewCard: Boolean
  ): PaymoPayment

  """
  Create a payment to link a bank card to a user's account. The card will be linked after payment is made.
  """
  addUserPaymentCard(
    """Redirect URL from paymo wiget from successeful payment"""
    successRedirectUrl: String!

    """Redirect URL from paymo wiget from unsuccesseful payment"""
    failRedirectUrl: String
  ): PaymoPayment!

  """Specify the user's banned card as the default card"""
  setUserPaymentCardAsDefault(cardId: UUID!): MutationResult!

  """Delete the user's bank card"""
  deleteUserPaymentCard(cardId: UUID!): MutationResult!

  """Grant rights for the specified entity for employee"""
  grantEmployeeTargetPermission(
    """ID of employee who is granted rights"""
    employeeId: UUID!

    """ID of entity"""
    entityId: UUID!

    """Scope of entity"""
    scope: Scope!

    """Action allowed to perform on entity"""
    action: Action!
  ): Void

  """Revoke rights for the specified entity for employee"""
  revokeEmployeeTargetPermission(
    """ID of employee who is revoked rights"""
    employeeId: UUID!

    """ID of entity"""
    entityId: UUID!

    """Scope of entity"""
    scope: Scope!

    """Action disallowed to perform on entity"""
    action: Action!
  ): Void
  markNotificationAsShown(notificationId: UUID!): Void
  readNotification(notificationId: UUID!): Void
  unreadNotification(notificationId: UUID!): Void
  hideNotification(notificationId: UUID!): Void

  """Hides all notifications which aren't already hidden"""
  hideAllNotifications: Void

  """Reads all notifications which aren't already read"""
  readAllNotifications: Void

  """Create store"""
  createStore(storeCreateInput: StoreCreateInput!): UUID! @deprecated(reason: "Use createStoreV2")

  """full patch update store"""
  updateStore(input: StoreUpdateInput!): StoreResult

  """Update store information"""
  updateStoreInfo(storeInfoUpdateInput: StoreInfoUpdateInput!): Void @deprecated(reason: "Use updateStore")

  """Update store requisites"""
  updateStoreRequisites(storeRequisitesUpdateInput: StoreRequisitesUpdateInput!): Void @deprecated(reason: "Use updateStore")

  """Delete store"""
  deleteStore(storeId: UUID!): Void
  createStoreV2(storeCreateInput: StoreCreateInput!): StoreResult

  """Update store information"""
  updateStoreInfoV2(storeInfoUpdateInput: StoreInfoUpdateInput!): StoreResult @deprecated(reason: "Use updateStore")
  updateStoreInfoV3(storeInfoUpdateInput: StoreInfoUpdateInputV3!): StoreResult @deprecated(reason: "Use updateStore")

  """Update store requisites"""
  updateStoreRequisitesV2(storeRequisitesUpdateInput: StoreRequisitesUpdateInput!): StoreResult @deprecated(reason: "Use updateStore")

  """Delete store"""
  deleteStoreV2(storeId: UUID!): StoreResult

  """Create a ghost store"""
  createStoreGhost(parentStoreId: UUID!): UUID!

  """Refresh store ghost"""
  updateStoreGhost(storeGhostUpdateInput: StoreGhostUpdateInput!): Void

  """Remove ghost store"""
  deleteStoreGhost(storeGhostId: UUID!): Void

  """Create a payment system for the store"""
  createPaySystem(paySystemCreateInput: PaySystemCreateInput!, storeId: UUID!): UUID! @deprecated(reason: "Use createPaymentSystem")
  createPaymentSystem(paymentSystemCreateInput: PaymentSystemCreateInput!): PaymentSystemResult!

  """Update payment system"""
  updatePaySystem(paySystemUpdateInput: PaySystemUpdateInput!, storeId: UUID!): Void @deprecated(reason: "Use updatePaymentSystem")

  """Patch Update payment system"""
  updatePaymentSystem(input: PaymentSystemUpdateInput!): PaymentSystemResult

  """Delete payment system"""
  deletePaySystem(paySystemId: UUID!, storeId: UUID!): Void @deprecated(reason: "Use deletePaymentSystem")

  """Delete payment system"""
  deletePaymentSystem(id: UUID!): PaymentSystemResult
  bindPaySystem(paySystemId: UUID!, storeId: UUID!): Void

  """Save/update terminal"""
  saveTerminalData(terminalInput: TerminalInputData!): TerminalSaveResult!

  """Save terminal last order sequence number"""
  saveTerminalOrderSequence(fingerprint: String, storeId: UUID!, orderSequence: Long!): TerminalSaveOrderSequenceResult!

  """Delete terminal"""
  deleteTerminal(terminalId: UUID!): Void

  """Terminal save/update, returns NEW or EXISTING terminal ID"""
  saveTerminal(terminalInput: TerminalInput!): UUID! @deprecated(reason: "Use saveTerminalData & saveTerminalOrderSequence")

  """
  Terminal acquiring request, registering NEW binding between teminal and store
  ID, or obtaining already bound, returns NEW or EXISTING terminal ID
  """
  acquireTerminal(
    """
    Terminal hardware or software fingerprint, can be used later to receive same terminal instance.
    """
    fingerprint: String!

    """Store ID terminal linking with"""
    storeId: UUID!
  ): TerminalAcquiringInfo! @deprecated(reason: "Use saveTerminalData & saveTerminalOrderSequence")

  """Create a terminal for the store"""
  createTerminal(terminalCreateInput: TerminalCreateInput!): UUID! @deprecated(reason: "Use saveTerminalData & saveTerminalOrderSequence")

  """Update terminal"""
  updateTerminal(terminalUpdateInput: TerminalUpdateInput!): Void @deprecated(reason: "Use saveTerminalData & saveTerminalOrderSequence")
  uploadOrders(orderPackInput: [OrderPackInput!]!): Void @deprecated(reason: "Use uploadOrdersV2")

  """Upload orders"""
  uploadOrdersV2(input: UploadOrdersInput!): Void

  """Create order"""
  createOrder(orderCreateInput: OrderCreateInput!, orderPayments: [OrderPaymentInput!]): MutationResult!

  """Confirm order. The order will sent to the kitchen."""
  approveOrder(
    orderId: UUID!

    """Mapping order items to kitchen workshops"""
    orderItemsMap: [OrderItemsToKitchenInput!]
  ): Void
  setOrderReady(orderId: UUID!): Void

  """
  Assign a courier to the order. The order will wait until the courier arrives and picks up the order.
  """
  setOrderWaitingCourier(orderId: UUID!): Void

  """
  Receive the order by the courier. The courier with the order will be on the way to the client.
  """
  pickupOrder(orderId: UUID!): Void

  """The courier has reached the client's address and is waiting for him"""
  setOrderWaitingGuest(orderId: UUID!): Void

  """Deliver the order. The order has been delivered to the client"""
  deliverOrder(orderId: UUID!): Void

  """Cancel order"""
  cancelOrder(orderId: UUID!, reason: String): Void
  refundOrder(orderId: UUID!): Void

  """Create payment by order"""
  createOrderPayment(orderPayment: OrderPaymentInput!): UUID!

  """Pay a payment by order"""
  payOrderPayment(orderPaymentId: UUID!): Void
  refundOrderPayment(orderPaymentId: UUID!): Void
  changeTerminalsForOrders(terminalFromId: UUID!, terminalToId: UUID!): Void
  createBonusProgram(program: BonusProgramCreateInput!): BonusProgramResult
  updateBonusProgram(program: BonusProgramUpdateInput!): BonusProgramResult
  createDiscountProgram(program: DiscountProgramCreateInput!): DiscountProgramResult
  updateDiscountProgram(program: DiscountProgramPatchUpdateRequest!): DiscountProgramResult
  deletePromotionProgram(id: UUID): PromotionProgramResult
  spendPointsForOrder(input: SpendOrderPointsInput!): PointsForOrder
  manualModifyPoints(input: ManualModifyPointsInput!): Void
  modifierGroupCreate(modifierGroup: CreateModifierGroupInput!): ModifierGroupResult!
  modifierGroupUpdate(modifierGroup: UpdateModifierGroupInput!): ModifierGroupResult!
  modifierGroupAttachProducts(modifierGroupId: UUID!, productIds: [UUID!]!): ModifierGroupResult!
  modifierGroupDetachProducts(modifierGroupId: UUID!, productIds: [UUID!]!): ModifierGroupResult!
  addModifiers(modifierGroupId: UUID!, modifiers: [CreateModifierInput!]!): ModifierGroupResult!
  updateModifier(modifierGroupId: UUID!, modifierId: UUID!, name: String, pinned: Boolean, sort: Int): ModifierGroupResult!
  removeModifiers(modifierGroupId: UUID!, modifierIds: [UUID!]!): ModifierGroupResult!
  createMenuStructure(menu: MenuCreateInput!, struct: MenuStructureInput!): MenuStructureResult
  addMenuStructure(
    menuId: UUID!
    struct: MenuStructureInput!

    """category of the menu to which you want to add structure"""
    categoryId: UUID
  ): MenuStructureResult

  """create new menu"""
  createMenu(menuCreateInput: MenuCreateInput!): UUID! @deprecated(reason: "use createMenuStructure")

  """update menu by id"""
  updateMenu(menuUpdateInput: MenuUpdateInput!): Void @deprecated(reason: "use addMenuStructure")

  """delete menu by id"""
  deleteMenu(id: UUID!): MutationResult!

  """duplicate menu for multiple store ids"""
  duplicateMenu(menuDuplicateInput: MenuDuplicateInput): DuplicateMenuResponse!

  """
  create new menu section. Could be new parent menu section or new nested menu section
  """
  createMenuSection(menuSectionCreateInput: MenuSectionCreateInput!): MutationResult! @deprecated(reason: "use createMenuSectionV2")

  """
  create new menu section with SectionColor. Could be new parent menu section or new nested menu section
  """
  createMenuSectionV2(menuSectionCreateInput: MenuSectionCreateInput!): MenuSectionResult

  """update menu section"""
  updateMenuSection(menuSectionUpdateInput: MenuSectionUpdateInput!): MutationResult! @deprecated(reason: "use updateMenuSectionV2")

  """update menu section with ColorSection"""
  updateMenuSectionV2(menuSectionUpdateInput: MenuSectionUpdateInput!): MenuSectionResult
  updateMenuSectionV2Patch(menuSectionUpdateInput: MenuSectionPatchUpdateInput!): MenuSectionResult

  """update menu sections list"""
  updateMenuSectionsList(menuSectionsUpdateInputList: [MenuSectionUpdateInput]!): [MutationResult!]!

  """delete menu section"""
  deleteMenuSection(id: UUID!): MutationResult!

  """create new menu item. Needed existing menu section and stock unit"""
  createMenuItem(menuItem: MenuItemInput!): UUID!

  """create multiple menu items at once"""
  createMenuItemsList(menuItems: [MenuItemInput!]!): [MutationResult!]!

  """update multiple menu items at once"""
  updateMenuItemsList(menuItems: [MenuItemInput!]!): [MutationResult!]!

  """update menu item"""
  updateMenuItem(menuItem: MenuItemInput!): Void

  """delete menu item"""
  deleteMenuItem(id: UUID!): Void

  """deactivate menu item"""
  deactivateMenuItem(id: UUID!): Void

  """deactivate menu items"""
  deactivateMenuItems(id: [UUID!]!): Void

  """activate menu item"""
  activateMenuItem(id: UUID!): Void

  """activate menu items"""
  activateMenuItems(id: [UUID!]!): Void
  changeMenuSectionPosition(positionUpdate: MenuSectionPositionUpdateInput!): MenuSectionResult!
  changeMenuItemPosition(positionUpdate: MenuItemPositionUpdateInput!): MenuItemResult!

  """Change online menu active state"""
  onlineMenuSetActiveState(input: OnlineMenuSetActiveStateInput!): OnlineMenuSetActiveStateResponse!

  """Set online menu section image"""
  onlineMenuSectionSetImage(input: OnlineMenuSectionSetImageInput!): OnlineMenuSectionSetImageResponse!

  """Set online menu item image"""
  onlineMenuItemSetImage(input: OnlineMenuItemSetImageInput!): OnlineMenuItemSetImageResponse!
  saveStoreReceiptSettings(settings: SaveStoreReceiptSettingsInput!): SaveStoreReceiptSettingsResult
  orderServicePlan(servicePlanId: UUID!): MonetizationOrderResult
  orderRecurringBill(billId: UUID!): MonetizationOrderResult
  orderAddon(addonRequests: [OrderAddonInput!]!): MonetizationOrderResult
  payOrder(orderId: UUID!): PaymentInfoResult
  manualChangeServicePlan(servicePlanId: UUID!): SubscriberResult
  manualAddAddons(addonRequests: [AddAddonInput!]!): SubscriberResult
  cancelAddons(addonRequests: [CancelAddonInput!]!): SubscriberResult
  createSubscribers: Void
  removeDevice(deviceId: UUID!): Void

  """Save table bookings"""
  saveTableBookings(inputs: [SaveTableBookingInput!]!): [SaveTableBookingResult]
  saveStoreTableGroups(storeTableGroupsInput: StoreTableGroupsInput!): SaveStoreTableGroupsResult

  """create warehouse."""
  createWarehouse(
    """created warehouse data"""
    warehouseCreateInput: WarehouseCreateInput!
  ): UUID

  """create warehouseV2"""
  createWarehouseV2(input: WarehouseCreateInputV2!): WarehouseResult

  """update warehouse."""
  updateWarehouse(
    """updated warehouse data"""
    warehouseUpdateInput: WarehouseUpdateInput!
  ): Void
  updateWarehouseV2(input: WarehouseUpdateInputV2): WarehouseResult

  """Delete an existing warehouse"""
  deleteWarehouse(
    """Warehouse ID"""
    warehouseId: UUID!
  ): UUID

  """create supplier"""
  createSupplier(
    """created supplier data"""
    supplierCreateInput: SupplierCreateInput!
  ): UUID

  """create supplier with response as SupplierResult"""
  createSupplierV2(input: SupplierCreateInput!): SupplierResult!

  """update supplier"""
  updateSupplier(
    """updated supplier data"""
    supplierUpdateInput: SupplierUpdateInput!
  ): Void

  """update supplier with response as SupplierResult"""
  updateSupplierV2(input: SupplierUpdateInputV2!): SupplierResult!

  """Delete an existing supplier"""
  deleteSupplier(
    """Supplier ID"""
    supplierId: UUID!
  ): UUID

  """create arrival document."""
  createArrivalDocument(
    """Arrival document data"""
    arrivalDocumentCreateInput: ArrivalDocumentCreateInput!
  ): MutationResult

  """duplicate existing arrival document"""
  duplicateArrivalDocument(documentId: UUID!): ArrivalDocumentResult

  """update arrival document."""
  updateArrivalDocument(
    """Arrival document data"""
    arrivalDocumentUpdateInput: ArrivalDocumentUpdateInput!
  ): MutationResult

  """Delete an existing arrival document"""
  deleteArrivalDocument(
    """Arrival document ID"""
    arrivalDocumentId: UUID!
  ): MutationResult!

  """Confirm an existing arrival document"""
  confirmArrivalDocument(
    """Arrival document ID"""
    arrivalDocumentId: UUID!
    warehouseId: UUID!
  ): MutationResult!

  """Reject an existing arrival document"""
  rejectArrivalDocument(
    """Arrival document ID"""
    arrivalDocumentId: UUID!
  ): MutationResult!

  """create  inventory document."""
  createInventoryDocument(
    """created inventory document data"""
    inventoryDocumentCreateInput: InventoryDocumentCreateInput!
  ): MutationResult

  """update inventory document."""
  updateInventoryDocument(
    """updated inventory document data"""
    inventoryDocumentUpdateInput: InventoryDocumentUpdateInput!
  ): MutationResult

  """Delete an existing inventory document"""
  deleteInventoryDocument(
    """Inventory document id"""
    inventoryDocumentId: UUID!
  ): MutationResult!

  """Confirm an existing inventory document"""
  confirmInventoryDocument(
    """Inventory document id"""
    inventoryDocumentId: UUID!
    warehouseId: UUID!
  ): MutationResult!

  """Reject an existing inventory document"""
  rejectInventoryDocument(
    """Inventory document id"""
    inventoryDocumentId: UUID!
  ): MutationResult!

  """duplicate existing inventory document"""
  duplicateInventoryDocument(documentId: UUID!): InventoryDocumentResult

  """create leaving document."""
  createLeavingDocument(
    """created LeavingDocument data"""
    leavingDocumentCreateInput: LeavingDocumentCreateInput!
  ): MutationResult

  """update leaving document."""
  updateLeavingDocument(
    """updated LeavingDocument data"""
    leavingDocumentUpdateInput: LeavingDocumentUpdateInput!
  ): MutationResult

  """Delete an existing leaving document"""
  deleteLeavingDocument(
    """Leaving document id"""
    leavingDocumentId: UUID!
  ): MutationResult!

  """Confirm an existing leaving document"""
  confirmLeavingDocument(
    """Leaving document id"""
    leavingDocumentId: UUID!
    warehouseId: UUID!
  ): MutationResult!

  """Reject an existing leaving document"""
  rejectLeavingDocument(
    """Leaving document id"""
    leavingDocumentId: UUID!
  ): MutationResult!

  """duplicate existing leaving document"""
  duplicateLeavingDocument(documentId: UUID!): LeavingDocumentResult

  """create move document."""
  createMoveDocument(
    """created MoveDocument data"""
    moveDocumentCreateInput: MoveDocumentCreateInput!
  ): MutationResult

  """update move document."""
  updateMoveDocument(
    """updated MoveDocument data"""
    moveDocumentUpdateInput: MoveDocumentUpdateInput!
  ): MutationResult

  """Delete an existing move document"""
  deleteMoveDocument(
    """Move document id"""
    moveDocumentId: UUID!
  ): MutationResult!

  """Confirm an existing move document"""
  confirmMoveDocument(
    """Move document id"""
    moveDocumentId: UUID!
    fromWarehouseId: UUID!
    toWarehouseId: UUID!
  ): MutationResult! @deprecated(reason: "use confirmMoveDocumentV2")

  """Confirm an existing move document"""
  confirmMoveDocumentV2(
    """Move document id"""
    moveDocumentId: UUID!
  ): MoveDocumentResult!

  """Reject an existing move document"""
  rejectMoveDocument(
    """Move document id"""
    moveDocumentId: UUID!
  ): MutationResult!

  """duplicate existing move document"""
  duplicateMoveDocument(documentId: UUID!): MoveDocumentResult

  """create  return document."""
  createReturnDocument(
    """created ReturnDocument data"""
    returnDocumentCreateInput: ReturnDocumentCreateInput!
  ): MutationResult

  """update return document."""
  updateReturnDocument(
    """updated ReturnDocument data"""
    returnDocumentUpdateInput: ReturnDocumentUpdateInput!
  ): MutationResult

  """Delete an existing return document"""
  deleteReturnDocument(
    """Return document id"""
    returnDocumentId: UUID!
  ): MutationResult!

  """Confirm an existing return document"""
  confirmReturnDocument(
    """Return document id"""
    returnDocumentId: UUID!
    warehouseId: UUID!
  ): MutationResult!

  """Reject an existing return document"""
  rejectReturnDocument(
    """Return document id"""
    returnDocumentId: UUID!
  ): MutationResult!
}

"""Result of a transactional mutation"""
type MutationResult {
  """ID of the mutated entity"""
  entityId: UUID!

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

type MutationResultMultiple {
  transactionId: UUID!
  entityIds: [UUID]!

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

union Notification = SuccessfulPaymentNotification | UnsuccessfulPaymentNotification | PaymentCardNotBoundNotification | XlsReportCreationStartedNotification | XlsReportGeneratedNotification | SubscriptionsDueToExpireNotification | PaymentInvoiceCreatedNotification | SubscriptionsCancellationNotification

union NotificationAction = GraphQLNotificationAction | URLNotificationAction

"""Button that appears on notification"""
type NotificationButton {
  """Label to show on button"""
  label: String!

  """Flag whether this button should be highlighted"""
  isHighlighted: Boolean!

  """Optional action performed on clicking the button"""
  action: NotificationAction
}

enum NotificationType {
  SUCCESS
  WARNING @deprecated(reason: "Use INFORMATION")
  INFORMATION
  ALERT
  SYSTEM @deprecated(reason: "Use DEFAULT")
  DEFAULT
}

type Ofd {
  name: String
  vatin: String
  host: String
  port: Int
  dns: String
}

input OfdInput {
  name: String
  vatin: String
  host: String
  port: Int
  dns: String
}

type OfdTicket {
  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime
  fiscalSign: String
}

input OfdTicketInput {
  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime
  fiscalSign: String
}

"""
Online menu. This is partially public api, so only limited data is present.
"""
type OnlineMenu {
  id: UUID!
  shortId: String!
  active: Boolean
  name: String!
  storeInfo: OnlineMenuStoreInfo!
  sections: [OnlineMenuSection!]!
  orderDiscounts: [DiscountV2!]!
}

"""Online menu item"""
type OnlineMenuItem {
  menuItemId: UUID!
  imageId: UUID
  imageUrl: String
  name: String!
  position: Long!
  price: AmountData!
  discount: OnlineMenuItemDiscount
}

"""Discount information for an item"""
type OnlineMenuItemDiscount {
  discountAmount: AmountData!
  discountedPrice: AmountData!
}

input OnlineMenuItemSetImageInput {
  """POS menu item id"""
  menuItemId: UUID!

  """Image id"""
  imageId: UUID
}

type OnlineMenuItemSetImageResponse {
  imageId: UUID
}

"""Online menu section"""
type OnlineMenuSection {
  menuSectionId: UUID!
  imageId: UUID
  imageUrl: String
  name: String!
  position: Long!
  sections: [OnlineMenuSection!]!
  items: [OnlineMenuItem!]!
  itemsCount: Long!
}

input OnlineMenuSectionSetImageInput {
  """POS menu section id"""
  menuSectionId: UUID!

  """Image id"""
  imageId: UUID
}

type OnlineMenuSectionSetImageResponse {
  imageId: UUID
}

input OnlineMenuSetActiveStateInput {
  """POS menu id"""
  menuId: UUID!

  """Enabled / disabled"""
  active: Boolean!
}

type OnlineMenuSetActiveStateResponse {
  onlineMenu: OnlineMenu!
}

"""Online menu store representation"""
type OnlineMenuStoreInfo {
  name: String!
  address: String
}

type Operator {
  name: String
  vatin: String
}

input OperatorInput {
  name: String
  vatin: String
}

"""Order"""
type Order {
  """Id of the order"""
  id: UUID!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  createdDate: Instant!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  lastModifiedDate: Instant
  terminal: Terminal
  salePrice: AmountData @deprecated(reason: "unused")
  amount: AmountData!

  """Total amount of the discount"""
  discountAmount: AmountData

  """Total amount of the discount by item discounts"""
  itemDiscount: AmountData

  """Total amount of the discount by order discounts"""
  orderDiscount: AmountData

  """The total cost of the order"""
  totalAmount: AmountData!

  """List of order items"""
  items: [OrderItem!]!

  """Order status"""
  status: OrderStatus! @deprecated(reason: "user orderStatus")
  orderStatus: OrderState

  """Order type"""
  type: OrderType!

  """Delivery data"""
  deliveryInfo: DeliveryInfo

  """Payments on demand"""
  payments: [OrderPayment!]

  """Date of last payment. Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  dateLastPayedDate: Instant

  """Date of last payment. Format yyyy-MM-dd HH:mm:ss"""
  zonedDateLastPayedDate: LocalDateTime

  """Shift id"""
  shiftId: UUID

  """Order number"""
  orderNumber: String!

  """Comment"""
  comment: String

  """Sign of a paid order"""
  payed: Boolean!

  """Sign of a closed order"""
  canceled: Boolean!

  """refunded"""
  refunded: Boolean

  """Reason of cancelation"""
  reasonCanceled: String
  labels: [OrderLabel]
  owner: SnapshotOrderEmployee
  discounts: [AppliedOrderDiscount!]
  loyaltyPoints: LoyaltyPoints
  customer: CustomerSnapshot
  store: Store
  fiscalStatus: FiscalStatus
  shiftNumber: Int
}

input OrderAddonInput {
  addonId: UUID!
  quantity: Int!
}

type OrderByPointTransaction {
  id: UUID!
  orderNumber: String!
  amount: BigDecimal!
}

"""Order created event"""
type OrderCreatedEvent {
  """Created order"""
  order: Order!
}

"""Order"""
input OrderCreateInput {
  """Id of the order"""
  id: UUID

  """List of order items"""
  items: [OrderItemInput!]!

  """Id store"""
  storeId: UUID!

  """Order type"""
  type: OrderType!

  """Delivery data"""
  deliveryInfo: DeliveryInfoInput

  """Shift id"""
  shiftId: UUID

  """Terminal id"""
  terminalId: UUID

  """Id of the guest who created the order"""
  guestId: UUID

  """Comment"""
  comment: String

  """Id of the employee who created / confirmed the order"""
  employeeId: UUID

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  dateLastPayedDate: Instant

  """!!! @deprecated unused"""
  totalAmount: AmountDataInput

  """!!! @deprecated unused"""
  discountAmount: AmountDataInput
  orderNumber: String
  fiscalStatus: FiscalStatus
  shiftNumber: Int
}

"""Order deleted event"""
type OrderDeletedEvent {
  """Deleted order ID"""
  orderId: UUID!
}

"""Abstract order event to subscribe to"""
union OrderEvent = OrderCreatedEvent | OrderUpdatedEvent | OrderDeletedEvent

"""Order filter"""
input OrderFilterInput {
  """Id of the order"""
  orderId: UUID

  """Id of the terminal, on which the order was created"""
  terminalId: UUID

  """Order status"""
  status: OrderStatus

  """Id of the shift in which the order was created"""
  shiftId: UUID

  """Id of the employee who created / confirmed the order"""
  employeeId: UUID

  """Id of the store on which the order was created"""
  storeId: UUID

  """
  Start of a period (yyyy-MM-dd)
  !!! @deprecated use dateRange
  """
  dateFrom: LocalDate

  """
  End of a period (yyyy-MM-dd)
  !!! @deprecated use dateRange
  """
  dateTo: LocalDate

  """lastModifiedDate range"""
  dateRange: DateRangeInput
}

"""Order action history entry"""
input OrderHistoryEntryInput {
  """Action timestamp"""
  timestamp: Instant!

  """Action caused by terminal with ID"""
  terminalId: UUID!

  """Action description. Not blank"""
  action: String!
}

"""Item by order"""
type OrderItem {
  """Id of position"""
  id: UUID!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  createdDate: Instant!

  """Id stock unit"""
  stockUnitId: UUID!
  images: [Image!]
  techCardId: UUID

  """Product name by position"""
  name: String!

  """Position status"""
  status: OrderItemStatus!

  """Course of serving the position to the guest"""
  course: Int

  """Additional comment"""
  comment: String

  """Number of products"""
  quantity: MeasureData!

  """
  The number of the guest to whom the product (s) will be served by position
  """
  guest: Int

  """
  The numbers of the guests to whom the product (s) will be served by position
  """
  guestsNumbers: [Int!] @deprecated(reason: "use guest")

  """Market value of a position"""
  salePrice: AmountData!

  """Purchase value of position"""
  primePrice: AmountData!

  """Discount amount"""
  discountAmount: AmountData!
  amount: AmountData!
  total: OrderItemTotalAmount!
  totalAmount: AmountData @deprecated(reason: "unused")

  """Discounts applied to the item"""
  appliedDiscounts: [AppliedDiscount!]

  """Kitchen Workshops from tech card"""
  kitchenWorkshopsId: [UUID!]
  vatType: VatType
  barcode: String
  sno: Sno
  positionTypeCode: PositionTypeCode
  weighable: Boolean
  appliedModifiers: [AppliedModifier!]!
}

"""Item by order"""
input OrderItemInput {
  """Id of position"""
  id: UUID

  """Id stock unit"""
  stockUnitId: UUID!

  """Number of products. The unit is taken from the stock unit"""
  quantity: MeasureDataInput!

  """
  The number of the guest to whom the product (s) will be served by position
  """
  guest: Int

  """
  The numbers of the guests to whom the product (s) will be served by position
  !!! @deprecated use guest
  """
  guestsNumbers: [Int!]

  """Status of product (s) by item"""
  status: OrderItemStatus

  """Course of serving the position to the guest"""
  course: Int

  """Additional comment"""
  comment: String
  salePrice: AmountDataInput!
  primePrice: AmountDataInput
  amount: AmountDataInput!
  discountAmount: AmountDataInput!

  """
  Discounts applied to the order
  !!! @deprecated use appliedDiscountIds
  """
  appliedDiscounts: [AppliedDiscountInput!]!

  """IDs of discounts applied to the order"""
  appliedDiscountIds: [UUID!]
  barcode: String
  appliedModifiers: [AppliedModifierInput!]
}

input OrderItemPackCreateInput {
  """Id of position"""
  id: UUID!

  """Id stock unit"""
  stockUnitId: UUID!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  createdDate: Instant!
  salePrice: AmountDataInput!
  primePrice: AmountDataInput
  amount: AmountDataInput!
  discountAmount: AmountDataInput!
  vatType: VatType
  positionTypeCode: PositionTypeCode
  name: String!

  """Number of products. The unit is taken from the stock unit"""
  quantity: MeasureDataInput!

  """
  The number of the guest to whom the product (s) will be served by position
  """
  guest: Int

  """
  The numbers of the guests to whom the product (s) will be served by position
  !!! @deprecated use guest
  """
  guestsNumbers: [Int!]

  """Status of product (s) by item"""
  status: OrderItemStatus!

  """Course of serving the position to the guest"""
  course: Int

  """Additional comment"""
  comment: String

  """Discounts applied to the order"""
  appliedDiscounts: [AppliedDiscountInput!]

  """
  IDs of discounts applied to the order
  @deprecated (reason: "use appliedDiscounts")
  """
  appliedDiscountIds: [UUID!]
  barcode: String

  """Taxation system"""
  sno: Sno

  """Is it possible to weigh the product"""
  weighable: Boolean
  modifiers: [AppliedModifierInput!]
}

enum OrderItemStatus {
  NEW
  IN_KITCHEN
  READY
  SUBMITTED
  CANCELLED
}

input OrderItemsToKitchenInput {
  kitchenWorkShopId: UUID!
  techCardsId: [UUID!]!
}

type OrderItemTotalAmount {
  amount: AmountData!
  discount: AmountData!
  result: AmountData!
}

type OrderLabel {
  key: String!
  value: String!
}

input OrderLabelInput {
  key: String!
  value: String!
}

"""Order"""
input OrderPackCreateInput {
  """Id of the order"""
  id: UUID!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  createdDate: Instant!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  lastModifiedDate: Instant
  status: OrderStatus!

  """List of order items"""
  items: [OrderItemPackCreateInput!]!

  """Id store"""
  storeId: UUID!

  """Order type"""
  type: OrderType!

  """Delivery data"""
  deliveryInfo: DeliveryInfoInput

  """Shift id"""
  shiftId: UUID

  """Terminal id"""
  terminalId: UUID!

  """Id of the guest who created the order"""
  guestId: UUID

  """Comment"""
  comment: String

  """Id of the employee who created / confirmed the order"""
  employeeId: UUID

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  dateLastPayedDate: Instant

  """!!! @deprecated unused"""
  totalAmount: AmountDataInput

  """!!! @deprecated unused"""
  discountAmount: AmountDataInput
  orderNumber: String!

  """Sign of a paid order"""
  payed: Boolean!

  """Sign of a closed order"""
  canceled: Boolean!
  labels: [OrderLabelInput!]!
  fiscalStatus: FiscalStatus
  shiftNumber: Int
}

input OrderPackInput {
  order: OrderPackCreateInput!
  orderPayments: [OrderPackPaymentInput!]
}

"""Payment by order"""
input OrderPackPaymentInput {
  id: UUID!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  createdDate: Instant!

  """Amount of payment"""
  amount: PaymentAmountDataInput!

  """Id of the payment system used to create the payment"""
  paySystemId: UUID!
  status: PaymentStatus!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  payedDate: Instant

  """Pay system name"""
  paySystemName: String

  """Pay system type"""
  paySystemType: PaySystemType

  """Pay system icon"""
  paySystemIcon: PaySystemIcon
}

type OrderPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Order!]!
}

"""Payment by order"""
type OrderPayment {
  id: UUID!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  createdDate: Instant

  """Amount of payment"""
  amount: AmountData!

  """Payment status"""
  status: PaymentStatus!

  """Payment system by which the payment was created"""
  paySystem: PaySystem!

  """
  Time when the payment was paid
  Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'
  """
  payedDate: Instant
}

"""Payment by order"""
input OrderPaymentInput {
  id: UUID

  """ID of order, if it already exists"""
  orderId: UUID

  """Amount of payment"""
  amount: PaymentAmountDataInput!

  """Id of the payment system used to create the payment"""
  paySystemId: UUID!
  status: PaymentStatus

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  payedDate: Instant
}

input OrderPaymentPaySystemInput {
  id: UUID!

  """Name"""
  name: String!

  """Type"""
  type: PaySystemType!

  """Icon, if present"""
  icon: PaySystemIcon
}

type OrdersReport {
  orderId: UUID!
  orderNumber: String!
  date: Instant!
  itemsCount: Int
  guestsCount: Int
  paySystemNames: String
  currency: String
  orderAmount: BigDecimal!
  paymentsAmount: BigDecimal!
  taxAmount: BigDecimal!
  incomeAmount: BigDecimal!
  fiscalStatus: FiscalStatus
  status: OrderState
  shift: Int
  storeId: UUID
  storeName: String
  type: OrderType
}

input OrdersReportInput {
  search: String
  storeIds: [UUID!]
  dateRange: DateRangeInput!
  statuses: [OrderState]
  paySystemIds: [UUID!]
  shiftIds: [UUID!]
  shiftNumbers: [Int!]
}

type OrdersReportOutput {
  total: OrdersReportTotal!
  rows(pageRequest: PageRequestInput, sort: [OrdersReportSort!]): OrdersReportPage!
}

type OrdersReportPage {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [OrdersReport!]!
}

input OrdersReportSort {
  field: OrdersReportSortField
  direction: SortDirection
}

enum OrdersReportSortField {
  ORDER_NUMBER
  DATE
  ITEMS_COUNT
  GUESTS_COUNT
  PAY_SYSTEM_NAMES
  CURRENCY
  ORDER_AMOUNT
  PAYMENTS_AMOUNT
  TAX_AMOUNT
  INCOME_AMOUNT
  FISCAL_STATUS
  STATUS
  SHIFT
}

type OrdersReportTimeSeries {
  timestamp: Instant!
  revenue: BigDecimal!
  profit: BigDecimal!
  itemsCount: Int!
  guestsCount: Int!
  ordersCount: Int!
  tax: BigDecimal!
  averageCheck: BigDecimal!
}

type OrdersReportTimeSeriesOutput {
  elements: [OrdersReportTimeSeries!]!
}

type OrdersReportTotal {
  itemsCount: Int!
  guestsCount: Int!
  ordersAmount: BigDecimal!
  paymentsAmount: BigDecimal!
  taxAmount: BigDecimal!
  incomeAmount: BigDecimal!
  ordersCount: Int!
}

"""Order stage"""
type OrderStage {
  """Stage id"""
  id: UUID!

  """Stage name"""
  name: Stage!

  """Stage start time. Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  startAt: Instant!

  """Stage end time. Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  endOf: Instant

  """
  Duration of stage. ISO 8601 format: P (n) Y (n) M (n) DT (n) H (n) M (n) S
  """
  duration: String!
}

enum OrderState {
  NEW
  CLOSED
  CANCELED
  REFUNDED
}

enum OrderStatus {
  NEW
  CLOSED
}

enum OrderType {
  HERE
  DELIVERY
  TAKEAWAY
}

type OrderTypeSpecificGravity {
  name: String!
  profit: BigDecimal!
  profitPercentOutOfTotal: Int!
  revenue: BigDecimal!
  revenuePercentOutOfTotal: Int!
  averageCheck: BigDecimal!
  averageCheckPercentOutOfTotal: Int!
  totalGuests: BigDecimal!
  totalGuestsPercentOutOfTotal: Int!
  totalChecks: BigDecimal!
  totalChecksPercentOutOfTotal: Int!
}

input OrderTypeWidgetInput {
  storeIds: [UUID!]
  dateRange: DateRangeInput!
}

type OrderTypeWidgetOutput {
  elements: [OrderTypeSpecificGravity!]!
}

"""Order updated event"""
type OrderUpdatedEvent {
  """Updated order"""
  order: Order!
}

type OrderWidget {
  orderCount: Int!
  itemsCount: Int!
  orderAmount: BigDecimal!
  averageCheck: BigDecimal!
  revenue: BigDecimal!
}

input OrderWidgetInput {
  storeIds: [UUID!]
  customerId: UUID
  dateRange: DateRangeInput!
}

type OrderWidgetOutput {
  widget: OrderWidget!
}

"""Organization"""
type Organization {
  """Organization ID"""
  id: UUID!

  """Describes organization accessibility"""
  active: Boolean

  """Organization name"""
  name: String

  """IDs of employees of this organization"""
  employeeIds: [UUID!]
  shortOrgId: String
  settings: OrganizationSettings
}

input OrganizationFilterInput {
  search: String
}

"""Bulk invitation"""
type OrganizationInvitation {
  """Invitation ID"""
  id: UUID!

  """Organization-employer"""
  organization: Organization!

  """Simple invitation name"""
  name: String!

  """Describes invitation accessibility"""
  active: Boolean!

  """Confirmation token for this invitation"""
  confirmationToken: String!
}

type OrganizationPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Organization!]!
}

type OrganizationPaymentsExistOutput {
  hasPayments: Boolean!
}

type OrganizationResult implements RequestResult {
  transactionId: UUID
  output: Organization

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

"""Counterapty"""
type OrganizationSearchDTO {
  """Counterapty short name"""
  shortName: String

  """Counterapty inn"""
  inn: String

  """Counterapty kpp"""
  kpp: String

  """Counterapty owner"""
  owner: String

  """Counterapty physical address"""
  physicalAddress: String
  registrationDate: LocalDate
  ogrn: String
  okpo: String
}

"""List of counterparties belongs request"""
type OrganizationSearchResponse {
  organizationSearchDTOList: [OrganizationSearchDTO]!
}

type OrganizationSettings {
  currencyUnit: String!
  currency: Currency
  timezone: String
}

"""
Get all information for provided organizationId. Which warehouses, catalogs, stores organization has
"""
type Overview {
  """all warehouses"""
  warehouses: [Warehouse!]!

  """all catalogs"""
  catalogs: [Catalog!]!

  """all stores"""
  stores: [Store!]!
  menus: [Menu!]!
}

"""Page with metadata"""
interface Page {
  """The total amount of available items"""
  total: Int!

  """Current page number"""
  pageNumber: Int!

  """The number of items on that page"""
  pageSize: Int!

  """Count of available pages"""
  totalPages: Int!
}

"""Page request without sort"""
input PageableInput {
  page: Int!
  size: Int!
}

"""Page request"""
input PageRequestInput {
  """Page number"""
  page: Int!

  """Page size"""
  size: Int!

  """Sort order"""
  sort: [SortOrderInput!]
}

type Payment {
  type: PaymentType
  sum: BigDecimal
}

input PaymentAmountDataInput {
  """Value of money"""
  amountValue: BigDecimal!

  """Money currency"""
  currencyUnit: String!
}

type PaymentCardNotBoundNotification {
  id: UUID
  message: String
  createdDate: Instant
  type: NotificationType
  buttons: [NotificationButton!]
}

type PaymentInfoResponse {
  paymentId: UUID!
  success: Boolean
  status: String
  errorCode: String
  message: String
  details: String
  paymentUrl: String
}

type PaymentInfoResult implements RequestResult {
  transactionId: UUID
  output: PaymentInfoResponse

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

input PaymentInput {
  type: PaymentType
  sum: BigDecimal
}

type PaymentInvoiceCreatedNotification {
  id: UUID
  message: String
  createdDate: Instant
  type: NotificationType
}

enum PaymentStatus {
  NEW
  PAYED
  CANCELED
  RETURN
}

"""Payment system"""
type PaymentSystem {
  """Payment system id"""
  id: UUID!

  """Payment system type"""
  type: PaySystemType!

  """Payment system name"""
  name: String!

  """Pay system icon type"""
  icon: PaySystemIcon

  """Sign of disconnection of the payment system"""
  active: Boolean!

  """Sequential number of the payment system in the list of payment systems"""
  stores: [Store!]!
  hasStores: Boolean!
}

"""Payment system"""
input PaymentSystemCreateInput {
  """Payment system type"""
  type: PaySystemType!

  """stores to activate"""
  storeIds: [UUID!]

  """Payment system name"""
  name: String!

  """Pay system icon type"""
  icon: PaySystemIcon!
}

type PaymentSystemPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [PaymentSystem!]!
}

type PaymentSystemPercentOutOfTotal {
  id: UUID!
  type: String!
  name: String!
  profit: BigDecimal!
  revenue: BigDecimal!
  revenuePercentOutOfTotal: Float!
  averageCheck: BigDecimal!
  totalGuests: BigDecimal!
  totalGuestsPercentOutOfTotal: Float!
  totalChecks: BigDecimal!
  totalChecksPercentOutOfTotal: Float!
}

type PaymentSystemResult implements RequestResult {
  transactionId: UUID
  output: PaymentSystem

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

input PaymentSystemsFilterInput {
  search: String
  hasStores: Boolean
  storeIds: [UUID!]
}

input PaymentSystemUpdateInput {
  id: UUID!
  name: String
  type: PaySystemType
  active: Boolean
  icon: PaySystemIcon
  addStoreIds: [UUID!]
  removeStoreIds: [UUID!]
}

input PaymentSystemWidgetInput {
  storeIds: [UUID!]
  dateRange: DateRangeInput!
}

type PaymentSystemWidgetOutput {
  elements: [PaymentSystemPercentOutOfTotal!]!
}

enum PaymentType {
  CASH
  ELECTRONICALLY
  PREPAID
  CREDIT
  OTHER
}

"""Invoice for payment in the Paymo system"""
type PaymoPayment {
  """Payment Id"""
  id: UUID!

  """Date of invoice payment. Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  paymentDate: Instant

  """Cost"""
  amount: AmountData!

  """Account status"""
  status: PaymentStatus!

  """Account Description"""
  description: String

  """Account number"""
  paymentNumber: String!

  """
  The time until which the bill can be paid. Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'
  """
  lifeTime: Instant

  """Payment URL"""
  url: String
}

input PaymoPaymentFilterInput {
  """Store id"""
  storeId: UUID!

  """Payment Number"""
  paymentNumber: String

  """PaymentDate range"""
  dateRange: DateRangeInput

  """Payment amount"""
  amount: BigDecimal

  """Payment status"""
  status: PaymentStatus

  """Payment desctiption"""
  description: String
}

type PaymoPaymentPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [PaymoPayment!]!
}

"""Payment system"""
type PaySystem {
  """Payment system id"""
  id: UUID!

  """Date of creation of this payment system"""
  createdDate: Instant! @deprecated(reason: "not used")

  """Payment system type"""
  type: PaySystemType!

  """Payment system name"""
  name: String!
  iconId: UUID @deprecated(reason: "use icon with enum")

  """Pay system icon type"""
  icon: PaySystemIcon

  """Sign of disconnection of the payment system"""
  active: Boolean!

  """Sequential number of the payment system in the list of payment systems"""
  position: Int @deprecated(reason: "PaySystems are sorted within Store")
  stores: [Store!]!
}

"""PaySystemAnalytics"""
type PaySystemAnalytics {
  """PaySystem name"""
  paySystemName: String!

  """Percent out of total from all payed orders"""
  amount: BigDecimal!
}

type PaySystemCreatedEvent {
  paySystem: PaySystem!
}

"""Payment system"""
input PaySystemCreateInput {
  """Payment system type"""
  type: PaySystemType!

  """Payment system name"""
  name: String!

  """Deprecated, use icon"""
  iconId: UUID

  """Pay system icon type"""
  icon: PaySystemIcon

  """Sequential number of the payment system in the list of payment systems"""
  position: Int
  active: Boolean!
}

union PaySystemEvent = PaySystemCreatedEvent | PaySystemUpdatedEvent | PaySystemRemovedEvent

"""Pay system icon type"""
enum PaySystemIcon {
  CASH
  CARD
  RUBLE
  GUEST
  YANDEX_EATS
  DELIVERY_CLUB
}

input PaySystemInput {
  """Payment system ID, if already assigned"""
  id: UUID

  """Payment system type"""
  type: PaySystemType!

  """Payment system name"""
  name: String!

  """Deprecated, use icon"""
  iconId: UUID

  """Pay system icon type"""
  icon: PaySystemIcon

  """Is payment system active"""
  active: Boolean!
}

type PaySystemRemovedEvent {
  paySystemId: UUID!
}

type PaySystemReport {
  paySystemId: UUID!
  paySystemName: String!
  ordersQuantity: Int!
  guestsCount: Int!
  revenue: BigDecimal!
  averageCheck: BigDecimal!
}

input PaySystemReportInput {
  storeIds: [UUID!]
  dateRange: DateRangeInput!
  paySystemIds: [UUID!]
}

type PaySystemReportOutput {
  total: PaySystemReportTotal!
  rows(pageRequest: PageRequestInput, sort: [PaySystemReportSort!]): PaySystemReportPage!
}

type PaySystemReportPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [PaySystemReport!]!
}

input PaySystemReportSort {
  field: PaySystemReportSortField
  direction: SortDirection
}

enum PaySystemReportSortField {
  PAY_SYSTEM_NAME
  ORDERS_QUANTITY
  GUESTS_COUNT
  AVERAGE_CHECK
  REVENUE
}

type PaySystemReportTimeSeries {
  timestamp: Instant!
  ordersCount: Int!
  guestsCount: Int!
  revenue: BigDecimal!
}

type PaySystemReportTimeSeriesOutput {
  elements: [PaySystemReportTimeSeries!]!
}

type PaySystemReportTotal {
  ordersQuantity: Int!
  guestsCount: Int!
  revenue: BigDecimal!
  averageCheck: BigDecimal!
}

enum PaySystemType {
  CASH
  CARD
  VIRTUAL
}

type PaySystemUpdatedEvent {
  paySystem: PaySystem!
}

input PaySystemUpdateInput {
  """Payment system id"""
  id: UUID!

  """Payment system type"""
  type: PaySystemType!

  """Payment system name"""
  name: String

  """Deprecated, use icon"""
  iconId: UUID

  """Pay system icon type"""
  icon: PaySystemIcon

  """Sign of disconnection of the payment system"""
  active: Boolean!

  """Sequential number of the payment system in the list of payment systems"""
  position: Int
}

"""Type of discount activity period"""
enum PeriodType {
  """Discount is active permanently"""
  PERMANENT

  """
  Discount is active for certain period of days (e.g. from February 23rd to March 8th)
  """
  TEMPORARY

  """
  Discount is active in certain hours of some weekdays (e.g. from monday to sunday from 12:00 to 16:00)
  """
  SCHEDULED
}

"""Security permission"""
type Permission {
  """Permissions ID"""
  id: UUID!

  """Permission simple name"""
  name: String

  """Security scope (e.g. **ANALYTICS**)"""
  scope: Scope!

  """Action performed for scope (e.g. **READ** or **WRITE**)"""
  action: Action!
}

type PointPrice {
  points: Int!
  monetary: Int!
}

input PointPriceInput {
  points: Int!
  monetary: Int!
}

type PointsForOrder {
  earn: Int
  spend: Int
}

union PointTransaction = PointTransactionOrder | PointTransactionManual

enum PointTransactionFactCore {
  CREDIT
  DEBIT
}

input PointTransactionFilterInput {
  orderIds: [UUID!]
  customerIds: [UUID!]
  storeIds: [UUID!]
  beginsAt: LocalDate
  endsAt: LocalDate
}

type PointTransactionManual {
  employee: EmployeeByPointTransaction
  dateOfTransaction: Instant
  type: PointTransactionType!
  pointsBeforeTransaction: Int!
  pointsTransaction: Int!
  pointsAfterTransaction: Int!
  customerId: UUID!
  status: StatusPointTransaction!
  comment: String
}

type PointTransactionOrder {
  employee: EmployeeByPointTransaction
  dateOfTransaction: Instant
  type: PointTransactionType!
  pointsBeforeTransaction: Int!
  pointsTransaction: Int!
  pointsAfterTransaction: Int!
  customerId: UUID!
  status: StatusPointTransaction!
  order: OrderByPointTransaction
  storeId: UUID!
  terminalId: UUID
}

type PointTransactionPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [PointTransaction!]!
}

enum PointTransactionType {
  INCREASE_POINTS
  DECREASE_POINTS
}

"""Popular product which most sales quantity for the selected period"""
type PopularProduct {
  """name of the product"""
  name: String!

  """product revenue for the selected period"""
  revenue: BigDecimal!

  """product profit for the selected period"""
  profit: BigDecimal!

  """margin on product sales for the selected period"""
  profitPercent: Int!

  """product sales quantity for the selected period"""
  quantity: BigDecimal!
}

type Position {
  name: String
  price: BigDecimal
  quantity: BigDecimal
  amount: BigDecimal
  tax: TaxType
  code: String
  type: ReceiptPositionType
  unit: PositionUnitType
}

input PositionInput {
  barcode: String
  barcodeType: BarcodeType
  alignment: Aligment
  scale: Int
}

"""Position type with source location"""
type PositionType {
  """Position type code"""
  code: PositionTypeCode

  """Source where position type has been got"""
  entityType: CatalogEntityType

  """Source ID"""
  entityId: UUID
}

"""Тип позиции"""
enum PositionTypeCode {
  """Товар (код 1)"""
  PRODUCT

  """Подакцизный товар (код 2)"""
  EXCISABLE_PRODUCT

  """АТНМ (код 30)"""
  EXCISABLE_PRODUCT_NOT_MARKED

  """АТМ (код 31)"""
  EXCISABLE_PRODUCT_MARKED

  """ТНМ (код 32)"""
  PRODUCT_NOT_MARKED

  """ТМ (код 33)"""
  PRODUCT_MARKED

  """Услуга (код 4)"""
  SERVICE
}

enum PositionUnitType {
  PIECE
  GRAM
  KILOGRAM
  TON
  CENTIMETER
  DECIMETER
  METER
  SQUARE_CENTIMETER
  SQUARE_DECIMETER
  SQUARE_METER
  MILLILITER
  LITER
  CUBIC_METER
  KILOWATT_HOUR
  GIGACALORIE
  DAY
  HOUR
  MINUTE
  SECOND
  KILOBYTE
  MEGABYTE
  GIGABYTE
  TERABYTE
  OTHER
}

"""Cooking process data"""
type Process {
  """Process ID"""
  id: UUID!

  """Name"""
  name: String!

  """Organization which created this process"""
  organization: UUID!
}

"""Cooking process data for standalone saving"""
input ProcessCreateInput {
  """Name"""
  name: String

  """ID of organization which created this process"""
  organizationId: UUID
}

"""Process item data"""
type ProcessItem {
  """Cooking process"""
  process: Process

  """Percent of change in quantity during this process"""
  percent: Int
}

input ProcessUpdateInput {
  """Process ID"""
  id: UUID

  """Name"""
  name: String

  """ID of organization which created this process"""
  organizationId: UUID
}

"""Product output data"""
type Product {
  """Product id"""
  id: UUID!

  """Type of product"""
  type: ProductType

  """Product name"""
  name: String!
  isSemiproduct: Boolean!

  """Catalog which the product belongs to"""
  catalog: Catalog!

  """Section which the product belongs to"""
  section: CatalogSection

  """list of product stockUnits"""
  stockUnits: [StockUnit!]!
  modifierGroups: [ModifierGroup!]! @deprecated

  """
  attachedModifierGroups(text: String, type: ModifierType, pageRequest: PageRequestInput):  ModifierGroupOutputPage
  """
  modifierGroupWhereUsedAsModifier(pageRequest: PageRequestInput): ModifierGroupOutputPage
}

"""Product input data"""
input ProductCreateInput {
  """ID of catalog which the product belongs to"""
  catalogId: UUID!

  """ID of section which the product belongs to"""
  sectionId: UUID

  """Type of product"""
  type: ProductType

  """Product name"""
  name: String!

  """is semi-product"""
  semiproduct: Boolean

  """list of product stockUnits"""
  stockUnits: [StockUnitInput!]!

  """TaxProfile for product"""
  taxProfile: TaxProfileCreateInput

  """Position type for product"""
  positionTypeCode: PositionTypeCode
}

"""Filter object for catalog sections"""
input ProductFilterInput {
  """Catalog ID"""
  catalogId: UUID!

  """
  return products with or without sections. if null return products with and without sections
  """
  isSection: Boolean

  """Section ID List"""
  sectionIds: [UUID!]

  """Section ID"""
  sectionId: UUID

  """Type filter"""
  type: ProductType

  """Filter by modifier group ids"""
  modifierGroupIdsWhereUsedAsModifier: [UUID!]

  """Filter by SKU ids"""
  stockUnitIds: [UUID!]

  """Search substring within section name"""
  search: String
}

"""Page of products"""
type ProductPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Product!]!
}

input ProductPatchUpdateInput {
  """Product id"""
  id: UUID!

  """Type of product"""
  type: ProductType

  """ID of section which the product belongs to"""
  sectionId: UUID

  """Product name"""
  name: String

  """list of product stockUnits"""
  stockUnit: StockUnitPatchUpdateInput

  """StockUnit techCard"""
  techCard: TechCardPatchUpdateInput
}

input ProductReportSort {
  field: ProductReportSortField
  direction: SortDirection
}

enum ProductReportSortField {
  PRODUCT_NAME
  SALES
  REVENUE
  PROFIT
  PRIME
  DISCOUNT
  PRODUCT_TYPE
  UNIT_TYPE
}

type ProductResult implements RequestResult {
  transactionId: UUID
  output: Product

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

type ProductSales {
  profit: BigDecimal!
  revenue: BigDecimal!
  primePrice: BigDecimal!
  sales: Int!
}

type ProductSalesTimeSeries {
  timestamp: Instant!
  revenue: BigDecimal!
  profit: BigDecimal!
  prime: BigDecimal!
  sales: Int!
}

input ProductSalesTimeSeriesInput {
  stockUnitId: UUID!
  storeIds: [UUID!]
  dateRange: DateRangeInput!
}

type ProductSalesTimeSeriesOutput {
  elements: [ProductSalesTimeSeries!]!
}

input ProductSalesWidgetInput {
  stockUnitId: UUID!
  storeIds: [UUID!]
  dateRange: DateRangeInput!
}

type ProductSalesWidgetOutput {
  productSales: ProductSales!
}

"""new filter object for products"""
input ProductsFilterInput {
  catalogId: UUID
  type: ProductType
  types: [ProductType!]
  parentSectionIds: [UUID!]
  search: String
  excludeStockUnitIds: [UUID!]
  excludeIds: [UUID!]
}

type ProductsReport {
  productName: String!
  productId: UUID!
  productType: ProductType!
  stockUnitId: UUID!

  """categories chain: child category first"""
  categories: [CategorySnapshot!]
  sales: BigDecimal!
  unitType: UnitType!
  revenue: BigDecimal!
  prime: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
}

input ProductsReportInput {
  search: String
  storeIds: [UUID!]
  dateRange: DateRangeInput!
  productTypes: [ProductType!]
  sectionIds: [UUID!]
}

type ProductsReportLinkedProducts {
  stockUnitId: UUID!
  productName: String!
  productType: ProductType!

  """categories chain: child category first"""
  categories: [CategorySnapshot!]
  sales: BigDecimal!
  revenue: BigDecimal!
  prime: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
  unitType: UnitType!
}

input ProductsReportLinkedProductsInput {
  stockUnitId: UUID!
  search: String
  storeIds: [UUID!]
  dateRange: DateRangeInput!
  sectionIds: [UUID!]
}

type ProductsReportLinkedProductsOutput {
  total: ProductsReportLinkedProductsTotal!
  rows(pageRequest: PageRequestInput): ProductsReportLinkedProductsPage!
}

type ProductsReportLinkedProductsPage {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [ProductsReportLinkedProducts!]!
}

type ProductsReportLinkedProductsTimeSeries {
  timestamp: Instant!
  revenue: BigDecimal!
  prime: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
}

type ProductsReportLinkedProductsTimeSeriesOutput {
  elements: [ProductsReportLinkedProductsTimeSeries!]!
}

type ProductsReportLinkedProductsTotal {
  revenue: BigDecimal!
  prime: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
}

type ProductsReportOutput {
  total: ProductsReportTotal!
  rows(pageRequest: PageRequestInput, sort: [ProductReportSort!]): ProductsReportPage!
}

type ProductsReportPage {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [ProductsReport!]!
}

type ProductsReportProductModifiers {
  stockUnitId: UUID!
  productName: String!
  productType: ProductType!

  """categories chain: child category first"""
  categories: [CategorySnapshot!]
  sales: BigDecimal!
  revenue: BigDecimal!
  prime: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
  unitType: UnitType!
}

input ProductsReportProductModifiersInput {
  stockUnitId: UUID!
  search: String
  storeIds: [UUID!]
  dateRange: DateRangeInput!
  sectionIds: [UUID!]
}

type ProductsReportProductModifiersOutput {
  total: ProductsReportProductModifiersTotal!
  rows(pageRequest: PageRequestInput): ProductsReportProductModifiersPage!
}

type ProductsReportProductModifiersPage {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [ProductsReportProductModifiers!]!
}

type ProductsReportProductModifiersTimeSeries {
  timestamp: Instant!
  revenue: BigDecimal!
  prime: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
}

type ProductsReportProductModifiersTimeSeriesOutput {
  elements: [ProductsReportProductModifiersTimeSeries!]!
}

type ProductsReportProductModifiersTotal {
  revenue: BigDecimal!
  prime: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
}

type ProductsReportTimeSeries {
  timestamp: Instant!
  revenue: BigDecimal!
  profit: BigDecimal!
  prime: BigDecimal!
  discount: BigDecimal!
}

type ProductsReportTimeSeriesOutput {
  elements: [ProductsReportTimeSeries!]!
}

type ProductsReportTotal {
  sales: Int!
  revenue: BigDecimal!
  prime: BigDecimal!
  discount: BigDecimal!
  profit: BigDecimal!
}

type ProductsWithIngredientsXlsOutput {
  url: String!
}

type ProductsWithoutIngredientsXlsOutput {
  url: String!
}

enum ProductType {
  PRODUCT
  INGREDIENT
  SEMIPRODUCT
  MODIFIER
}

input ProductUpdateInput {
  """Product id"""
  id: UUID!

  """Type of product"""
  type: ProductType

  """ID of catalog which the product belongs to"""
  catalogId: UUID!

  """ID of section which the product belongs to"""
  sectionId: UUID

  """Product name"""
  name: String!

  """is semi-product"""
  semiproduct: Boolean

  """list of product stockUnits"""
  stockUnits: [StockUnitInput!]!

  """TaxProfile for product"""
  taxProfile: TaxProfileCreateInput

  """Position type for product"""
  positionTypeCode: PositionTypeCode
}

type PromotionProgram {
  id: UUID!
  name: String!
  description: String
  imageId: UUID
  beginsAt: LocalDate
  endsAt: LocalDate
  active: Boolean!
  customerGroupIds: Selection!
  storeIds: Selection!
  categoryIds: Selection!
  stockUnitIds: Selection!

  """POS only field for SKU and discount mappings"""
  resultSkuIds: Selection!
  promotionType: PromotionType!
}

input PromotionProgramCreateInput {
  name: String!
  description: String
  imageId: UUID
  beginsAt: LocalDate
  endsAt: LocalDate
  active: Boolean!
  customerGroupIds: SelectionInput!
  storeIds: SelectionInput!
  categoryIds: SelectionInput!
  stockUnitIds: SelectionInput!
}

input PromotionProgramFilterInput {
  ids: [UUID!]
  name: String
  storeIds: [UUID!]
  groupIds: [UUID!]
  promotionType: PromotionType
  active: Boolean
}

type PromotionProgramPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [PromotionProgramsUnion!]!
}

type PromotionProgramResult implements RequestResult {
  transactionId: UUID
  output: PromotionProgram

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

input PromotionProgramSort {
  fieldName: PromotionProgramSortField
  direction: MarketingSortDirection
}

enum PromotionProgramSortField {
  NAME
  PROMOTION_TYPE
  PERIOD
  ACTIVE
}

union PromotionProgramsUnion = BonusProgram | DiscountProgram

input PromotionProgramUpdateInput {
  name: String
  description: String
  imageId: UUID
  beginsAt: LocalDate
  endsAt: LocalDate
  active: Boolean
  customerGroupIds: SelectionInput
  storeIds: SelectionInput
  categoryIds: SelectionInput
  stockUnitIds: SelectionInput
}

enum PromotionType {
  BONUS_INCREASE
  BONUS_DECREASE
  DISCOUNT
}

type Query {
  """Get data for main chart divided by days for the selected period"""
  getChartReport(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): [AnalyticsChartReport]!

  """Get data for main chart divided by hours for the selected period"""
  getChartReportHourly(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): [AnalyticsChartReportHourly]!

  """Get data for main chart divided by months for the selected period"""
  getChartReportMonthly(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): [AnalyticsChartReport]!

  """Get summary data for given period"""
  getChartReportSummary(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): AnalyticsChartReportSummary!

  """Get data divided by hours for the selected period"""
  getSalesByHour(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): [AnalyticsByHour]! @deprecated

  """Get data divided by hours for the selected period"""
  salesByHourWidget(widgetInput: SalesByHourWidgetInput!): SalesByHourWidgetOutput!

  """Get data divided by hours for the selected period"""
  getDiscountSalesByHour(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of discounts to filter"""
    discountIds: [UUID!]
  ): [DiscountAnalyticsByHour]!
  getSalesByWeekDay(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): [AnalyticsByDayOfWeek]! @deprecated

  """Get sales by week day"""
  salesByWeekDayWidget(widgetInput: SalesByWeekDayWidgetInput!): SalesByWeekDayWidgetOutput!

  """
  Get popular products ordered by `quantity` descending for the selected period
  """
  getPopularProducts(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): [PopularProduct]! @deprecated
  getAnalyticsWarehouseItemMoveHistoryByStockUnit(filter: AnalyticsWarehouseItemMoveHistoryFilterInput!, pageRequest: PageRequestInput!): AnalyticsWarehouseItemMoveHistoryPage!
  getAnalyticsWarehouseItemMoveHistoryDetailsByStockUnit(filter: AnalyticsWarehouseItemMoveHistoryDetailsFilterInput!, pageRequest: PageRequestInput): AnalyticsWarehouseItemMoveHistoryDetailsPage!
  getAnalyticsWarehouseItemMoveHistoriesDetails(filter: AnalyticsWarehouseItemMoveHistoriesDetailsFilterInput, pageRequest: PageRequestInput, sort: [GetAnalyticsWarehouseItemMoveHistoriesDetailsSort!]): AnalyticsWarehouseItemMoveHistoriesDetailsPage!

  """
  sort fields: [stockUnit, organization, warehouse, document, date,
  lastArrivalDate, name, quantity, initialQuantity, primePrice, event,
  reasonEvent, supplierId, storeId]
  """
  getWarehouseItemHistoryPageable(filter: WarehouseItemHistoryFilterInput!, pageRequest: PageRequestInput!): WarehouseItemHistoryPage!

  """Warehouse item history from when it has been added to system"""
  getWarehouseItemHistory(
    """which page to show, starts from 0"""
    page: Int!

    """how many items per page"""
    size: Int!

    """warehouse id"""
    warehouseId: UUID

    """sort field"""
    sortField: String

    """sort order (desc, asc)"""
    sortOrder: String

    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate

    """name of a warehouse item to search"""
    search: String
  ): [WarehouseItemHistory]! @deprecated(reason: "use getWarehouseItemHistoryPageable")

  """Written off warehouse item's history"""
  getWarehouseItemsWrittenOffReport(
    """which page to show, starts from 0"""
    page: Int!

    """how many items per page"""
    size: Int!

    """sort order (desc, asc)"""
    sortOrder: String

    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate
    storeId: UUID!

    """name of a warehouse item to search"""
    search: String
  ): [WarehouseItemWrittenOffReport]! @deprecated(reason: "no query handler")

  """All warehouse items history grouped by warehouse"""
  getWarehouseItemsWrittenOffGroupWarehouseReport(
    """which page to show, starts from 0"""
    page: Int!

    """how many items per page"""
    size: Int!

    """sort order (desc, asc)"""
    sortOrder: String

    """start of a period (yyyy-MM-dd'T'hh:mm:ss.ssssssZ)"""
    dateFrom: LocalDate

    """end of a period (yyyy-MM-dd'T'hh:mm:ss.ssssssZ)"""
    dateTo: LocalDate

    """name of a warehouse item to search"""
    search: String
  ): [WarehouseItemWrittenOffReport]! @deprecated(reason: "no handler")

  """Warehouse item history grouped by specific warehouse"""
  getWarehouseItemsWrittenOffReportByWarehouse(
    """which page to show, starts from 0"""
    page: Int!

    """how many items per page"""
    size: Int!

    """warehouse id"""
    warehouseId: UUID!

    """sort order (desc, asc)"""
    sortOrder: String

    """start of a period (yyyy-MM-dd'T'hh:mm:ss.ssssssZ)"""
    dateFrom: LocalDate

    """end of a period (yyyy-MM-dd'T'hh:mm:ss.ssssssZ)"""
    dateTo: LocalDate

    """name of a warehouse item to search"""
    search: String
  ): [WarehouseItemWrittenOffReport]!

  """
  Get popular products (which is also called `ABC report`) ordered by `revenue` descending for the selected period
  """
  abcReportPageable(filter: AbcReportPageableFilterInput!, pageRequest: PageRequestInput!): [ABCReport!]!

  """
  Get popular products (which is also called `ABC report`) ordered by `revenue` descending for the selected period
  """
  getABCReportPageable(
    """which page to show, starts from 0"""
    page: Int!

    """how many items per page"""
    size: Int!

    """sort column"""
    sortField: String

    """sort order (e.g. asc, desc)"""
    sortOrder: String

    """start of a period (yyyy-MM-dd'T'hh:mm:ss.ssssssZ)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd'T'hh:mm:ss.ssssssZ)"""
    dateTo: LocalDate!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): [ABCReport!]! @deprecated(reason: "use abcReportPageable")

  """count all abc reports from selected period, stores and terminals"""
  countAbcReports(
    """start of a period (yyyy-MM-dd'T'hh:mm:ss.ssssssZ)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd'T'hh:mm:ss.ssssssZ)"""
    dateTo: LocalDate!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): Long!
  countWarehouseItemHistory(warehouseId: UUID, dateFrom: LocalDate!, dateTo: LocalDate!, search: String): Long
  countWarehouseItemsWrittenOff(dateFrom: LocalDate!, dateTo: LocalDate!, storeId: UUID!, search: String): Long
  countWrittenOffWarehouseItemsGroupedByWarehouse(dateFrom: LocalDate!, dateTo: LocalDate!, search: String): Long
  countWarehouseItemsWrittenOffReportByWarehouse(warehouseId: UUID!, dateFrom: LocalDate!, dateTo: LocalDate!, search: String): Long

  """
  Get popular products (which is also called `ABC report`) ordered by `revenue` descending for the selected period
  """
  overview: Overview!
  boundOverview(id: UUID!, type: Type!): BoundOverview!

  """Get data for discount chart divided by days for given period"""
  getDiscountChartReport(
    """start date of a period"""
    dateFrom: LocalDate!

    """end date of a period"""
    dateTo: LocalDate!

    """IDs of stores to filter"""
    storeIds: [UUID!]

    """IDs of discounts to filter"""
    discountIds: [UUID!]
  ): [DiscountAnalyticsChartReport]!

  """Get data for discount chart divided by months for given period"""
  getDiscountChartReportMonthly(
    """start date of a period"""
    dateFrom: LocalDate!

    """end date of a period"""
    dateTo: LocalDate!

    """IDs of stores to filter"""
    storeIds: [UUID!]

    """IDs of discounts to filter"""
    discountIds: [UUID!]
  ): [DiscountAnalyticsChartReport]!

  """Get summary of data for given period"""
  getDiscountSummary(
    """start date of a period"""
    dateFrom: LocalDate!

    """end date of a period"""
    dateTo: LocalDate!

    """IDs of stores to filter"""
    storeIds: [UUID!]

    """IDs of discounts to filter"""
    discountIds: [UUID!]
  ): DiscountAnalyticsSummary!

  """Get table view of discount applications"""
  getDiscountTableView(
    """start date of a period"""
    dateFrom: LocalDate!

    """end date of a period"""
    dateTo: LocalDate!

    """ID of applied discount"""
    discountId: UUID!

    """IDs of stores to filter"""
    storeIds: [UUID!]

    """IDs of products to filter"""
    productIds: [UUID!]
  ): [DiscountTableViewRow]

  """Count whether chartReports exists for given list of stores"""
  chartReportsExist(
    """IDs of stores to filter"""
    storeIds: [UUID!]
  ): Boolean!

  """Check whether chartReports exists for given organizationId"""
  chartReportsExistsForOrganization: Boolean!
  abcReportsExist(
    """IDs of stores to filter"""
    storeIds: [UUID!]
  ): Boolean!
  warehouseItemsWrittenOffReportsExist: Boolean!

  """Analytics for paysystems of payed orders"""
  getPaySystemReport(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): [PaySystemAnalytics]!

  """
  Frequently bought together products. Based on given period, storeId and stockUnitId
  """
  frequentlyBoughtTogetherProducts(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """Comparable stockUnitId"""
    stockUnitId: UUID!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): [FrequentlyBoughtTogetherProducts]!

  """Revenue, profit, bought quantity for a singleStockUnit."""
  getChartReportForSingleStockUnit(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """Comparable stockUnitId"""
    stockUnitId: UUID!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): [AnalyticsChartReport]!

  """Revenue, profit, bought quantity for a singleStockUnit."""
  getChartReportForSingleStockUnitHourly(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """Comparable stockUnitId"""
    stockUnitId: UUID!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): [AnalyticsChartReportHourly]!

  """
  Revenue, profit, bought quantity for a singleStockUnit divided by Hour.
  """
  getChartReportForSingleStockUnitSummary(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """Comparable stockUnitId"""
    stockUnitId: UUID!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): AnalyticsChartReportSummary!

  """
  Get data for main chart divided by months for the selected period and specific StockUnit
  """
  getChartReportForSingleStockUnitMonthly(
    """start of a period (yyyy-MM-dd)"""
    dateFrom: LocalDate!

    """end of a period (yyyy-MM-dd)"""
    dateTo: LocalDate!

    """Comparable stockUnitId"""
    stockUnitId: UUID!

    """list of stores to filter"""
    storeIds: [UUID!]

    """list of terminals to filter"""
    terminalIds: [UUID!]
  ): [AnalyticsChartReport]!
  warehouseItemLeftovers(filter: WarehouseItemLeftoverFilterInput, pageRequest: PageRequestInput!, sort: [WarehouseItemLeftoverSort!]): WarehouseItemLeftoverPage!
  hourlyLoyaltyAnalytics(input: ChartInput!): [HourlyLoyaltyAnalytics]
  dailyLoyaltyAnalytics(input: ChartInput!): [DailyLoyaltyAnalytics]
  monthlyLoyaltyAnalytics(input: ChartInput!): [DailyLoyaltyAnalytics]
  loyaltyAnalyticsSummary(input: ChartInput!): LoyaltyAnalyticsSummary
  shiftNumbers(storeIds: [UUID!], pageRequest: PageRequestInput): ShiftNumberPage!
  ordersReport(input: OrdersReportInput!): OrdersReportOutput!
  ordersReportTimeSeries(reportInput: OrdersReportInput!, timeSeriesInput: TimeSeriesInput!): OrdersReportTimeSeriesOutput!
  categoryReport(input: CategoryReportInput!): CategoryReportOutput!
  categoryReportTimeSeries(categoryReportInput: CategoryReportInput!, timeSeriesInput: TimeSeriesInput!): [CategoryReportTimeSeries!]!
  paySystemReportV2(input: PaySystemReportInput!): PaySystemReportOutput
  productsReport(input: ProductsReportInput!): ProductsReportOutput!
  paymentReportTimeSeries(input: PaySystemReportInput!, timeSeriesInput: TimeSeriesInput!): PaySystemReportTimeSeriesOutput!
  productsReportTimeSeries(input: ProductsReportInput!, timeSeriesInput: TimeSeriesInput!): ProductsReportTimeSeriesOutput!
  productsReportProductModifiers(input: ProductsReportProductModifiersInput!): ProductsReportProductModifiersOutput! @deprecated(reason: "use productsReportLinkedProducts")
  productsReportLinkedProducts(input: ProductsReportLinkedProductsInput!): ProductsReportLinkedProductsOutput!
  productsReportProductModifiersTimeSeries(input: ProductsReportProductModifiersInput!, timeSeriesInput: TimeSeriesInput!): ProductsReportProductModifiersTimeSeriesOutput! @deprecated(reason: "use productsReportLinkedProductsTimeSeries")
  productsReportLinkedProductsTimeSeries(input: ProductsReportLinkedProductsInput!, timeSeriesInput: TimeSeriesInput!): ProductsReportLinkedProductsTimeSeriesOutput!
  modifiersReport(input: ModifiersReportInput!): ModifiersReportOutput! @deprecated(reason: "use productsReportLinkedProducts")
  modifiersReportTimeSeries(input: ModifiersReportInput!, timeSeriesInput: TimeSeriesInput!): ModifiersReportTimeSeriesOutput! @deprecated(reason: "use productsReportProductModifiersTimeSeries")
  abcReportV2(input: AbcReportInput!): AbcReportOutput!
  organizationPaymentsExist: OrganizationPaymentsExistOutput!
  consolidatedReport(input: ConsolidatedReportInput!): ConsolidatedReportOutput!
  consolidatedReportTimeSeries(input: ConsolidatedReportInput!, timeSeriesInput: TimeSeriesInput!): ConsolidatedTimeSeriesOutput!
  consolidatedReportXls(input: ConsolidatedReportInput!, sort: [ConsolidatedReportSort!]): ConsolidatedReportXlsOutput!
  mostPopularProductsWidget(input: MostPopularProductsWidgetInput!): MostPopularProductsWidgetOutput!
  mostPopularCategoriesWidget(input: MostPopularCategoriesWidgetInput!): MostPopularCategoriesWidgetOutput!
  salesTodayWidget(widgetInput: SalesTodayWidgetInput!): SalesTodayWidgetOutput!
  productSalesWidget(widgetInput: ProductSalesWidgetInput!): ProductSalesWidgetOutput!
  productSalesTimeSeries(input: ProductSalesTimeSeriesInput!, timeSeriesInput: TimeSeriesInput!): ProductSalesTimeSeriesOutput!
  orderTypeWidget(widgetInput: OrderTypeWidgetInput!): OrderTypeWidgetOutput!
  paymentSystemWidget(widgetInput: PaymentSystemWidgetInput!): PaymentSystemWidgetOutput!
  customerOrders(input: CustomerOrdersInput!, pageRequest: PageRequestInput): CustomerOrdersPage!
  orderWidget(widgetInput: OrderWidgetInput!): OrderWidgetOutput!
  customerForCurrentDayWidget(widgetInput: CustomerForCurrentDayWidgetInput!): CustomerForCurrentDayWidgetOutput!
  tablesReport(input: TablesReportInput): TablesReportResponse!
  cachedCategoriesWithProducts(orgId: UUID!): [CachedCategory!]
  cachedCategories(orgId: UUID!): [CachedCategory!]
  findByBarcode(barcode: String!): [StockUnit]!

  """Get organization catalog (organization id must be passed in headers)"""
  catalogByOrganization: Catalog

  """Get catalog by id"""
  catalog(
    """Catalog ID"""
    id: UUID!
  ): Catalog!

  """Get all catalogs from current organization"""
  allCatalogs: [Catalog!]! @deprecated(reason: "At this moment organization can have only one catalog; use 'catalog' api call")

  """Get catalog section by id"""
  catalogSection(
    """Section ID"""
    id: UUID!
  ): CatalogSection!

  """
  Get page of catalog sections by filter
  sort fields: [name, leftMargin, sort]
  """
  allCatalogSectionsPageable(
    """Filter object"""
    filter: CatalogSectionFilterInput!

    """Page requeset"""
    pageRequest: PageRequestInput!
  ): CatalogSectionPage!

  """Get all sections by catalog id"""
  allCatalogSections(
    """Catalog ID"""
    catalogId: UUID!
  ): [CatalogSection]! @deprecated(reason: "use allCatalogSectionsPageable")

  """Get section children"""
  catalogSectionChildren(
    """Section ID"""
    sectionId: UUID!

    """Number of subsection levels"""
    numberOfLevels: Int
  ): [CatalogSection]!

  """Get section parents"""
  catalogSectionParents(
    """Section ID"""
    sectionId: UUID!
  ): [CatalogSection]!
  catalogSectionParentsByStockUnit(
    """StockUnit ID"""
    stockUnitId: UUID!
  ): [CatalogSection]!

  """Get colors directory"""
  allCatalogSectionColors: [CatalogSectionColor!]!

  """Get random color from colors directory"""
  randomCatalogSectionColor: CatalogSectionColor!

  """Get product by id"""
  product(
    """Product ID"""
    id: UUID!
  ): Product!
  products(filter: ProductsFilterInput, pageRequest: PageRequestInput): ProductPage!
  sections(filter: SectionsFilterInput, pageRequest: PageRequestInput): CatalogSectionPage!
  sectionsByIds(sectionIds: [UUID!]!, pageRequest: PageRequestInput): CatalogSectionPage!

  """
  Get page of products by filter
  sort fields: [name]
  """
  allCatalogProductsPageable(
    """Filter object"""
    filter: ProductFilterInput!

    """Page request"""
    pageRequest: PageRequestInput!
  ): ProductPage!

  """Get products from current organization (from all catalogs)"""
  allProducts: [Product!]! @deprecated(reason: "use allCatalogProductsPageable")
  getWhereUsedPageable(stockUnitId: UUID!, pageRequest: PageRequestInput!): ProductPage!
  countProducts: Long! @deprecated(reason: "use allCatalogProductsPageable")
  allProductsPageable(
    """which page to show, starts from 0"""
    page: Int!

    """how many items per page"""
    size: Int!

    """sort column"""
    sortField: String

    """sort order (e.g. asc, desc)"""
    sortOrder: String
  ): [Product!]! @deprecated(reason: "use allCatalogProductsPageable")

  """
  Returns all catalog elements by filter with parent elements tree
  sort fields: [name]
  """
  allInCatalogPageable(
    """Filter for catalog elements"""
    filter: InCatalogFilterInput!

    """Page request"""
    pageRequest: PageRequestInput
  ): InCatalogPage!

  """
  Returns all catalog products and catalog sections without parent elements tree
  sort fields: [name]
  """
  catalogSearchPageable(
    """Sku name or section name"""
    name: String

    """catalog id to search in"""
    catalogId: UUID!

    """Page request"""
    pageRequest: PageRequestInput
  ): InCatalogPage!
  countProductsBySectionId(
    """Section id"""
    sectionId: UUID
  ): Long! @deprecated(reason: "use allCatalogProductsPageable")
  allProductsBySectionIdPageable(
    """Section id"""
    sectionId: UUID

    """which page to show, starts from 0"""
    page: Int!

    """how many items per page"""
    size: Int!

    """sort column"""
    sortField: String

    """sort order (e.g. asc, desc)"""
    sortOrder: String
  ): [Product!]! @deprecated(reason: "use allCatalogProductsPageable")

  """sort fields: [name, active, catalog, section, createdDate]"""
  productsBySectionIdRecursivePageable(sectionId: UUID!, pageRequest: PageRequestInput!): ProductPage!
  allProductsBySectionIdRecursivePageable(
    """Section id"""
    sectionId: UUID

    """which page to show, starts from 0"""
    page: Int!

    """how many items per page"""
    size: Int!

    """sort column"""
    sortField: String

    """sort order (e.g. asc, desc)"""
    sortOrder: String
  ): [Product!]! @deprecated(reason: "use productsBySectionIdRecursivePageable")
  countProductsByCatalogId(
    """Catalog id"""
    catalogId: UUID
  ): Long! @deprecated(reason: "use allCatalogProductsPageable")

  """sort fields: [name, active, catalog, section, createdDate]"""
  productsByCatalogIdRecursivePageable(catalogId: UUID!, pageRequest: PageRequestInput): ProductPage!
  allProductsByCatalogIdRecursivePageable(
    """catalog id"""
    catalogId: UUID

    """which page to show, starts from 0"""
    page: Int!

    """how many items per page"""
    size: Int!

    """sort column"""
    sortField: String

    """sort order (e.g. asc, desc)"""
    sortOrder: String
  ): [Product!]! @deprecated(reason: "use productsByCatalogIdRecursivePageable")
  countProductsByCatalogIdRecursive(catalogId: UUID): Long! @deprecated(reason: "use productsByCatalogIdRecursivePageable")
  allProductsByCatalogIdPageable(
    """Section id"""
    catalogId: UUID

    """which page to show, starts from 0"""
    page: Int!

    """how many items per page"""
    size: Int!

    """sort column"""
    sortField: String

    """sort order (e.g. asc, desc)"""
    sortOrder: String
  ): [Product!]! @deprecated(reason: "use allCatalogProductsPageable")

  """Get products by catalog id if parent section id is null"""
  allProductsByCatalogId(
    """Catalog ID"""
    catalogId: UUID!
  ): [Product]! @deprecated(reason: "use allCatalogProductsPageable")

  """Get products by catalog id with subsections"""
  allProductsByCatalogIdRecursively(
    """Catalog ID"""
    catalogId: UUID!
  ): [Product]! @deprecated(reason: "use productsByCatalogIdRecursivePageable")

  """Get products by section id (one depth level)"""
  allProductsBySectionId(
    """Section ID"""
    sectionId: UUID!
  ): [Product]! @deprecated(reason: "use allCatalogProductsPageable")

  """Get products by section id with subsections"""
  allProductsBySectionIdRecursively(
    """Section ID"""
    sectionId: UUID!
  ): [Product]! @deprecated(reason: "use productsBySectionIdRecursivePageable")

  """Get discount by ID"""
  getDiscount(
    """Discount ID"""
    id: UUID!
  ): Discount!

  """Get discount by ID"""
  getDiscountV2(
    """Discount ID"""
    id: UUID!
  ): DiscountV2

  """Get all discounts for organization"""
  getDiscounts(
    """Filter for discounts"""
    filter: DiscountFilterInput
  ): [Discount!]! @deprecated(reason: "use getDiscountsV2")

  """Get all discounts for organization"""
  getDiscountsV2(filter: DiscountFilterInputV2, pageRequest: PageRequestInput): DiscountV2Page

  """Get date-time any discount in specified catalog got updated"""
  getDiscountLastUpdated(
    """ID of catalog for which the check is performed"""
    catalogId: UUID!
  ): Instant

  """
  Get date-time any discount in organization got updated.
  If no discounts were ever created for this organization, returns null.
  """
  getDiscountsLastUpdated: Instant

  """Check whether discount is bound to a specified catalog exists"""
  existsDiscountByCatalogId(
    """ID of catalog for which the check is performed"""
    catalogId: UUID!
  ): Boolean!

  """Check whether discount is bound to a specified section exists"""
  existsDiscountBySectionId(
    """ID of section for which the check is performed"""
    sectionId: UUID!
  ): Boolean!

  """Check whether discount is bound to a specified product exists"""
  existsDiscountByProductId(
    """ID of product for which the check is performed"""
    productId: UUID!
  ): Boolean!
  modifierGroup(id: UUID!): ModifierGroup! @deprecated(reason: "use modifierGroupById")
  modifierGroupsByStore(storeId: UUID!, pageRequest: PageRequestInput): ModifierGroupPage! @deprecated(reason: "use modifierGroups")
  modifier(id: UUID!): Modifier! @deprecated(reason: "use modifierGroups")
  modifiersByModifierGroup(modifierGroupId: UUID!): [Modifier]! @deprecated(reason: "use modifierGroups")
  modifiersByIds(ids: [UUID!]!): [Modifier]! @deprecated(reason: "use modifierGroups")
  whereUsedAsModifier(stockUnitId: UUID!, pageRequest: PageRequestInput): ModifierGroupPage! @deprecated(reason: "use modifierGroupWhereUsedAsModifier")
  stockUnits(filter: StockUnitFilterInput, pageRequest: PageRequestInput): StockUnitPage!
  productArrivalsExist(id: UUID): Boolean
  productsWithIngredientsXls: ProductsWithIngredientsXlsOutput!
  productsWithoutIngredientsXls: ProductsWithoutIngredientsXlsOutput!
  getYandexCategories: [String!]!

  """
  "
  get unmapped menu from Yandex.Eats
  """
  getMenuFromYandexEats(yandexEatsUrl: String!): [YandexMenuCategory!]!
  getYandexMenu(storeId: UUID!): YandexMenu

  """get image with all available image sizes by id"""
  imageById(id: UUID!): Image

  """get multiple images with all available image sizes"""
  imagesByIds(id: [UUID!]!): [Image]!

  """get multiple images with urls to each size"""
  imagesWithSize(images: [ImagesSizeInput!]!): AllImageWithSizes!
  generateUUID(count: Int!): [UUID!]!
  getUIState(key: String!): String

  """Get all goals for organization grouped into sections"""
  allGoals: [GoalSection!]!

  """
  sort fields: [accountId organizationId kitchenWorkshopId inWarehouseId
  outWarehouseId storeId employeeId status typeTask createdAt inProgressedAt
  doneAt closedAt canceledAt taskNumber]
  """
  allTasksByFilterPageable(filter: AbstractTaskFilterInput!, pageRequest: PageRequestInput!): TaskPage!
  allTasks(page: Int!, size: Int!, sortField: String, sortOrder: String, kitchenWorkshopId: UUID!, statuses: [Status!], typeTasks: [TypeTask!]): [Task!]! @deprecated(reason: "Use allTasksByFilterPageable")
  countTasks(kitchenWorkshopId: UUID!, statuses: [Status!], typeTasks: [TypeTask!]): Long @deprecated(reason: "Use allTasksByFilterPageable")

  """
  sort fields: [accountId organizationId kitchenWorkshopId inWarehouseId
  outWarehouseId storeId employeeId status typeTask createdAt inProgressedAt
  doneAt closedAt canceledAt taskNumber]
  """
  darkTasksByFilterPageable(filter: DarkTaskFilterInput!, pageRequest: PageRequestInput!): DarkTaskPage!
  allDarkTasks(page: Int!, size: Int!, sortField: String, sortOrder: String, statuses: [Status!]): [DarkTask!]! @deprecated(reason: "Use darkTasksByFilterPageable")
  countDarkTasks(statuses: [Status!]): Long @deprecated(reason: "Use darkTasksByFilterPageable")
  darkTaskById(id: UUID!): DarkTask
  lightTasksByOrderId(orderId: UUID!): [LightTask!]!

  """Get tech card by ID"""
  techCard(
    """Tech card ID"""
    id: UUID!
  ): TechCard!

  """Get tech card by stock unit ID"""
  techCardByStockUnit(
    """Stock unid ID"""
    stockUnitId: UUID!
  ): TechCard!

  """
  allTechCards(first: Int, after: String, orgId: UUID!): TechCardConnection @connection(for: "TechCard")
  techCardsByTechCardItem(page: Int!, size: Int!, sortField: String, sortOrder: String, stockUnitId: UUID!): [TechCard]
  """
  techCardsByTechCardItemStockUnitIds(stockUnitIds: [UUID!]): [TechCard!]

  """Get cooking process by ID"""
  process(
    """Process ID"""
    id: UUID!
  ): Process!

  """Get kitchen workshop by ID"""
  kitchenWorkshop(
    """Kitchen workshop ID"""
    id: UUID!
  ): KitchenWorkshop!

  """
  sort fields: [name, address, storeId, inWarehouseId, outWarehouseId, createdAt]
  """
  allKitchenWorkshopsPageable(pageRequest: PageRequestInput): KitchenWorkshopPage!

  """Get all kitchen workshops for organization"""
  allKitchenWorkshops(
    """Page number"""
    page: Int!

    """Page size"""
    size: Int!

    """Field to sort by"""
    sortField: String

    """Sorting order (asc/desc)"""
    sortOrder: String
  ): [KitchenWorkshop!]! @deprecated(reason: "use allKitchenWorkshopsPageable")

  """Get number of kitchen workshops for organization"""
  countKitchenWorkshops: Long @deprecated(reason: "use allKitchenWorkshopsPageable")
  findKKTDocuments(filter: KKTDocumentFilterInput, pageRequest: PageRequestInput!): KKTDocumentUnionPage!
  customer(customerId: UUID!): Customer
  customers(filter: CustomerFilterInput, pageRequest: PageRequestInput): CustomerPage
  customerGroup(customerGroupId: UUID!): CustomerGroup
  customerGroups(filter: CustomerGroupFilterInput, pageRequest: PageRequestInput, sort: [CustomerGroupsSort!]): CustomerGroupPage
  creditLoyalty(creditLoyaltyId: UUID!): CreditLoyalty @deprecated(reason: "use bonusProgram")
  creditLoyalties(filter: CreditLoyaltyFilterInput, pageRequest: PageRequestInput): CreditLoyaltyPage @deprecated(reason: "use promotionPrograms")
  debitLoyalty(debitLoyaltyId: UUID!): DebitLoyalty @deprecated(reason: "use bonusProgram")
  debitLoyalties(filter: DebitLoyaltyFilterInput, pageRequest: PageRequestInput): DebitLoyaltyPage @deprecated(reason: "use promotionPrograms")
  availableLoyaltyPointsByOrder(order: UploadOrderInput): LoyaltyPoints @deprecated(reason: "use calculatePointsForOrder")
  loyaltyPointTransactions(orderId: UUID!, pageRequest: PageRequestInput): LoyaltyPointTransactionPage! @deprecated(reason: "use orderPointTransactions for correct logic of pointTransactionFact field")
  orderPointTransactions(orderId: UUID!, pageRequest: PageRequestInput): LoyaltyPointTransactionPage! @deprecated(reason: "use pointTransactions")
  availableStoresDebitLoyalty(currentDebitLoyaltyId: UUID): [Store!] @deprecated(reason: "no longer necessary")

  """Get account by ID"""
  account(id: UUID!): Account!

  """Get organization by ID"""
  organization(id: UUID!): Organization!

  """Get all organizations for currently logged account"""
  allOrganizations: [Organization!]! @deprecated(reason: "Use allOrganizationsPageable")

  """Get all organizations for currently logged account"""
  allOrganizationsPageable(pageRequestInput: PageRequestInput!, filter: OrganizationFilterInput): OrganizationPage!
  userGroups: [UserGroup!]!

  """Get employee by ID"""
  employee(id: UUID!): Employee!

  """
  Get current employee. Returns employee, based on account id in authorization token and organization id passed in header
  """
  getCurrentEmployee: Employee!

  """Get employee by account ID and organization ID"""
  employeeByAccountIdAndOrganizationId(accountId: UUID!, organizationId: UUID!): Employee!

  """Get all employees for current application token store"""
  allApplicationUserEmployees: [Employee!]!

  """
  sort fields: [account organization dateOfBirth dateOfEmployment address
  firstName middleName lastName createdDate lastModifiedDate]
  """
  allEmployeesPageable(filter: EmployeeFilterInput!, pageRequest: PageRequestInput!): EmployeePage!

  """Get all employees for current organization"""
  allEmployees(page: Int!, size: Int!, sortField: String, sortOrder: String, nameFilter: String, activeFilter: Boolean): [Employee!]! @deprecated(reason: "use allEmployeesPageable")

  """Get total employee count for current organization"""
  countEmployees(nameFilter: String, activeFilter: Boolean): Long! @deprecated(reason: "use allEmployeesPageable")

  """Get random available pin for employee"""
  employeeGetAvailablePin: String! @deprecated(reason: "will be removed soon. use generateEmployeePinCode")

  """Get employee invitation"""
  getInvitation(inviteId: UUID!): Invitation!

  """Get organization invitation by ID"""
  organizationInvitation(organizationInvitationId: UUID!): OrganizationInvitation!

  """Get all organization invitations"""
  allOrganizationInvitations: [OrganizationInvitation!]!

  """
  For clients side. Get active tech support claims issued for current client
  """
  activeTechSupportClaims: [TechSupportClaim]! @deprecated

  """Get all existing tariffs"""
  allAvailableServicePlans: [ServicePlan!]!

  """Get all subscriptions for the store plan"""
  allSubscriptions(storeId: UUID!): [_Subscription!]!

  """Get an unpaid account for the store"""
  unpaidPaymoPayment(storeId: UUID!): PaymoPayment

  """Get all bank cards linked to the user's account"""
  allUserPaymentCards: [UserPaymentCard!]!

  """
  sort fields: [storeId, lifeTime, paymentDate, amount, status, paymentNumber, createdDate, lastModifiedDate]
  """
  allSubscriptionsPayments(filter: PaymoPaymentFilterInput!, pageRequest: PageRequestInput!): PaymoPaymentPage!

  """Get all payments for tariff subscriptions"""
  allSubscritionsPayments(page: Int!, size: Int!, sortField: String, sortOrder: String, storeId: UUID!): [PaymoPayment!]! @deprecated(reason: "use allSubscriptionsPayments(filter: PaymoPaymentFilterInput!, pageRequest: PageRequestInput!)")
  countOfSubscritionsPayments(storeId: UUID!): Long!

  """Search counterparty by request (e.g. name, inn)"""
  searchOrganizationByRequest(request: String!): OrganizationSearchResponse!
  searchAddressByRequest(request: String!): AddressSearchResponse!
  searchBankByRequest(request: String!): [BankSearchResponse]!
  bankByBic(bic: String!): [BankSearchResponse]!
  activeAccountNotifications: [AccountNotification]!

  """Get available timezones"""
  timezones: TimeZonesResponse!

  """
  Get all the stores for the organization. OrganizationId is taken from the header
  """
  allStores: [Store!]!

  """Get store by Id"""
  store(storeId: UUID!): Store!

  """All Stores pageable"""
  stores(filter: StoreFilterInputV2, pageRequest: PageRequestInput!): StorePage!

  """Get stores by filter"""
  storesByFilter(storeFilter: StoreFilterInput!): [Store!]!

  """Get all the ghost sides"""
  allStoresGhost: [StoreGhost!]!

  """Get a ghost store"""
  storeGhost(storeGhostId: UUID!): StoreGhost!

  """Get all ghost sides by parent side"""
  allStoresGhostByParentStore(parentStoreId: UUID!): [StoreGhost]!

  """
  Get all available payment systems for the organization. OrganizationId is taken from the header
  """
  allAvailablePaySystem: [PaySystem!]!

  """Get all payment systems in the store"""
  allPaySystemsByStoreId(storeId: UUID!): [PaySystem!]!

  """All payment systems available in organization"""
  paymentSystems(filter: PaymentSystemsFilterInput, pageRequest: PageRequestInput!): PaymentSystemPage!
  paymentSystem(paymentSystemId: UUID!): PaymentSystem!
  orderById(orderId: UUID!): Order!

  """
  sort fields: [totalAmount discountAmount dateLastPayedDate terminal status
  shiftId employeeId guestId store orderNumber payed canceled type createdDate
  lastModifiedDate]
  """
  ordersByFilterPageable(filter: OrderFilterInput!, pageRequest: PageRequestInput!): OrderPage!

  """Get all orders by filter"""
  ordersByFilter(page: Int!, size: Int!, sortField: String, sortOrder: String, filter: OrderFilterInput!): [Order!]! @deprecated(reason: "Use ordersByFilterPageable")
  countOfOrders(filter: OrderFilterInput!): Long! @deprecated(reason: "Use ordersByFilterPageable")

  """Receive payment for an order by its Id"""
  orderPaymentById(paymentId: UUID!): OrderPayment!

  """Receive all payments for the order"""
  allOrderPaymentsByOrderId(orderId: UUID!): [OrderPayment!]!

  """Check delivery avalability for location"""
  isDeliveryAvailableInStore(storeId: UUID!, latitude: Float!, longitude: Float!): Boolean!

  """Get terminal by fingerprint (hardware/software identifier"""
  findTerminalByFingerprintAndStoreId(fingerprint: String!, storeId: UUID!): Terminal
  bonusProgram(id: UUID!): BonusProgram
  promotionPrograms(filter: PromotionProgramFilterInput, pageRequest: PageRequestInput!, sort: [PromotionProgramSort!]): PromotionProgramPage
  discountProgram(id: UUID!): DiscountProgram
  calculatePointsForOrder(input: CalculatePointsInput!): PointsForOrder
  pointTransactions(filter: PointTransactionFilterInput, pageRequest: PageRequestInput!): PointTransactionPage!
  modifierGroupById(id: UUID!): ModifierGroupOutput!
  modifierGroups(filterInput: ModifierGroupFilterInput, pageRequest: PageRequestInput): ModifierGroupOutputPage!
  modifierGroupWhereUsedAsModifier(stockUnitId: UUID!, pageRequest: PageRequestInput): ModifierGroupOutputPage!

  """get a menu by id"""
  menu(id: UUID!): Menu!

  """get all menus by store id"""
  allMenus(storeId: UUID!): [Menu]
  allMenusByStoreIds(storeIds: [UUID!]!): [Menu] @deprecated(reason: "use allMenusByStoreIdsPageable")
  allMenusByStoreIdsPageable(storeIds: [UUID!]!, filter: MenuFilterInput, pageRequest: PageRequestInput): MenuPage

  """get menu section by id"""
  menuSection(id: UUID!): MenuSection!

  """get all menu sections by menu id"""
  allMenuSections(menuId: UUID): [MenuSection!]!

  """get nested menu sections by parent menu section"""
  menuSectionsBySection(sectionId: UUID!): [MenuSection!]!

  """Menu elements"""
  findMenuElements(filter: MenuElementFilterInput, pageable: PageRequestInput): MenuElementsPage!

  """Count menu elements"""
  countMenuElements(filter: MenuElementFilterInput): Long!

  """get menu item by id"""
  menuItem(id: UUID!): MenuItem!

  """get all menu items for menu"""
  allMenuItems(menuId: UUID): [MenuItem]

  """get all menu items by menu section id"""
  allMenuItemsBySection(sectionId: UUID!): [MenuItem!]!

  """get all menu root sections by menu id"""
  allMenuRootSections(menuId: UUID!): [MenuSection!]!

  """get all menu section colors"""
  allMenuSectionColors: [MenuSectionColor!]!

  """get random color from existing colors in system"""
  randomMenuSectionColor: MenuSectionColor!

  """
  get menu last date updated. Menu updates when some of the child menu section or menu item updates
  """
  getMenuLastDateUpdated(menuId: UUID!): Instant!
  getOnlineMenuByShortId(onlineMenuShortId: String!): OnlineMenu!
  getOnlineMenuSectionByMenuSectionId(menuSectionId: UUID!): OnlineMenuSection!
  storeReceiptSettings(storeId: UUID!): StoreReceiptSettings
  subscriber: Subscriber!
  servicePlanV2(servicePlanId: UUID!): ServicePlanV2
  servicePlansV2(pageRequest: PageRequestInput): ServicePlanV2Page!
  servicePlanUsageSummary: ServicePlanUsageSummary!
  addon(addonId: UUID!): Addon!
  addons(pageRequest: PageRequestInput): AddonPage!
  devices(pageRequest: PageRequestInput): DevicePage!
  bill(billId: UUID!): Bill!
  bills(pageRequest: PageRequestInput): BillPage!
  tableBookingListReport(filter: TableBookingListReportFilterInput): TableBookingListReportOutput
  tableBookingGeneralInfoReport(filter: TableBookingListReportFilterInput): TableBookingGeneralInfoReportOutput
  tableBookingOrdersReport(filter: TableBookingListReportFilterInput): TableBookingOrdersReportOutput
  getTableBookings(storeIds: [UUID!]!, filter: TableBookingFilterInput, sort: [TableBookingSortInput!], pageable: PageableInput!): TableBookingPage
  tableGroup(id: UUID!): TableGroup
  tableGroups(storeId: UUID!, pageRequest: PageRequestInput!): TableGroupPage
  checkTrueApiCodes(storeId: UUID!, codes: [String!]!): TrueApiCodesResult

  """Get warehouse by ID"""
  warehouse(
    """Warehouse ID"""
    id: UUID!
  ): Warehouse!

  """
  sort fields: [addressName, phone, email, symbolicCode, name, active, creationDate, lastModifiedDate]
  """
  allWarehousesPageable(filter: WarehouseFilterInput, pageRequest: PageRequestInput!, sort: [WarehousesPageableSort!]): WarehousePage!

  """Get all warehouses for organization"""
  allWarehouses(
    """Page number"""
    page: Int!

    """Page size"""
    size: Int!

    """Field to sort by"""
    sortField: String

    """Sorting order (asc/desc)"""
    sortOrder: String
  ): [Warehouse!]! @deprecated(reason: "use allWarehousesPageable")

  """Get number of warehouses for organization"""
  countWarehouses: Long! @deprecated(reason: "use allWarehousesPageable")

  """Get supplier by ID"""
  supplier(
    """Supplier ID"""
    id: UUID!
  ): Supplier!

  """
  sort fields: [type, contactPoint, companyName, email, address, organization,
  inn, kpp, phone, description, active, creationDate]
  """
  allSuppliersPageable(filter: SupplierFilterInput, pageRequest: PageRequestInput!, sort: [AllSuppliersPageableSort!]): SupplierPage!

  """Get all suppliers for organization"""
  allSuppliers(
    """Page number"""
    page: Int!

    """Page size"""
    size: Int!

    """Field to sort by"""
    sortField: String

    """Sorting order (asc/desc)"""
    sortOrder: String
  ): [Supplier!]! @deprecated(reason: "use allSuppliersPageable")

  """Get number of suppliers for organization"""
  countSuppliers: Long! @deprecated(reason: "use allSuppliersPageable")

  """
  sort fields: [supplier, to, organization, docNumber, date, creationDate,status]
  """
  allDocumentsPageable(filter: AbstractDocumentFilterInput!, pageRequest: PageRequestInput!): DocumentPage!

  """Get all documents for organization"""
  allDocuments(
    """Page number"""
    page: Int!

    """Page size"""
    size: Int!

    """Field to sort by"""
    sortField: String

    """Sorting order (asc/desc)"""
    sortOrder: String

    """Minimal date from which the documents are selected"""
    dateFrom: Instant

    """Maximum date to which the documents are selected"""
    dateTo: Instant

    """Statuses one of which selected documents should have"""
    statuses: [StatusDocument!]
  ): [Document!]! @deprecated(reason: "use allDocumentsPageable")

  """Get number of documents for organization"""
  countDocuments(
    """Minimal date from which the documents are counted"""
    dateFrom: Instant

    """Maximum date to which the documents are counted"""
    dateTo: Instant

    """Statuses one of which counted documents should have"""
    statuses: [StatusDocument!]
  ): Long! @deprecated(reason: "use allDocumentsPageable")

  """Get leaving by order document by ID"""
  leavingByOrderDocument(
    """leaving by order document ID"""
    id: UUID!
  ): LeavingByOrderDocument!
  allLeavingByOrderDocumentsPageable(filter: DocumentFilterInput!, pageRequest: PageRequestInput!): LeavingByOrderDocumentPage!

  """leaving by order documentId or/and orderId"""
  leavingByOrderDocumentV2(filter: LeavingByOrderDocumentV2FilterInput!): LeavingByOrderDocument!

  """Get arrival document by ID"""
  arrivalDocument(
    """Arrival document ID"""
    id: UUID!
  ): ArrivalDocument!

  """
  sort fields: [supplier, to, organization, docNumber, date, creationDate,status]
  """
  allArrivalDocumentsPageable(filter: DocumentFilterInput!, pageRequest: PageRequestInput!): ArrivalDocumentPage!
  allArrivalDocumentsPageableV2(filter: DocumentFilterInputV2, pageRequest: PageRequestInput, sort: [AllArrivalDocumentsPageableV2Sort!]): ArrivalDocumentPage!

  """Get all arrival documents for organization"""
  allArrivalDocuments(
    """Page number"""
    page: Int!

    """Page size"""
    size: Int!

    """ID of warehouse documents should belong to"""
    warehouseId: UUID

    """Field to sort by"""
    sortField: String

    """Sorting order (asc/desc)"""
    sortOrder: String

    """Minimal date from which the documents are selected"""
    dateFrom: Instant

    """Maximum date to which the documents are selected"""
    dateTo: Instant

    """Words and phrases to search in descriptions of the selected documents"""
    search: String
  ): [ArrivalDocument!]! @deprecated(reason: "use allArrivalDocumentsPageable")

  """Get number of arrival documents for organization"""
  countArrivalDocuments(
    """ID of warehouse documents should belong to"""
    warehouseId: UUID!

    """Minimal date from which the documents are counted"""
    dateFrom: Instant

    """Maximum date to which the documents are counted"""
    dateTo: Instant

    """Words and phrases to search in descriptions of the counted documents"""
    search: String
  ): Long! @deprecated(reason: "use allArrivalDocumentsPageable")

  """Get inventory document by ID"""
  inventoryDocument(
    """Inventory document ID"""
    id: UUID!
  ): InventoryDocument!

  """
  sort fields: [supplier, to, organization, docNumber, date, creationDate,status]
  """
  allInventoryDocumentsPageable(filter: DocumentFilterInput!, pageRequest: PageRequestInput!): InventoryDocumentPage!
  allInventoryDocumentsPageableV2(filter: InventoryDocumentFilterInputV2, pageRequest: PageRequestInput, sort: [AllInventoryDocumentsPageableV2Sort]): InventoryDocumentPage!

  """Get all inventory documents for organization"""
  allInventoryDocuments(
    """Page number"""
    page: Int!

    """Page size"""
    size: Int!

    """ID of warehouse documents should belong to"""
    warehouseId: UUID

    """Field to sort by"""
    sortField: String

    """Sorting order (asc/desc)"""
    sortOrder: String

    """Minimal date from which the documents are selected"""
    dateFrom: Instant

    """Maximum date to which the documents are selected"""
    dateTo: Instant

    """Words and phrases to search in descriptions of the selected documents"""
    search: String
  ): [InventoryDocument!]! @deprecated(reason: "use allInventoryDocumentsPageable")

  """Get number of inventory documents for organization"""
  countInventoryDocuments(
    """ID of warehouse documents should belong to"""
    warehouseId: UUID

    """Minimal date from which the documents are counted"""
    dateFrom: Instant

    """Maximum date to which the documents are counted"""
    dateTo: Instant

    """Words and phrases to search in descriptions of the counted documents"""
    search: String
  ): Long! @deprecated(reason: "use allInventoryDocumentsPageable")

  """Get leaving document by ID"""
  leavingDocument(
    """Leaving document ID"""
    id: UUID!
  ): LeavingDocument!

  """
  sort fields: [supplier, to, organization, docNumber, date, creationDate,status]
  """
  allLeavingDocumentsPageable(filter: DocumentFilterInput!, pageRequest: PageRequestInput!): LeavingDocumentPage!
  allLeavingDocumentsPageableV2(filter: InventoryDocumentFilterInputV2, pageRequest: PageRequestInput, sort: [AllLeavingDocumentsPageableV2Sort]): LeavingDocumentPage!

  """Get all leaving documents for organization"""
  allLeavingDocuments(
    """Page number"""
    page: Int!

    """Page size"""
    size: Int!

    """ID of warehouse documents should belong to"""
    warehouseId: UUID

    """Field to sort by"""
    sortField: String

    """Sorting order (asc/desc)"""
    sortOrder: String

    """Minimal date from which the documents are selected"""
    dateFrom: Instant

    """Maximum date to which the documents are selected"""
    dateTo: Instant

    """Words and phrases to search in descriptions of the selected documents"""
    search: String
  ): [LeavingDocument!]! @deprecated(reason: "use allLeavingDocumentsPageable")

  """Get number of leaving documents for organization"""
  countLeavingDocuments(
    """ID of warehouse documents should belong to"""
    warehouseId: UUID

    """Minimal date from which the documents are counted"""
    dateFrom: Instant

    """Maximum date to which the documents are counted"""
    dateTo: Instant

    """Words and phrases to search in descriptions of the counted documents"""
    search: String
  ): Long @deprecated(reason: "use allLeavingDocumentsPageable")

  """Get move document by ID"""
  moveDocument(
    """Move document ID"""
    id: UUID!
  ): MoveDocument

  """
  sort fields: [supplier, to, organization, docNumber, date, creationDate,status]
  """
  allMoveDocumentsPageable(filter: DocumentFilterInput!, pageRequest: PageRequestInput!, sort: [AllMoveDocumentsPageableSort!]): MoveDocumentPage!
  allMoveDocumentsPageableV2(filter: InventoryDocumentFilterInputV2, pageRequest: PageRequestInput!, sort: [AllMoveDocumentsPageableV2Sort!]): MoveDocumentPage!

  """Get all move documents for organization"""
  allMoveDocuments(
    """Page number"""
    page: Int!

    """Page size"""
    size: Int!

    """ID of warehouse documents should belong to"""
    warehouseId: UUID

    """Field to sort by"""
    sortField: String

    """Sorting order (asc/desc)"""
    sortOrder: String

    """Minimal date from which the documents are selected"""
    dateFrom: Instant

    """Maximum date to which the documents are selected"""
    dateTo: Instant

    """Words and phrases to search in descriptions of the selected documents"""
    search: String
  ): [MoveDocument!]! @deprecated(reason: "use allMoveDocumentsPageable")

  """Get number of move documents for organization"""
  countMoveDocuments(
    """ID of warehouse documents should belong to"""
    warehouseId: UUID

    """Minimal date from which the documents are counted"""
    dateFrom: Instant

    """Maximum date to which the documents are counted"""
    dateTo: Instant

    """Words and phrases to search in descriptions of the counted documents"""
    search: String
  ): Long! @deprecated(reason: "use allMoveDocumentsPageable")

  """Get return document by ID"""
  returnDocument(
    """Return document ID"""
    id: UUID!
  ): ReturnDocument!

  """
  sort fields: [supplier, to, organization, docNumber, date, creationDate,status]
  """
  allReturnDocumentsPageable(filter: DocumentFilterInput!, pageRequest: PageRequestInput!): ReturnDocumentPage!

  """Get all return documents for organization"""
  allReturnDocuments(
    """Page number"""
    page: Int!

    """Page size"""
    size: Int!

    """ID of warehouse documents should belong to"""
    warehouseId: UUID

    """Field to sort by"""
    sortField: String

    """Sorting order (asc/desc)"""
    sortOrder: String

    """Minimal date from which the documents are selected"""
    dateFrom: Instant

    """Maximum date to which the documents are selected"""
    dateTo: Instant

    """Words and phrases to search in descriptions of the selected documents"""
    search: String
  ): [ReturnDocument!]! @deprecated(reason: "use allReturnDocumentsPageable")

  """Get number of return documents for organization"""
  countReturnDocuments(
    """ID of warehouse documents should belong to"""
    warehouseId: UUID

    """Minimal date from which the documents are counted"""
    dateFrom: Instant

    """Maximum date to which the documents are counted"""
    dateTo: Instant

    """Words and phrases to search in descriptions of the counted documents"""
    search: String
  ): Long! @deprecated(reason: "use allReturnDocumentsPageable")

  """Get warehouse item by ID"""
  warehouseItem(
    """ID of warehouse item"""
    id: UUID!
  ): WarehouseItem!

  """
  sort fields: [name,stockUnitId,warehouseId,quantity,creationDate,expense]
  """
  allWarehouseItemsPageable(filter: WarehouseItemFilterInput!, pageRequest: PageRequestInput!): WarehouseItemPage!

  """Get all warehouse items for organization"""
  allWarehouseItems(
    """Page number"""
    page: Int!

    """Page size"""
    size: Int!

    """ID of warehouse items should belong to"""
    warehouseId: UUID

    """Field to sort by"""
    sortField: String

    """Sorting order (asc/desc)"""
    sortOrder: String

    """
    Words and phrases to search in name or quantity of the selected warehouse items
    """
    search: String
  ): [WarehouseItem!]! @deprecated(reason: "use allWarehouseItemsPageable")

  """Get number of warehouse items for organization"""
  countWarehouseItems(
    """ID of warehouse items should belong to"""
    warehouseId: UUID

    """
    Words and phrases to search in name or quantity of the counted warehouse items
    """
    search: String
  ): Long! @deprecated(reason: "use allWarehouseItemsPageable")
  warehouseItemsInfoByStockUnitIds(stockUnitIds: [UUID!]!, warehouseId: UUID!): [WarehouseItemInfo!]!
  stockUnitInventoryData(warehouseId: UUID!, stockUnitIds: [UUID!]!): [StockUnitInventoryData!]!
  warehouseStockUnitsIds(warehouseId: UUID!): [UUID!]!
  getPossibleDocumentCreationTypes(warehouseId: UUID!): [InventoryType!]!
}

type ReceiptItemWrapper {
  text: ItemText
  barcode: ItemBarcode
  position: Position
}

input ReceiptItemWrapperInput {
  text: ItemTextInput
  barcode: ItemBarcodeInput
  position: PositionInput
}

enum ReceiptPositionType {
  PRODUCT
  EXCISABLE_PRODUCT
  EXCISABLE_PRODUCT_NOT_MARKED
  EXCISABLE_PRODUCT_MARKED
  PRODUCT_NOT_MARKED
  PRODUCT_MARKED
  SERVICE
}

type ReceiptWish {
  text: String!
}

input ReceiptWishInput {
  text: String!
}

type RegistrationDocument implements KKTDocument {
  documentNumber: Int

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime

  """Fiscal storage serial number"""
  fnSerial: String
  fiscalSign: String
  registrationNumber: String
  documentType: DocumentType
  shiftNumber: Int
  ofdTicket: OfdTicket
  fnsUrl: String
  storeAddress: String
  storePlaceName: String
  organizationVatin: String
  organizationName: String
  organizationEmail: String
  agentSigns: [AgentSign]
  taxSystems: [TaxSystem]
  kktRegistrationNumber: String
  ffdVersion: FFDVersion
  modeSigns: [RegistrationModeSign]
  ofd: Ofd
  machineSerial: String
  operator: Operator
}

input RegistrationDocumentInput {
  documentNumber: Int!

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime

  """Fiscal storage serial number"""
  fnSerial: String!
  fiscalSign: String
  registrationNumber: String
  documentType: DocumentType
  shiftNumber: Int
  ofdTicket: OfdTicketInput
  fnsUrl: String
  storeAddress: String
  storePlaceName: String
  organizationVatin: String
  organizationName: String
  organizationEmail: String
  agentSigns: [AgentSign]
  taxSystems: [TaxSystem]
  kktRegistrationNumber: String
  ffdVersion: FFDVersion
  modeSigns: [RegistrationModeSign]
  ofd: OfdInput
  machineSerial: String
  operator: OperatorInput
}

enum RegistrationModeSign {
  IN_MACHINE
  AUTONOMOUS
  ENCRYPTION
  STRICT_FORMS_ONLY
  INTERNET_ONLY
  EXCISABLE_GOODS
  PROVIDE_SERVICES
  GAMBLING
  PRINTER_IN_MACHINE
  LOTTERY
}

type RequestLimitInfo {
  retriesRemaining: Int!
  timeToNextRequestMillis: Int!
}

interface RequestResult {
  transactionId: UUID

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

type ReRegistrationDocument implements KKTDocument {
  documentNumber: Int

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime

  """Fiscal storage serial number"""
  fnSerial: String
  fiscalSign: String
  registrationNumber: String
  documentType: DocumentType
  shiftNumber: Int
  ofdTicket: OfdTicket
  reason: [ReRegistrationReason]
  fnsUrl: String
  storeAddress: String
  storePlaceName: String
  organizationVatin: String
  organizationName: String
  organizationEmail: String
  agentSigns: [AgentSign]
  taxSystems: [TaxSystem]
  kktRegistrationNumber: String
  ffdVersion: FFDVersion
  modeSigns: [RegistrationModeSign]
  ofd: Ofd
  machineSerial: String
  operator: Operator
}

input ReRegistrationDocumentInput {
  documentNumber: Int!

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime

  """Fiscal storage serial number"""
  fnSerial: String!
  fiscalSign: String
  registrationNumber: String
  documentType: DocumentType
  shiftNumber: Int
  ofdTicket: OfdTicketInput
  reason: [ReRegistrationReason]
  fnsUrl: String
  storeAddress: String
  storePlaceName: String
  organizationVatin: String
  organizationName: String
  organizationEmail: String
  agentSigns: [AgentSign]
  taxSystems: [TaxSystem]
  kktRegistrationNumber: String
  ffdVersion: FFDVersion
  modeSigns: [RegistrationModeSign]
  ofd: OfdInput
  machineSerial: String
  operator: OperatorInput
}

enum ReRegistrationReason {
  FN_CHANGING
  OFD_CHANGING
  ORGANIZATION_NAME_CHANGING
  STORE_ADDRESS_CHANGING
  AUTONOMUS_MODE_DISABLING
  AUTONOMUS_MODE_ENABLING
  DEVICE_MODEL_VERSION_CHANGING
  TAX_LIST_CHANGING
  DEVICE_MARK_CHANGING
  MANUAL_MODE_ENABLING
  MANUAL_MODE_DISABLING
  BSO_MODE_ENABLING
  BSO_MODE_DISABLING
  ONLINE_MODE_DISABLING
  ONLINE_MODE_ENABLING
  GAMBLING_MODE_DISABLING
  GAMBLING_MODE_ENABLING
  LOTTERY_MODE_DISABLING
  LOTTERY_MODE_ENABLING
  FFD_VERSION_CHANGING
  OTHER
}

"""Rest password response"""
type ResetPasswordResult implements RequestResult {
  transactionId: UUID

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

type ResultLeavingItem {
  id: UUID!
  name: String!
  stockUnitId: UUID!
  parentStockUnitId: UUID
  primePrice: BigDecimal!
  currency: String
  unit: UnitType!
  quantity: BigDecimal!
  coreItem: Boolean!
}

"""Return document data"""
type ReturnDocument {
  """Return document ID"""
  id: UUID

  """Supplier that items get returned to"""
  supplier: Supplier

  """Organization that created the document"""
  organization: Organization

  """Returned items"""
  documentItems: [DocumentItem!]

  """Number"""
  docNumber: Long

  """Execution date"""
  date: Instant

  """Creation date"""
  creationDate: Instant

  """Type"""
  typeDocument: TypeDocument

  """Status"""
  status: StatusDocument

  """Description"""
  description: String

  """Warehouse that items got returned from"""
  from: Warehouse
}

"""Return document data"""
input ReturnDocumentCreateInput {
  """Description"""
  description: String

  """Date of return"""
  date: Instant

  """ID of warehouse from which items were returned"""
  fromWarehouseId: UUID!

  """ID of supplier to which items were returned"""
  supplierId: UUID!

  """Returned items"""
  documentItems: [DocumentItemInput!]
}

type ReturnDocumentPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [ReturnDocument!]!
}

"""Return document data"""
input ReturnDocumentUpdateInput {
  """Return document ID"""
  id: UUID!

  """Description"""
  description: String

  """Date of return"""
  date: Instant

  """ID of warehouse from which items were returned"""
  fromWarehouseId: UUID!

  """ID of supplier to which items were returned"""
  supplierId: UUID!

  """Returned items"""
  documentItems: [DocumentItemInput!]
}

"""Revoke employee invitation response"""
type RevokeEmployeeInviteResponse {
  employeeId: UUID!
}

type RevokeSupportControlClaimResult {
  id: UUID!
}

"""User group role codes"""
enum RoleCode {
  ADMIN
  MANAGER
  CASHIER
}

type SalesByHour {
  """hour"""
  hour: Int!

  """average hourly profit"""
  averageHourlyProfit: BigDecimal!

  """average hourly revenue"""
  averageHourlyRevenue: BigDecimal!

  """average hourly check"""
  averageHourlyCheck: BigDecimal!

  """total hourly guests count"""
  totalHourlyGuestsCount: Int!

  """total hourly checks count"""
  totalHourlyChecksCount: Int!
}

input SalesByHourWidgetInput {
  """list of stores to filter"""
  storeIds: [UUID!]

  """data range from to filter(yyyy-MM-dd)"""
  dateRange: DateRangeInput!
}

type SalesByHourWidgetOutput {
  """elements sales by hour"""
  elements: [SalesByHour!]!
}

type SalesByWeekDay {
  dayOfWeek: Int!
  averageWeeklyProfit: BigDecimal!
  averageWeeklyRevenue: BigDecimal!
  averageWeeklyCheck: BigDecimal!
  totalWeeklyGuestsCount: Int!
  totalWeeklyChecksCount: Int!
}

input SalesByWeekDayWidgetInput {
  storeIds: [UUID!]
  dateRange: DateRangeInput!
}

type SalesByWeekDayWidgetOutput {
  elements: [SalesByWeekDay!]!
}

type SalesToday {
  profit: BigDecimal!
  revenue: BigDecimal!
  averageCheck: BigDecimal!
  guestsCount: Int!
  checksCount: Int!
}

input SalesTodayWidgetInput {
  storeIds: [UUID!]
  dateRange: DateRangeInput!
}

type SalesTodayWidgetOutput {
  salesToday: SalesToday!
}

type SaveKKTDocumentsPayload {
  success: Boolean!
}

input SaveStoreReceiptSettingsInput {
  storeId: UUID!
  settings: StoreReceiptSettingsInput!
}

type SaveStoreReceiptSettingsResult implements RequestResult {
  transactionId: UUID
  output: StoreReceiptSettings

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

type SaveStoreTableGroupsResult implements RequestResult {
  transactionId: UUID
  output: TableGroupsOutput
  result: TransactionResult!
  errorMessage: String
}

input SaveTableBookingInput {
  """Provide only for updating"""
  id: UUID
  tableBooking: TableBookingInput!
}

type SaveTableBookingResult implements RequestResult {
  transactionId: UUID
  output: TableBooking
  result: TransactionResult!
  errorMessage: String
}

enum Scale {
  ASPECT_FILL
}

"""Schedule"""
type Schedule {
  """Start time 'HH: mm'"""
  fromTime: String

  """End time 'HH: mm'"""
  toTime: String

  """Days of the week"""
  daysOfWeek: [DayOfWeek!]

  """Schedule type"""
  scheduleType: ScheduleType
}

"""Schedule"""
input ScheduleInput {
  """Start time 'HH: mm'"""
  fromTime: String!

  """End time 'HH: mm'"""
  toTime: String!

  """Days of the week"""
  daysOfWeek: [DayOfWeek!]

  """Schedule type"""
  scheduleType: ScheduleType!
}

enum ScheduleType {
  DELIVERY_TIME
  WORKING_TIME
  TAKEAWAY_TIME
}

"""Project interaction scopes"""
enum Scope {
  ANALYTICS
  CATALOG
  IMAGE
  GOAL
  KITCHEN
  TASK
  DISCOUNT
  ACCOUNT
  ORGANIZATION
  EMPLOYEE
  INVITATION
  UNACCEPTED_INVITATION
  SUBSCRIPTION
  STORE
  ORDER
  LOYALTY
  ORDER_PAYMENT
  RECEIPT
  MENU
  WAREHOUSE
  WAREHOUSE_DOCUMENT
  SERVICE_PLAN
  TERMINAL_SETTINGS
  DELIVERY
  YANDEX_MENU
  YANDEX_ORDER
  YANDEX
  YANDEX_RESTAURANT @deprecated
}

"""new filter object for catalog sections"""
input SectionsFilterInput {
  catalogId: UUID
  parentSectionIds: [UUID!]
  search: String
  depthLevel: Int
}

type Selection {
  all: Boolean!
  selected: [UUID!]
  excluded: [UUID!]
}

input SelectionInput {
  all: Boolean!
  selected: [UUID!]
  excluded: [UUID!]
}

"""Employee invitation response"""
type SendEmployeeInviteResponse {
  employeeId: UUID!
  token: String!
}

"""Rate"""
type ServicePlan {
  """Tariff Id"""
  id: UUID!

  """Tariff name"""
  name: String!

  """Trial period. ISO 8601 format: P (n) Y (n) M (n) DT (n) H (n) M (n) S"""
  trialPeriodDuration: String

  """Tariff code"""
  code: String!

  """Tariff Description"""
  description: String

  """Sequential number of the tariff in the list of tariffs"""
  position: Int

  """Tariff options"""
  options: [ServicePlanOption!]!
  haveTrial: Boolean!
}

"""Tariff Option"""
type ServicePlanOption {
  """Tariff option id"""
  id: UUID!

  """Serial number of the tariff option"""
  position: Int

  """
  Duration of tariff option. ISO 8601 format: P (n) Y (n) M (n) DT (n) H (n) M (n) S
  """
  duration: String!

  """Tariff Option Cost"""
  amount: AmountData!

  """Description of the tariff option"""
  description: String
}

type ServicePlanUsageSummary {
  organizationId: UUID!
  remainingDays: Int
  isFreeAccount: Boolean!
  isInDebt: Boolean!
  servicePlan: ServicePlanV2!
}

type ServicePlanV2 {
  id: UUID!
  name: String!
  description: String
  servicesDescription: String
  trialPeriod: Int
  isPersonal: Boolean
  price: AmountData
  terms: [ServicePlanV2Terms!]!
}

type ServicePlanV2Page implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [ServicePlanV2!]!
}

type ServicePlanV2Terms {
  deviceType: TermsDeviceType!
  limit: Int!
}

type ShiftClosingDocument implements KKTDocument {
  documentNumber: Int

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime

  """Fiscal storage serial number"""
  fnSerial: String
  fiscalSign: String
  registrationNumber: String
  documentType: DocumentType
  shiftNumber: Int
  ofdTicket: OfdTicket
  documentsCount: Int
  ffdVersion: FFDVersion
  storePlaceName: String
  storeAddress: String
  organizationVatin: String
  organizationName: String
  ofd: Ofd
  operator: Operator
}

input ShiftClosingDocumentInput {
  documentNumber: Int!

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime

  """Fiscal storage serial number"""
  fnSerial: String!
  fiscalSign: String
  registrationNumber: String
  documentType: DocumentType
  shiftNumber: Int
  ofdTicket: OfdTicketInput
  documentsCount: Int
  ffdVersion: FFDVersion
  storePlaceName: String
  storeAddress: String
  organizationVatin: String
  organizationName: String
  ofd: OfdInput
  operator: OperatorInput
}

type ShiftNumberPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Int!]!
}

type ShiftOpeningDocument implements KKTDocument {
  documentNumber: Int

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime

  """Fiscal storage serial number"""
  fnSerial: String
  fiscalSign: String
  registrationNumber: String
  documentType: DocumentType
  shiftNumber: Int
  ofdTicket: OfdTicket
  ffdVersion: FFDVersion
  storePlaceName: String
  storeAddress: String
  organizationVatin: String
  organizationName: String
  ofd: Ofd
  operator: Operator
}

input ShiftOpeningDocumentInput {
  documentNumber: Int!

  """An RFC-3339 compliant DateTime"""
  dateTime: DateTime

  """Fiscal storage serial number"""
  fnSerial: String!
  fiscalSign: String
  registrationNumber: String
  documentType: DocumentType
  shiftNumber: Int
  ofdTicket: OfdTicketInput
  ffdVersion: FFDVersion
  storePlaceName: String
  storeAddress: String
  organizationVatin: String
  organizationName: String
  ofd: OfdInput
  operator: OperatorInput
}

enum SignerBase {
  """устав"""
  CHARTER

  """доверенность"""
  PROCURATION
}

union SignInRequestError = SignInRequestRateLimitError

type SignInRequestRateLimitError implements ApiException {
  message: String
}

"""
First-phase auth response, describes identity type (email, phone, etc.) and
password-based authorization availability for current request
"""
type SignInResponse {
  requestId: UUID!

  """Identity type, such as email or phone"""
  authType: IdentityType!

  """
  Password-based auth availability. Actually show that account has password set
  """
  hasPassword: Boolean!
}

type SignInResponseData {
  authInfo: SignInResponse
  requestLimitInfo: RequestLimitInfo
  exceptions: [SignInRequestError!]
}

"""
Sign in type:
ERP: will send confirmation code if such user does not exists, or user has no password
POS: will not send any confirmation code, will check that user has menu in any of his organizations
"""
enum SignInType {
  ERP
  POS
}

input SizeInput {
  """size type (e.g. `original`, `large` or 'medium`)"""
  sizeType: String!

  """image width"""
  width: Int!

  """image height"""
  height: Int!
}

type SnapshotOrderEmployee {
  id: UUID
  firstName: String
  lastName: String
}

input SnapshotOrderEmployeeInput {
  id: UUID!
  firstName: String!
  lastName: String!
}

enum Sno {
  DEFAULT
  OSN
  USN_INCOME
  USN_INCOME_OUTCOME
  ESN
  PATENT
}

"""SNO (taxation system) with source location"""
type SnoValue {
  """SNO value"""
  sno: Sno

  """Source where SNO has been got"""
  entityType: CatalogEntityType

  """Source ID"""
  entityId: UUID
}

"""Sort direction"""
enum SortDirection {
  """Ascending (0-9, A-Z)"""
  ASC

  """Descending (9-0, Z-A)"""
  DESC
}

"""Sort order"""
input SortOrderInput {
  """Field name to sort by"""
  fieldName: String!

  """Sorting direction"""
  direction: SortDirection
}

input SpendOrderPointsInput {
  terminalId: UUID!
  orderId: UUID!
  storeId: UUID!
  customerId: UUID!
  spendPoints: Int!
}

enum Stage {
  WAITING_FOR_APPROVE
  COOKING
  READY_FOR_PICKUP
  COURIER_IS_PICKUP
  COURIER_ON_THE_WAY
  COURIER_ON_THE_SPOT
  DELIVERED
  CANCELED
}

"""Status of production task"""
enum Status {
  NEW
  IN_PROGRESS
  DONE
  CLOSED
  CANCELED
}

"""Document status"""
enum StatusDocument {
  PENDING
  CONFIRMED
  REJECTED
}

enum StatusPointTransaction {
  INVALID
  CANCELED
  REFUSED
  PENDING
  COMPLETED
}

"""StockUnit output data"""
type StockUnit {
  """StochUnit ID"""
  id: UUID!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  createdDate: Instant!

  """StochUnit name"""
  name: String!

  """StochUnit unit type"""
  unit: UnitType!

  """StochUnit prime price"""
  primePrice: AmountData

  """StochUnit sale price"""
  salePrice: AmountData!

  """StochUnit techCard"""
  techCard: TechCard

  """StochUnit list of images"""
  images: [Image!]!

  """StockUnit TaxProfile"""
  taxProfile: TaxProfile @deprecated(reason: "use snoValue & taxValue")

  """Stock unit SNO (taxation system) with source info"""
  snoValue: SnoValue

  """SNO (taxation system) of nearest parent catalog element, if available"""
  parentSnoValue: SnoValue

  """Stock unit VAT (tax rate) with source info"""
  vatValue: VatValue

  """VAT (tax rate) of nearest parent catalog element, if available"""
  parentVatValue: VatValue
  barcodes: [Barcode!]

  """Stock unit position type with source info"""
  positionType: PositionType

  """Position type of nearest parent catalog element, if available"""
  parentPositionType: PositionType

  """unit type kg, g, l,ml"""
  subUnit: UnitType

  """quantity by subUnit"""
  quantity: BigDecimal!

  """weighable"""
  weighable: Boolean!
  unitTypesMatchList: [UnitType!]!
}

type StockUnitAppliedModifier {
  id: UUID!
  modifierId: UUID!
  name: String!
  modifierGroup: AppliedModifierGroup!
  stockUnitId: UUID!
  quantity: MeasureData!
  amount: AmountData!
  salePrice: AmountData!
  primePrice: AmountData!
  resultAmount: AmountData
  vatType: VatType!
  positionTypeCode: PositionTypeCode!
}

"""Stock unit created event"""
type StockUnitCreatedDto {
  """Created stock unit"""
  stockUnit: StockUnit!
}

"""Stock unit deleted event"""
type StockUnitDeletedDto {
  """Deleted stock unit ID"""
  stockUnitId: UUID!
}

input StockUnitFilterInput {
  ids: [UUID!]
}

"""StockUnit input data"""
input StockUnitInput {
  """StockUnit ID (only when update)"""
  id: UUID

  """StockUnit name"""
  name: String!

  """StockUnit unit type"""
  unit: UnitType!

  """StockUnit prime price"""
  primePrice: AmountDataInput

  """StockUnit sale price"""
  salePrice: AmountDataInput!

  """StockUnit techCard"""
  techCard: CatalogTechCardInput

  """StockUnit list of images"""
  images: [ImageInput!]
  imageIds: [UUID!]
  barcodes: [BarcodeInput!]

  """unit type kg, g, l,ml"""
  subUnit: UnitType

  """quantity by subUnit"""
  quantity: BigDecimal

  """weighable"""
  weighable: Boolean!
}

type StockUnitInventoryData {
  stockUnitId: UUID!
  lastInventoryDocumentId: UUID
  lastInventoryDate: Instant
  leftoverOnLastInventory: BigDecimal
  arrivalFromLastInventory: BigDecimal
  soldFromLastInventory: BigDecimal
  writtenOffFromLastInventory: BigDecimal
  planQuantity: BigDecimal
}

type StockUnitModifier {
  id: UUID!
  name: String!
  pinned: Boolean!
  sort: Int!
  stockUnit: StockUnit!
}

input StockUnitModifierInput {
  name: String!
  pinned: Boolean!
  sort: Int!
  stockUnitId: UUID!
}

input StockUnitModifierUpdateInput {
  id: UUID!
  name: String!
  pinned: Boolean!
  sort: Int!
  stockUnitId: UUID!
}

"""Page of catalog sections"""
type StockUnitPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [StockUnit!]!
}

input StockUnitPatchUpdateInput {
  """StockUnit name"""
  name: String

  """StockUnit unit type"""
  unit: UnitType

  """StockUnit prime price"""
  primePrice: AmountDataInput

  """StockUnit sale price"""
  salePrice: AmountDataInput
  addImageIds: [UUID!]
  removeImageIds: [UUID!]
  addBarcodes: [String!]
  removeBarcodeIds: [String!]

  """quantity by subUnit"""
  quantity: BigDecimal

  """weighable"""
  weighable: Boolean

  """TaxProfile for product"""
  taxProfile: TaxProfilePatchUpdateInput

  """Position type for product"""
  positionTypeCode: PositionTypeCode
}

"""Abstract stock unit event to subscribe to"""
union StockUnitSubscriptionDto = StockUnitCreatedDto | StockUnitUpdatedDto | StockUnitDeletedDto

"""Stock unit updated event"""
type StockUnitUpdatedDto {
  """Updated stock unit"""
  stockUnit: StockUnit!
}

input StockUnitWarehouseInput {
  """StockUnit ID"""
  id: UUID

  """StockUnit name"""
  name: String!

  """StockUnit unit type"""
  unit: UnitType!

  """StockUnit primePrice"""
  primePrice: AmountDataInput!

  """unit type kg, g, l,ml"""
  subUnit: UnitType

  """quantity by subUnit"""
  quantity: BigDecimal

  """weighable"""
  weighable: Boolean
}

"""Store"""
type Store {
  """Id store"""
  id: UUID!

  """Name of shop"""
  name: String!

  """Name of the organization"""
  organizationName: String

  """Legal address"""
  legalAddress: String

  """Post address"""
  postAddress: String

  """The postal address corresponds to the legal"""
  postAddressCoincidence: Boolean

  """Index"""
  postalCode: String

  """INN"""
  vatin: String

  """Checkpoint"""
  kpp: String

  """OGRN"""
  ogrn: String

  """Checking account"""
  bankAccount: String
  ceo: String
  registrationDate: Instant
  signer: String
  signerBase: SignerBase
  okpo: String
  bankName: String
  bic: String
  phone: String
  correspondentAccount: String

  """Store type"""
  type: StoreType!

  """Sign of disconnection of the store"""
  active: Boolean!

  """Store URL prefix"""
  linkPrefix: String @deprecated(reason: "unused")

  """Store directory id"""
  catalogId: UUID!

  """Organization ID"""
  organizationId: UUID!

  """Store organization"""
  organization: Organization!

  """Id store delivery warehouse"""
  shippingWarehouseId: UUID
  shippingWarehouse: Warehouse

  """Tax profile"""
  taxProfile: TaxProfile @deprecated

  """Position type"""
  positionTypeCode: PositionTypeCode!

  """Currency in which settlements are made in the store"""
  currency: String!

  """List of payment systems"""
  paySystems: [PaySystem!]

  """
  The name of the Time Zone in which the store operates (IANA Time Zone Database)
  """
  zoneId: String!

  """Store address"""
  address: String @deprecated(reason: "use actualAddress")

  """Store actual address"""
  actualAddress: String

  """Terminal List"""
  terminals: [Terminal!]

  """List of Id device store servers"""
  deviceServerIdList: [UUID!] @deprecated(reason: "unused")

  """Time of the last check modification yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  lastReceiptModifiedDate: Instant @deprecated

  """Sequential number in the list of stores of the organization"""
  position: Int

  """Store number"""
  serialNumber: Long

  """Maximum delivery time 'HH: mm'"""
  deliveryTimeMax: String

  """Minimum delivery time 'HH: mm'"""
  deliveryTimeMin: String

  """List of store schedules"""
  schedules: [Schedule!]

  """Cost of delivery"""
  deliveryAmount: AmountData
  countOfTerminals: Long!
  countOfMenu: Long!

  """Array of coordinates with latitude and longitude for delivery area"""
  deliveryArea: [Coordinates!]

  """Coordinates where store is located"""
  geoLocation: Coordinates

  """Is working schedule enabled"""
  workingScheduleEnabled: Boolean

  """Is tables feature enabled in this store"""
  tablesFeatureEnabled: Boolean!

  """Is table booking feature active for this store"""
  tablesBookingFeatureEnabled: Boolean

  """Respect store working schedule during table booking"""
  respectWorkingHoursForBooking: Boolean
  characteristics: StoreCharacteristics
  survey: StoreSurvey
}

type StoreCharacteristics {
  areaMetrics: AreaMetrics
}

input StoreCharacteristicsInput {
  areaMetrics: AreaMetricsInput
}

"""Store"""
input StoreCreateInput {
  """Name of shop"""
  name: String!

  """Name of the organization"""
  organizationName: String

  """Legal address"""
  legalAddress: String

  """Post address"""
  postAddress: String

  """Index"""
  postalCode: String

  """The postal address corresponds to the legal"""
  postAddressCoincidence: Boolean

  """Store geo location"""
  geoLocation: CoordinatesInput

  """INN"""
  vatin: String

  """Checkpoint"""
  kpp: String

  """OGRN"""
  ogrn: String

  """Checking account"""
  bankAccount: String

  """Currency in which settlements are made in the store"""
  currency: String!

  """
  The name of the Time Zone in which the store operates (IANA Time Zone Database)
  """
  zoneId: String

  """Store type"""
  type: StoreType!

  """Store directory id"""
  catalogId: UUID!

  """Organization ID"""
  organizationId: UUID!

  """Id store delivery warehouse"""
  shippingWarehouseId: UUID

  """Sequential number in the list of stores of the organization"""
  position: Int

  """Store address"""
  address: String

  """Maximum delivery time 'HH: mm'"""
  deliveryTimeMax: String

  """Minimum delivery time 'HH: mm'"""
  deliveryTimeMin: String

  """List of store schedules"""
  schedules: [ScheduleInput!]
  workingScheduleEnabled: Boolean

  """Cost of delivery"""
  deliveryAmount: AmountDataInput
  okpo: String
  phone: String
  ceo: String
  registrationDate: Instant
  signer: String
  signerBase: SignerBase
  bankName: String
  correspondentAccount: String
  bic: String
  tablesFeatureEnabled: Boolean
  tablesBookingFeatureEnabled: Boolean
  respectWorkingHoursForBooking: Boolean
  characteristics: StoreCharacteristicsInput
  survey: StoreSurveyInput
}

type StoreDeletedDto {
  """Created store"""
  storeId: UUID!
}

"""Store filter"""
input StoreFilterInput {
  """Id store"""
  id: UUID

  """Store name"""
  name: String

  """Store type"""
  type: StoreType

  """Currency in which settlements are made in the store"""
  currency: String

  """Store address"""
  address: String

  """Directory id"""
  catalogId: UUID

  """List of id terminals of the store"""
  terminalIdList: [UUID!]

  """
  List of device id of the store
  !!! @deprecated unused
  """
  deviceServerIdList: [UUID!]

  """Id store delivery warehouse"""
  shippingWarehouseId: UUID

  """Sign of disconnection of the store"""
  active: Boolean
}

input StoreFilterInputV2 {
  name: String
}

type StoreGhost {
  """Id store-ghost"""
  id: UUID!

  """Id of the parent store"""
  parentStoreId: UUID!

  """Id of the organization of the store-ghost"""
  organizationId: UUID!

  """Name of the ghost store"""
  name: String!

  """Id of the ghost store directory"""
  catalogId: UUID!

  """Id store supply store ghost"""
  shippingWarehouseId: UUID

  """
  The name of the Time Zone in which the ghost store operates (IANA Time Zone Database)
  """
  zoneId: String!

  """Sign of disconnection of the ghost store"""
  active: Boolean!

  """Sequential number in the list of the parent store"""
  position: Int

  """Ghost store address"""
  address: String @deprecated(reason: "use actualAddress")

  """Ghost store actual address"""
  actualAddress: String

  """Maximum delivery time 'HH: mm'"""
  deliveryTimeMax: String

  """Minimum delivery time 'HH: mm'"""
  deliveryTimeMin: String

  """List of ghost store schedules"""
  schedules: [Schedule!]

  """Cost of delivery"""
  deliveryAmount: AmountData

  """Array of coordinates with latitude and longitude for deliveryArea"""
  deliveryArea: [Coordinates!]

  """Coordinates where storeGhost is located"""
  geoLocation: Coordinates
}

input StoreGhostUpdateInput {
  """Id store-ghost"""
  id: UUID!

  """Id of the parent store"""
  parentStoreId: UUID!

  """Name of the ghost store"""
  name: String!

  """Id of the ghost store directory"""
  catalogId: UUID!

  """Id store supply store ghost"""
  shippingWarehouseId: UUID

  """
  The name of the Time Zone in which the ghost store operates (IANA Time Zone Database)
  """
  zoneId: String!

  """Sign of disconnection of the ghost store"""
  active: Boolean

  """Sequential number in the list of the parent store"""
  position: Int

  """
  Ghost store address
  !!! @deprecated use actualAddress
  """
  address: String

  """Ghost store actual address"""
  actualAddress: String

  """Maximum delivery time 'HH: mm'"""
  deliveryTimeMax: String

  """Minimum delivery time 'HH: mm'"""
  deliveryTimeMin: String

  """List of ghost store schedules"""
  schedules: [ScheduleInput!]

  """Cost of delivery"""
  deliveryAmount: AmountDataInput

  """Array of coordinates with latitude and longitude"""
  coordinates: [CoordinatesInput!]
}

input StoreInfoUpdateInput {
  """Id store"""
  id: UUID!

  """Name of shop"""
  name: String!

  """
  TaxProfile for store
  !!! @deprecated unused
  """
  taxProfile: TaxProfileCreateInput

  """Currency in which settlements are made in the store"""
  currency: String!

  """
  The name of the Time Zone in which the store operates (IANA Time Zone Database)
  """
  zoneId: String!

  """Store catalog ID"""
  catalogId: UUID!

  """Store address"""
  address: String

  """Store geo location"""
  geoLocation: CoordinatesInput

  """
  Pay system IDs
  !!! @deprecated use storePaySystems
  """
  paySystems: [UUID!]

  """Pay systems"""
  storePaySystems: [PaySystemInput!]

  """Store type"""
  type: StoreType!

  """List of store schedules"""
  schedules: [ScheduleInput!]

  """Id store delivery warehouse"""
  shippingWarehouseId: UUID

  """Sequential number in the list of stores of the organization"""
  position: Int

  """Maximum delivery time 'HH: mm'"""
  deliveryTimeMax: String

  """Minimum delivery time 'HH: mm'"""
  deliveryTimeMin: String

  """Cost of delivery"""
  deliveryAmount: AmountDataInput

  """Array of coordinates with latitude and longitude"""
  coordinates: [CoordinatesInput!]
}

input StoreInfoUpdateInputV3 {
  """Id store"""
  id: UUID!

  """Name of shop"""
  name: String

  """Currency in which settlements are made in the store"""
  currency: String

  """Store catalog ID"""
  catalogId: UUID

  """
  The name of the Time Zone in which the store operates (IANA Time Zone Database)
  """
  zoneId: String

  """Store type"""
  type: StoreType
  postAddress: String

  """Store address"""
  address: String

  """Store geo location"""
  geoLocation: CoordinatesInput

  """existing paySystemIds to remove"""
  removePaySystemIds: [UUID!]

  """existing paySystemIds to add"""
  addPaySystemIds: [UUID!]

  """existing schedulesIds to remove"""
  removeScheduleIds: [UUID!]

  """existing schedulesIds to add"""
  addScheduleIds: [UUID!]

  """Id store delivery warehouse"""
  shippingWarehouseId: UUID

  """Sequential number in the list of stores of the organization"""
  position: Int

  """Maximum delivery time 'HH: mm'"""
  deliveryTimeMax: String

  """Minimum delivery time 'HH: mm'"""
  deliveryTimeMin: String

  """Cost of delivery"""
  deliveryAmount: AmountDataInput
}

"""MenuId corresponds to storeId where menu has been created"""
type StoreMenu {
  storeId: UUID!
  menuId: UUID!
}

type StorePage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Store!]!
}

type StoreReceiptSettings {
  """Flag to enable printing of a store logo on the receipt"""
  printStoreLogo: Boolean!

  """Store logo image id"""
  storeLogoImageId: UUID

  """Flag to enable printing of a store name on the receipt"""
  printStoreName: Boolean!

  """Store name to be printed"""
  storeName: String

  """Flag to enable printing of a wishes on the receipt"""
  printWishes: Boolean!

  """Wishes"""
  wishes: [ReceiptWish!]

  """Flag to enable printing of a custom comment on the receipt"""
  printFreeComment: Boolean!

  """Free comment to be printed"""
  freeComment: String

  """Flag to enable printing of an order comment on the receipt"""
  printOrderComment: Boolean!
}

input StoreReceiptSettingsInput {
  """Flag to enable printing of a store logo on the receipt"""
  printStoreLogo: Boolean!

  """Store logo image id"""
  storeLogoImageId: UUID

  """Flag to enable printing of a store name on the receipt"""
  printStoreName: Boolean!

  """Store name to be printed"""
  storeName: String

  """Flag to enable printing of a wishes on the receipt"""
  printWishes: Boolean!

  """Wishes"""
  wishes: [ReceiptWishInput!]

  """Flag to enable printing of a custom comment on the receipt"""
  printFreeComment: Boolean!

  """Free comment to be printed"""
  freeComment: String

  """Flag to enable printing of an order comment on the receipt"""
  printOrderComment: Boolean!
}

input StoreRequisitesUpdateInput {
  """Id store"""
  id: UUID!

  """Position type for store"""
  positionTypeCode: PositionTypeCode

  """Name of the organization"""
  organizationName: String

  """Legal address"""
  legalAddress: String

  """Post address"""
  postAddress: String

  """Index"""
  postalCode: String

  """The postal address corresponds to the legal"""
  postAddressCoincidence: Boolean

  """INN"""
  vatin: String

  """Checkpoint"""
  kpp: String

  """OGRN"""
  ogrn: String

  """Checking account"""
  bankAccount: String

  """CEO name"""
  ceo: String
  registrationDate: Instant
  signer: String
  signerBase: SignerBase
  okpo: String
  bankName: String
  bic: String
  phone: String
  correspondentAccount: String
}

type StoreResult implements RequestResult {
  transactionId: UUID
  output: Store

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

union StoreSubscriptionDto = StoreUpdatedDto | StoreDeletedDto

type StoreSurvey {
  previousErp: String
  storeTypes: [StoreSurveyStoreType!]
  storeServices: [StoreSurveyStoreService!]
}

input StoreSurveyInput {
  previousErp: String
  storeTypes: [StoreSurveyStoreType!]!
  storeServices: [StoreSurveyStoreService!]!
}

enum StoreSurveyStoreService {
  HERE
  DELIVERY
  TAKEAWAY
}

enum StoreSurveyStoreType {
  RESTAURANT
  BAR
  CAFE
  EATERY
  COFFEE_HOUSE
  CULINARY
  OTHER
}

input StoreTableGroupsInput {
  storeId: UUID!
  tableGroups: [TableGroupInput!]
}

enum StoreType {
  SHOP
  KAFE
  RESTAURANT
}

type StoreUpdatedDto {
  """Created store"""
  store: Store!
}

input StoreUpdateInput {
  id: UUID!
  name: String
  address: String
  shippingWarehouseId: UUID

  """Currency in which settlements are made in the store"""
  zoneId: String
  vatin: String

  """Checkpoint"""
  kpp: String
  ogrn: String
  okpo: String
  legalAddress: String
  postalCode: String
  phone: String
  ceo: String
  signerBase: SignerBase
  bankAccount: String
  bankName: String
  bic: String
  correspondentAccount: String
  signer: String
  currency: String
  catalogId: UUID
  type: StoreType
  postAddress: String

  """The postal address corresponds to the legal"""
  postAddressCoincidence: Boolean
  geoLocation: CoordinatesInput
  removeScheduleIds: [UUID!]
  addScheduleIds: [UUID!]
  position: Int
  deliveryTimeMax: String
  deliveryTimeMin: String
  deliveryAmount: AmountDataInput
  positionTypeCode: PositionTypeCode
  organizationName: String
  registrationDate: Instant
  schedules: [ScheduleInput!]
  workingScheduleEnabled: Boolean
  tablesFeatureEnabled: Boolean
  tablesBookingFeatureEnabled: Boolean
  respectWorkingHoursForBooking: Boolean
  characteristics: StoreCharacteristicsInput
  survey: StoreSurveyInput
}

type Subscriber {
  organizationId: UUID!
  validUntil: Instant
  servicePlan: ServicePlanV2!
  addonsSubscriptions: [AddonSubscription]!
  deviceRestrictions: [DeviceRestriction!]!
  deviceUsages: [DeviceUsage]!
}

type SubscriberResult implements RequestResult {
  transactionId: UUID
  output: Subscriber

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

type Subscription {
  """Subscribe tech support claim issuing for current organization"""
  subscribeTechSupportClaims: TechSupportClaim @deprecated(reason: "use supportControlClaimChanges")

  """Subscribe employee changes"""
  subscribeEmployeeChanges: EmployeeSubscription @deprecated(reason: "use employeeChanges")

  """Employee subscription"""
  employeeChanges: EmployeeChange!

  """
  Support control claims subscription. Catches any claim update (issued/confirmed/extended/revoked/declined)
  """
  supportControlClaimChanges: SupportControlClaim! @deprecated(reason: "use supportControlClaimChangesList")

  """
  Support control claims subscriptions list. Catches any claim update (issued/confirmed/extended/revoked/declined)
  """
  supportControlClaimChangesList: [SupportControlClaim!]

  """Subscribe on all notifications"""
  subscribeOnNotifications: AccountNotification!

  """Subscribe organization changes"""
  organizationChanges: Organization

  """
  Subscribes to updates on goal completion statuses. Receives GoalItem every time the corresponding goal gets completed.
  """
  goalUpdates: GoalItem
  subscribePaySystemChanges(storeId: UUID!): PaySystemEvent @deprecated(reason: "pay systems are changed with store updates, subscribe to storeChanges")
  subscribeOrderChanges(storeId: UUID!): OrderEvent
  storeChanges(storeId: UUID!): StoreSubscriptionDto!

  """Menu item changes by menu ID"""
  menuItemChanges(menuId: UUID!): MenuItemSubscriptionDto!

  """Stock unit changes by menu ID"""
  stockUnitPosChanges(menuId: UUID!): StockUnitSubscriptionDto!

  """Menu section changes by menu ID"""
  menuSectionChanges(menuId: UUID!): MenuSectionSubscriptionDto!

  """Table booking changes subscription"""
  subscribeTableBookings(storeId: UUID!): TableBookingSubscriptionResult
}

type SubscriptionsCancellationNotification {
  id: UUID
  message: String
  createdDate: Instant
  type: NotificationType
}

type SubscriptionsDueToExpireNotification {
  id: UUID
  message: String
  createdDate: Instant
  type: NotificationType
}

enum SubscriptionStatus {
  ENABLED
  CANCELLED
  AWAITING_PAYMENT
  AWAITING_RETRY
}

type SuccessfulPaymentNotification {
  id: UUID
  message: String
  createdDate: Instant
  type: NotificationType
}

"""Supplier data"""
type Supplier {
  """Supplier ID"""
  id: UUID

  """Legal type of supplier"""
  type: TypeSupplier

  """Name of contact in supplier"""
  contactPoint: String

  """Company name"""
  companyName: String

  """E-mail"""
  email: String

  """Address"""
  address: String

  """INN"""
  inn: String

  """KPP"""
  kpp: String

  """Phone"""
  phone: String

  """Short description"""
  description: String

  """Is supplier active"""
  active: Boolean!

  """Creation date-time in system"""
  creationDate: Instant

  """total costs by supplier"""
  totalCosts: BigDecimal
}

"""Supplier data"""
input SupplierCreateInput {
  """Legal type of supplier"""
  type: TypeSupplier!

  """Name of contact in supplier"""
  contactPoint: String

  """Company name"""
  companyName: String

  """E-mail"""
  email: String

  """Address"""
  address: String

  """INN"""
  inn: String

  """KPP"""
  kpp: String

  """
  Phone (should match one of patterns: +7-XXX-XXX-XX-XX, 7-XXX-XXX-XX-XX, 8-XXX-XXX-XX-XX, where hyphens are optional)
  """
  phone: String

  """Short description"""
  description: String
}

input SupplierFilterInput {
  search: String
}

type SupplierPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Supplier!]!
}

type SupplierResult implements RequestResult {
  transactionId: UUID
  output: Supplier

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

input SupplierUpdateInput {
  """Supplier ID"""
  id: UUID!

  """Legal type of supplier"""
  type: TypeSupplier!

  """Name of contact in supplier"""
  contactPoint: String

  """Company name"""
  companyName: String

  """E-mail"""
  email: String

  """Address"""
  address: String

  """INN"""
  inn: String

  """KPP"""
  kpp: String

  """
  Phone (should match one of patterns: +7-XXX-XXX-XX-XX, 7-XXX-XXX-XX-XX, 8-XXX-XXX-XX-XX, where hyphens are optional)
  """
  phone: String

  """Short description"""
  description: String
}

input SupplierUpdateInputV2 {
  """Supplier ID"""
  id: UUID!

  """Legal type of supplier"""
  type: TypeSupplier!

  """Name of contact in supplier"""
  contactPoint: String

  """Company name"""
  companyName: String

  """E-mail"""
  email: String

  """Address"""
  address: String

  """INN"""
  inn: String

  """KPP"""
  kpp: String

  """
  Phone (should match one of patterns: +7-XXX-XXX-XX-XX, 7-XXX-XXX-XX-XX, 8-XXX-XXX-XX-XX, where hyphens are optional)
  """
  phone: String

  """Short description"""
  description: String
}

type Supply {
  documentId: UUID
  docNumber: Long
  supplierId: UUID
  supplierName: String
  quantity: BigDecimal
  primePrice: AmountData
  arrivalDate: Instant
  startUsingDate: Instant
}

type SupportControlClaim {
  id: UUID!
  organizationId: UUID!
  clientAccountId: UUID
  supportAccountId: UUID!
  revoked: Boolean!
  confirmed: Boolean!
  declined: Boolean!
  accessCode: String
  expiresAt: Instant!
  confirmationCount: Int!
  serverTime: Instant!
}

type Table {
  id: UUID!
  name: String!
  seatsCount: Int!
  position: Int!
}

type TableBooking {
  id: UUID!

  """A date-time at UTC. Useful for comparing, overlaps search"""
  dateTimeStart: DateTime!
  dateTimeEnd: DateTime!

  """Local date string , with no associated timezone, such as YYYY-MM-DD"""
  dateStart: LocalDate!
  dateEnd: LocalDate!

  """Time in the ISO-8601 calendar system, such as 10:15:30"""
  timeStart: LocalTime!
  timeEnd: LocalTime!

  """Duration in seconds"""
  duration: Int!
  status: TableBookingStatus!
  guestCount: Int!
  tableId: UUID!
  tableName: String
  tableGroupId: UUID!
  tableGroupName: String
  clientId: UUID
  clientName: String
  comment: String
}

input TableBookingFilterInput {
  ids: [UUID!]
  tableGroupIds: [UUID!]
  tableIds: [UUID!]
  clientIds: [UUID!]
  status: [TableBookingStatus!]

  """Date start range"""
  dateRange: DateRangeInput
}

type TableBookingGeneralInfoReport {
  totalBookings: Int!
  canceledBookings: Int!
  totalGuests: Int!
  averageBookingDuration: Int!
}

type TableBookingGeneralInfoReportOutput {
  generalInfo: TableBookingGeneralInfoReport
}

input TableBookingInput {
  """Local date string , with no associated timezone, such as YYYY-MM-DD"""
  dateStart: LocalDate!
  dateEnd: LocalDate!

  """Time in the ISO-8601 calendar system, such as 10:15:30"""
  timeStart: LocalTime!
  timeEnd: LocalTime!
  status: TableBookingStatus!
  guestCount: Int!
  tableId: UUID!
  clientId: UUID
  comment: String
}

type TableBookingListReportEntry {
  id: UUID!
  storeId: UUID!
  tableId: UUID!
  tableName: String
  tableGroupId: UUID!
  tableGroupName: String

  """A date-time at UTC. Useful for comparing, overlaps search"""
  dateTimeStart: DateTime!
  dateTimeEnd: DateTime!

  """Local date string , with no associated timezone, such as YYYY-MM-DD"""
  dateStart: LocalDate!
  dateEnd: LocalDate!

  """Time in the ISO-8601 calendar system, such as 10:15:30"""
  timeStart: LocalTime!
  timeEnd: LocalTime!

  """Duration in seconds"""
  duration: Int!
  status: TableBookingStatus!
  guestCount: Int!
  clientId: UUID
  clientName: String
  clientPhone: String
  comment: String
}

input TableBookingListReportFilterInput {
  storeIds: [UUID!]
  tableGroupIds: [UUID!]
  tableIds: [UUID!]
  clientIds: [UUID!]
  status: [TableBookingStatus!]

  """Date start range"""
  dateRange: DateRangeInput
}

type TableBookingListReportOutput {
  total: TableBookingListReportTotal!
  rows(pageRequest: PageableInput!, sort: [TableBookingSortInput!]): TableBookingListReportPage!
}

type TableBookingListReportPage {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [TableBookingListReportEntry!]!
}

type TableBookingListReportTotal {
  """Duration in seconds"""
  duration: Int!
  guestsCount: Int!
}

type TableBookingOrdersReport {
  revenue: BigDecimal!
  orderCount: Int!
  totalGuests: Int!
  averageCheck: BigDecimal!

  """Duration in seconds"""
  averageSittingDuration: Int!
}

type TableBookingOrdersReportOutput {
  ordersReport: TableBookingOrdersReport
}

type TableBookingPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [TableBooking!]!
}

enum TableBookingSortField {
  DATE_TIME_START
  DATE_TIME_END
  DURATION
  STATUS
  COMMENT
}

input TableBookingSortInput {
  fieldName: TableBookingSortField
  direction: SortDirection
}

enum TableBookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

union TableBookingSubscriptionResult = TableBookingUpdated

type TableBookingUpdated {
  tableBooking: TableBooking!
}

type TableGroup {
  id: UUID!
  storeId: UUID!
  name: String!
  archived: Boolean!
  tables: [Table!]
}

input TableGroupInput {
  id: UUID!
  name: String!
  archived: Boolean!
  tables: [TableInput!]
}

type TableGroupPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [TableGroup!]!
}

type TableGroupRow {
  id: UUID
  name: String
  storeName: String!
  rowData: TablesReportRowData!
  tableRows: [TableRow!]
}

type TableGroupsOutput {
  tableGroups: [TableGroup!]
}

input TableInput {
  id: UUID!
  name: String!
  seatsCount: Int!
  position: Int!
}

type TableRow {
  id: UUID!
  name: String!
  rowData: TablesReportRowData!
}

input TablesReportFilterInput {
  storeIds: [UUID!]
  dateRange: DateRangeInput!
}

input TablesReportInput {
  filter: TablesReportFilterInput
}

type TablesReportResponse {
  total: TablesReportRowData!
  tableGroupRows: [TableGroupRow!]
}

type TablesReportRowData {
  orderCount: Int!
  guestCount: Int!
  averageCheck: BigDecimal!
  revenue: BigDecimal!
  profit: BigDecimal!
}

type Task {
  id: UUID!
  originalTaskId: UUID!
  accountId: UUID
  kitchenWorkshopId: UUID
  inWarehouseId: UUID
  outWarehouseId: UUID
  store: Store!
  taskNumber: Long
  employeeId: UUID
  status: Status
  typeTask: TypeTask
  createdAt: Instant
  inProgressedAt: Instant
  doneAt: Instant
  closedAt: Instant
  canceledAt: Instant
}

"""Task item data"""
type TaskItem {
  """Measurement unit type"""
  unitType: UnitType!

  """Quantity in specified units"""
  quantity: BigDecimal!

  """Tech card ID"""
  techCard: TechCard!

  """Ingredient"""
  ingredients: [Ingredient]
}

"""Task item data"""
input TaskItemInput {
  """Measurement unit type"""
  unitType: UnitType!

  """Quantity in specified units"""
  quantity: BigDecimal!

  """Tech card ID"""
  techCardId: UUID!

  """Ingredient"""
  ingredients: [IngredientInput]
}

type TaskPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Task!]!
}

"""
Tax profile
!!! @deprecated Use SnoValue & VatValue instead
"""
type TaxProfile {
  """Taxation system"""
  sno: Sno!

  """VAT type"""
  vat: VatType!

  """Source, where TaxProfile has been got"""
  entityType: CatalogEntityType

  """TaxProfileSource id"""
  entityId: UUID
}

"""Tax profile"""
input TaxProfileCreateInput {
  """Taxation system"""
  sno: Sno

  """VAT type"""
  vat: VatType
}

input TaxProfilePatchUpdateInput {
  """Taxation system"""
  sno: Sno!

  """VAT type"""
  vat: VatType!
}

"""Tax profile"""
input TaxProfileUpdateInput {
  """Id tax profile"""
  id: UUID!

  """Taxation system"""
  sno: Sno!

  """VAT type"""
  vat: VatType!
}

enum TaxSystem {
  OSN
  USN_INCOME
  USN_INCOME_OUTCOME
  ESN
  PATENT
}

enum TaxType {
  NONE
  VAT0
  VAT10
  VAT110
  VAT20
  VAT120
}

"""Tech card data"""
type TechCard {
  """Tech card ID"""
  id: UUID!

  """Organization tech card belongs to"""
  organization: Organization!

  """Items of tech card"""
  techCardItems: [TechCardItem!]!

  """Available cooking processes"""
  processItems: [ProcessItem!]!

  """Stock unit"""
  stockUnit: StockUnit

  """Description of tech card and cooking process"""
  processOfCooking: String
}

"""Tech card item data"""
type TechCardItem {
  id: UUID

  """Stock unit"""
  stockUnit: StockUnit

  """Brutto quantity of item in specified units"""
  brutto: Float

  """Netto quantity of item in specified units"""
  netto: Float

  """Cooking processes required for this item"""
  processItems: [ProcessItem!]!

  """Measurement unit type"""
  bruttoUnitType: UnitType
}

input TechCardItemAddInput {
  """ID of contained stockUnit"""
  stockUnitId: UUID!

  """Brutto quantity of item in specified units"""
  brutto: BigDecimal!

  """Netto quantity of item in specified units"""
  netto: BigDecimal!

  """Measurement unit type"""
  bruttoUnitType: UnitType!
}

input TechCardPatchUpdateInput {
  addItems: [TechCardItemAddInput!]
  removeItemIds: [UUID!]

  """description of the cooking process"""
  processOfCooking: String
}

type TechSupportClaim {
  """Tech support claim id"""
  id: UUID!

  """Organization tech support claim issued for"""
  organizationId: UUID!

  """Client account id"""
  clientAccountId: UUID!

  """Support account id"""
  supportAccountId: UUID!

  """Tech support assistant account"""
  requestedByAccountId: UUID!

  """Claim revoked by"""
  revokedByAccountId: UUID
  confirmed: Boolean!
  accessCode: String!
  confirmationCount: Int!
  expiresAt: Instant!
  expired: Boolean!
}

"""Terminal store"""
type Terminal {
  """Terminal id"""
  id: UUID!

  """Terminal name"""
  name: String!

  """Terminal disconnection sign"""
  active: Boolean!

  """Sequential number of the terminal in the list of terminals"""
  position: Int

  """Terminal store id"""
  storeId: UUID

  """Terminal store"""
  store: Store

  """Terminal menu id"""
  menuId: UUID

  """Terminal menu"""
  menu: Menu

  """Terminal number"""
  serialNumber: Long

  """Last order sequence number"""
  orderSequence: Long
}

type TerminalAcquiringInfo {
  """Terminal ID"""
  id: UUID!

  """Flag whether terminal acquistion was successful"""
  isSuccessful: Boolean!

  """Terminal fingerprint"""
  fingerprint: String!

  """Terminal name"""
  name: String

  """Terminal store ID"""
  storeId: UUID

  """Terminal menu ID"""
  menuId: UUID

  """Message in case an error is risen when acquiring terminal"""
  errorMessage: String
}

"""New terminal store"""
input TerminalCreateInput {
  """Terminal name"""
  name: String!

  """Sequential number of the terminal in the list of terminals"""
  position: Int

  """Store ID"""
  storeId: UUID!

  """Terminal menu id"""
  menuId: UUID!
}

"""Terminal save/update input"""
input TerminalInput {
  """Terminal id, will be generated automatically if not specified"""
  id: UUID

  """Terminal hardware or software fingerprint"""
  fingerprint: String!

  """Store ID"""
  storeId: UUID!

  """Terminal menu id"""
  menuId: UUID!

  """Terminal name"""
  name: String!

  """Last order sequence number"""
  orderSequence: Long
}

"""Terminal save/update input"""
input TerminalInputData {
  """Terminal hardware or software fingerprint"""
  fingerprint: String!

  """Store ID"""
  storeId: UUID!

  """Terminal menu id"""
  menuId: UUID!

  """Terminal name"""
  name: String!

  """Last order sequence number"""
  orderSequence: Long!
}

type TerminalSaveOrderSequenceResult {
  id: UUID!
}

type TerminalSaveResult {
  id: UUID!
}

"""Existing terminal store"""
input TerminalUpdateInput {
  """Terminal id"""
  id: UUID!

  """Terminal name"""
  name: String!

  """Terminal disconnection sign"""
  active: Boolean

  """Sequential number of the terminal in the list of terminals"""
  position: Int

  """Terminal menu id"""
  menuId: UUID!
}

enum TermsDeviceType {
  PHONE
  TABLET
  ANY
}

type TextAppliedModifier {
  id: UUID!
  modifierId: UUID!
  name: String!
  modifierGroup: AppliedModifierGroup!
}

type TextModifier {
  id: UUID!
  name: String!
  pinned: Boolean!
  sort: Int!
}

input TextModifierInput {
  name: String!
  pinned: Boolean!
  sort: Int!
}

input TextModifierUpdateInput {
  id: UUID!
  name: String!
  pinned: Boolean!
  sort: Int!
}

enum TextWrap {
  NONE
  WORDS
  CHARS
}

input TimeSeriesInput {
  grouping: DateGrouping!
}

type TimeZone {
  zoneId: String!
}

type TimeZonesResponse {
  timeZones: [TimeZone!]!
}

"""Transaction results"""
enum TransactionResult {
  SUCCESS
  ERROR
}

enum TransactionStatus {
  UNDEFINED_ERROR
  APPROVED
  REJECTED
  CONNECTION_ERROR
  ABORTED
  UNKNOWN
}

type TrueApiCodeFailedCheck {
  codeType: TrueApiCodeFailedCheckCodeType!
  message: String
}

enum TrueApiCodeFailedCheckCodeType {
  TM_STRUCT_INVALID
  TM_CRYPTO_FAILED
  TM_NOT_UTILIZED
  TM_UNREALIZABLE
  TM_EXPIRED
  TM_NOT_OWNED
  TM_CHECK_ERROR
}

type TrueApiCodeInfo {
  code: String!
  checked: Boolean!
  failedChecks: [TrueApiCodeFailedCheck!]
}

type TrueApiCodesResult {
  requestId: UUID!
  result: [TrueApiCodeInfo!]!
}

"""Type for overview query"""
enum Type {
  WAREHOUSE
  CATALOG
  STORE
  MENU
}

"""Document type"""
enum TypeDocument {
  LEAVING
  RETURN
  MOVE
  CANCELLATION_RESERVATION
  ARRIVAL
  LEAVING_BY_ORDER
  INVENTORY
}

"""Legal type of supplier"""
enum TypeSupplier {
  """Legal person (юридическое лицо)"""
  LEGAL_PERSON

  """Natural person (физическое лицо)"""
  NATURAL_PERSON
}

enum TypeTask {
  DARK
  LIGHT
}

type UiStateResult implements RequestResult {
  transactionId: UUID
  output: Boolean

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

"""constants"""
enum UnitType {
  NONE
  PIECE
  GRAM
  MILLILITER
  KILOGRAM
  LITER
}

type UnsuccessfulPaymentNotification {
  id: UUID
  message: String
  createdDate: Instant
  type: NotificationType
}

"""Employee updating input"""
input UpdateEmployeeInput {
  """ID of updating employee"""
  id: UUID!

  """Employee alias name"""
  firstName: String!
  middleName: String
  lastName: String!

  """Describes employee accessibility"""
  active: Boolean!

  """Usergroup membership"""
  userGroups: [UserGroupInput!]!

  """ИНН"""
  vatin: String

  """Employee access pin-code"""
  pin: String

  """Contact email"""
  workEmail: String!

  """СНИЛС"""
  snils: String

  """Medical book expire date (ISO-8601)"""
  medicalBookExpiresAt: Instant

  """Date of birth (ISO-8601)"""
  dateOfBirth: Instant

  """Date of employment (ISO-8601)"""
  dateOfEmployment: Instant

  """Contact phone"""
  workPhone: String

  """Living address"""
  address: String
}

"""
Employee invitation update input. Confiramtion token will be automatically refreshed
"""
input UpdateEmployeeInvitationInput {
  """Invitation ID"""
  invitationId: UUID!

  """Invitation expire date (ISO-8601)"""
  expiresAt: Instant
}

"""Employee pin update response."""
type UpdateEmployeePinCodeResponse {
  pin: String!
}

input UpdateModifierGroupInput {
  id: UUID!
  name: String
  minValue: Int
  maxValue: Int
  required: Boolean
  sort: Int
  type: ModifierType

  """there is no concept of activity at the moment"""
  active: Boolean
}

"""Organization updating input"""
input UpdateOrganizationInput {
  """Updating organization ID"""
  id: UUID

  """Organization name"""
  name: String

  """Currency unit e.g. RUB"""
  currencyUnit: String
  timezone: String
}

"""Organization invitation updating input"""
input UpdateOrganizationInvitationInput {
  id: UUID

  """Name of invitation"""
  name: String!

  """Describes active state for this invitation"""
  active: Boolean
}

input UploadAppliedDiscountInput {
  id: UUID!

  """Date of creation at point of creation (e.g. POS)"""
  createdDate: Instant!

  """ID of original discount"""
  discountId: UUID!

  """Name"""
  name: String!

  """Type"""
  type: DiscountType!

  """Percent discounted"""
  percent: BigDecimal!

  """Was discount applied automatically"""
  automatic: Boolean!

  """Was discount combined with other discount"""
  combined: Boolean!
}

type UploadImageResponse {
  mutationResultList: [MutationResult!]!
}

input UploadOrderInput {
  id: UUID!

  """Date of creation at point of creation (e.g. POS)"""
  createdDate: Instant!

  """Date of last modification at point of creation (e.g. POS)"""
  lastModifiedDate: Instant

  """Date of last payment"""
  lastPayedDate: Instant

  """ID of store where order was created"""
  storeId: UUID!

  """ID of terminal used for store creation"""
  terminalId: UUID!

  """Name of terminal"""
  terminalName: String!

  """Name of organization"""
  organizationName: String
  owner: SnapshotOrderEmployeeInput

  """Assigned number"""
  number: String!

  """Current status"""
  status: OrderStatus!

  """Was order paid"""
  payed: Boolean!

  """Was order canceled"""
  canceled: Boolean!
  refunded: Boolean

  """Type"""
  type: OrderType!

  """Total amount for all order items"""
  totalAmount: AmountDataInput!

  """Total Prime Price for all order items with modifiers"""
  totalPrimePrice: AmountDataInput

  """Amount of discounts for all order items and order, if any present"""
  discountAmount: AmountDataInput

  """Amount of discounts for all order items, if any present"""
  itemDiscount: AmountDataInput

  """Amount of discounts for order, if any present"""
  orderDiscount: AmountDataInput

  """Result amount for all order items with discount deductions applied"""
  resultAmount: AmountDataInput!

  """Basket items"""
  items: [UploadOrderItemInput!]!

  """Related payments"""
  payments: [UploadOrderPaymentInput!]

  """Labels with additional information"""
  labels: [OrderLabelInput!]
  discounts: [ApplyOrderDiscountInput!]
  loyaltyPoints: LoyaltyPointsInput
  customer: CustomerSnapshotInput
  history: [OrderHistoryEntryInput!]
  fiscalStatus: FiscalStatus
  shiftNumber: Int
  tableId: UUID
  guestCount: Int
}

input UploadOrderItemInput {
  id: UUID!

  """Date of creation at point of creation (e.g. POS)"""
  createdDate: Instant!

  """Date of last modification at point of creation (e.g. POS)"""
  lastModifiedDate: Instant

  """ID of stock unit on which order item is based"""
  stockUnitId: UUID!

  """Name"""
  name: String!

  """Quantity of item"""
  quantity: MeasureDataInput!

  """Quantity of one unit of item"""
  unitQuantity: MeasureDataInput!

  """Guest who ordered this item"""
  guest: Int!

  """Is item weighable"""
  weighable: Boolean!

  """Current status"""
  status: OrderItemStatus!

  """Course which item belongs to"""
  course: Int

  """Comment"""
  comment: String

  """Barcode"""
  barcode: String

  """Tax size information"""
  vatType: VatType!

  """Tax system information"""
  sno: Sno!

  """Type of item"""
  positionTypeCode: PositionTypeCode!

  """ID of associated tech card, if present"""
  techCardId: UUID

  """Prime price of stock unit which item is based on without modifiers"""
  primePrice: AmountDataInput

  """Total prime price of stock unit which item is based on with modifiers"""
  totalPrimePrice: AmountDataInput

  """Sale price of stock unit which item is based on"""
  salePrice: AmountDataInput!

  """Amount for one unit of item"""
  unitAmount: AmountDataInput!

  """Discount for one unit of item, if present"""
  unitDiscountAmount: AmountDataInput

  """Amount for designated quantity of item without modifiers"""
  preTotalAmount: AmountDataInput

  """Total amount for designated quantity of item with modifiers"""
  totalAmount: AmountDataInput!

  """Total discount amount for designated quantity of item, if present"""
  discountAmount: AmountDataInput

  """Result amount for order item with discount deductions applied"""
  resultAmount: AmountDataInput!

  """Discounts applied to this item"""
  appliedDiscounts: [UploadAppliedDiscountInput!]
  appliedModifiers: [AppliedModifierInput!]
}

input UploadOrderPaymentInput {
  id: UUID!

  """Date of creation at point of creation (e.g. POS)"""
  createdDate: Instant!

  """Date payed"""
  payedDate: Instant

  """Amount payed"""
  amount: AmountDataInput!

  """Pay system used for payment"""
  paySystem: OrderPaymentPaySystemInput!

  """Current status"""
  status: PaymentStatus!
  acquiringData: AcquiringDataInput
  refundAcquiringData: AcquiringDataInput
}

input UploadOrdersInput {
  """Orders to create or update"""
  orders: [UploadOrderInput!]!
}

type URL {
  """size type (e.g. `original`, `large` or 'medium`)"""
  sizeType: String!

  """image width"""
  width: Int!

  """image height"""
  height: Int!

  """image url"""
  url: String!
}

"""Action on notification that opens an URL"""
type URLNotificationAction {
  """URL to call for this action"""
  url: String!
}

"""User group"""
type UserGroup {
  """User group ID"""
  id: UUID!

  """User group name"""
  name: String

  """Unique group code"""
  code: RoleCode!
}

"""Input for user group data"""
input UserGroupInput {
  """ID of the user group assigned to employee"""
  userGroupId: UUID!

  """
  ID of store in which user group is assigned. If empty, it's implied that
  employe's user group spans across all stores in organization
  """
  storeId: UUID
}

"""User bank card"""
type UserPaymentCard {
  """Card id"""
  id: UUID!

  """Payment card number with mask"""
  pan: String!

  """Default card attribute"""
  defaultCard: Boolean!

  """Payment system"""
  type: String
}

scalar UUID

enum VatType {
  DEFAULT
  NONE
  VAT_0
  VAT_10
  VAT_20
  VAT_110
  VAT_120
}

"""VAT (tax rate) with source location"""
type VatValue {
  """VAT value"""
  vat: VatType

  """Source where VAT has been got"""
  entityType: CatalogEntityType

  """Source ID"""
  entityId: UUID
}

scalar Void

"""Warehouse data"""
type Warehouse {
  """Warehouse ID"""
  id: UUID

  """Name"""
  name: String

  """Address"""
  addressName: String

  """Short description"""
  description: String

  """Phone"""
  phone: String

  """Hours of business in arbitrary format"""
  businessHours: String

  """Website"""
  site: String

  """E-mail"""
  email: String

  """GPS longitude"""
  gpsLongitude: String

  """GPS latitude"""
  gpsLatitude: String

  """Arbitrary symbolic code"""
  symbolicCode: String

  """Is warehouse a shipping center"""
  shippingCenter: Boolean!

  """Is warehouse a location for picking up"""
  pickupLocation: Boolean!

  """Is warehouse active"""
  active: Boolean!

  """Organization owning the warehouse"""
  organization: Organization

  """Creation date-time in system"""
  creationDate: Instant

  """Number of served stores"""
  storesCount: Long

  """
  The name of the Time Zone in which the store operates (IANA Time Zone Database)
  """
  zoneId: String

  """
  By default warehouse timezone sets on an address base or Moscow timezone, user
  should verify whether timezone has been set correctly
  """
  timezoneVerified: Boolean

  """Corresponding store ids to whom particular warehouse belongs to"""
  stores(pageRequest: PageRequestInput): StorePage

  """Whether warehouse archived or not"""
  archived: Boolean

  """Date when warehouse has been archived"""
  archivedDate: Instant
}

"""Warehouse data"""
input WarehouseCreateInput {
  """Name"""
  name: String!

  """Order number of warehouse in list"""
  sort: Int

  """Address"""
  addressName: String

  """Short description"""
  description: String

  """
  Phone (should match one of patterns: +7-XXX-XXX-XX-XX, 7-XXX-XXX-XX-XX, 8-XXX-XXX-XX-XX, where hyphens are optional)
  """
  phone: String

  """Hours of business in arbitrary format"""
  businessHours: String

  """Website"""
  site: String

  """E-mail"""
  email: String

  """Arbitrary symbolic code"""
  symbolicCode: String

  """GPS longitude"""
  gpsLongitude: String

  """GPS latitude"""
  gpsLatitude: String

  """Is warehouse a shipping center"""
  shippingCenter: Boolean!

  """Is warehouse a location for picking up"""
  pickupLocation: Boolean!

  """Is warehouse active"""
  active: Boolean!

  """
  The name of the Time Zone in which the store operates (IANA Time Zone Database)
  """
  zoneId: String
}

"""WarehouseCreateInputV2"""
input WarehouseCreateInputV2 {
  """Name"""
  name: String!

  """Order number of warehouse in list"""
  sort: Int

  """Address"""
  addressName: String!

  """Short description"""
  description: String

  """
  Phone (should match one of patterns: +7-XXX-XXX-XX-XX, 7-XXX-XXX-XX-XX, 8-XXX-XXX-XX-XX, where hyphens are optional)
  """
  phone: String

  """Hours of business in arbitrary format"""
  businessHours: String

  """Website"""
  site: String

  """E-mail"""
  email: String

  """Arbitrary symbolic code"""
  symbolicCode: String

  """GPS longitude"""
  gpsLongitude: String!

  """GPS latitude"""
  gpsLatitude: String!

  """Is warehouse a shipping center"""
  shippingCenter: Boolean!

  """Is warehouse a location for picking up"""
  pickupLocation: Boolean!

  """Is warehouse active"""
  active: Boolean!

  """
  The name of the Time Zone in which the store operates (IANA Time Zone Database)
  """
  zoneId: String!

  """
  By default warehouse timezone sets on an address base or Moscow timezone, user
  should verify whether timezone has been set correctly
  """
  timezoneVerified: Boolean!

  """Corresponding store ids to whom particular warehouse belongs to"""
  storeIds: [UUID!]

  """Whether warehouse archived or not"""
  archived: Boolean

  """Date when warehouse has been archived"""
  archivedDate: Instant
}

input WarehouseFilterInput {
  archived: Boolean
  search: String
}

"""Warehouse item data"""
type WarehouseItem {
  """Warehouse item ID"""
  id: UUID

  """ID of owning warehouse"""
  warehouseId: UUID

  """Quantity of items"""
  quantity: Float

  """Stock unit"""
  stockUnit: StockUnit

  """Name"""
  name: String

  """ID of owning organization"""
  organizationId: UUID
  supplies: [Supply!]
  lastArrivalQuantity: BigDecimal
}

"""Event in warehouse"""
enum WarehouseItemEvent {
  NONE
  ARRIVAL
  WRITE_OFF
  RECALCULATION
}

input WarehouseItemFilterInput {
  warehouseId: UUID
  search: String
}

"""Warehouse item"""
type WarehouseItemHistory {
  """stock unit of a warehouse item"""
  stockUnitName: String

  """organization name of a warehouse item"""
  organizationName: String

  """warehouse name of a warehouse item"""
  warehouseName: String

  """document id of a warehouse item"""
  documentId: UUID

  """document number of a warehouse item"""
  documentNumber: Long

  """date of an history case"""
  date: LocalDate!

  """last arrived date"""
  lastArrivalDate: LocalDate

  """quantity of a warehouse item"""
  quantity: BigDecimal

  """prime price of a warehouse item"""
  primePrice: AmountData

  """inocation event for getting history (arrival, write off, recalculation"""
  event: WarehouseItemEvent

  """reason for warehouse item movement"""
  reasonEvent: WarehouseItemReasonEvent
}

input WarehouseItemHistoryFilterInput {
  warehouseId: UUID
  dateFrom: LocalDate!
  dateTo: LocalDate!
  search: String
}

type WarehouseItemHistoryPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [WarehouseItemHistory!]!
}

type WarehouseItemInfo {
  stockUnitId: UUID!
  quantity: Float!
  exists: Boolean!
}

type WarehouseItemLeftover {
  productId: UUID!
  product: Product!
  name: String
  sectionName: String
  quantity: BigDecimal!
  totalAmount: BigDecimal!
  unitType: UnitType!
  primePrice: AmountData!
  lastArrivalDate: Instant
  lastArrivalDocument: ArrivalDocument
  warehouseName: String!
  stores: [Store!]
  type: ProductType
}

input WarehouseItemLeftoverFilterInput {
  search: String
  warehouseIds: [UUID!]
  sectionIds: [UUID!]
  types: [ProductType!]
}

type WarehouseItemLeftoverPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [WarehouseItemLeftover!]!
}

input WarehouseItemLeftoverSort {
  field: WarehouseItemLeftoverSortFields
  direction: SortDirection
}

enum WarehouseItemLeftoverSortFields {
  NAME
  TYPE
  SECTION_NAME
  QUANTITY
  UNIT_TYPE
  PRIME_PRICE_AMOUNT_VALUE
  LAST_ARRIVAL_DATE
  TOTAL_AMOUNT
  WAREHOUSE_NAME
}

type WarehouseItemPage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [WarehouseItem!]!
}

"""Reason of event in warehouse"""
enum WarehouseItemReasonEvent {
  NONE
  ARRIVAL_DOCUMENT
  LEAVING_DOCUMENT
  MOVE_DOCUMENT
  RETURN_DOCUMENT
  INVENTORY_DOCUMENT
  SOLD
  RETURN
  UNPACK
  PACK
  LEAVING_BY_PARENT_ITEM_DOCUMENT
}

type WarehouseItemWrittenOffReport {
  """stock unit of a warehouse item"""
  stockUnitName: String

  """warehouse name of a warehouse item"""
  warehouseName: String

  """stock unit of a warehouse item"""
  stockUnitId: UUID

  """warehouse if of a warehouse item"""
  warehouseId: UUID

  """total quantity of a warehouse item that has been written off"""
  totalQuantity: BigDecimal

  """average prime price"""
  averagePrice: BigDecimal

  """currency unit of a warehouse item"""
  currencyUnit: String

  """last arrival quantity"""
  lastArrivalQuantity: BigDecimal

  """unitType"""
  unitType: UnitType!
}

type WarehousePage implements Page {
  total: Int!
  pageNumber: Int!
  pageSize: Int!
  totalPages: Int!
  content: [Warehouse!]!
}

type WarehouseResult implements RequestResult {
  transactionId: UUID
  output: Warehouse

  """Result status of the transaction"""
  result: TransactionResult!

  """Error message in case of failure"""
  errorMessage: String
}

input WarehousesPageableSort {
  field: WarehousesPageableSortField
  direction: SortDirection
}

enum WarehousesPageableSortField {
  NAME
  ADDRESS
}

"""Warehouse data"""
input WarehouseUpdateInput {
  """Warehouse ID"""
  id: UUID!

  """Name"""
  name: String!

  """Order number of warehouse in list"""
  sort: Int

  """Address"""
  addressName: String

  """Short description"""
  description: String

  """
  Phone (should match one of patterns: +7-XXX-XXX-XX-XX, 7-XXX-XXX-XX-XX, 8-XXX-XXX-XX-XX, where hyphens are optional)
  """
  phone: String

  """Hours of business in arbitrary format"""
  businessHours: String

  """Website"""
  site: String

  """E-mail"""
  email: String

  """Arbitrary symbolic code"""
  symbolicCode: String

  """GPS longitude"""
  gpsLongitude: String

  """GPS latitude"""
  gpsLatitude: String

  """Is warehouse a shipping center"""
  shippingCenter: Boolean!

  """Is warehouse a location for picking up"""
  pickupLocation: Boolean!

  """Is warehouse active"""
  active: Boolean!

  """
  The name of the Time Zone in which the store operates (IANA Time Zone Database)
  """
  zoneId: String
}

input WarehouseUpdateInputV2 {
  """Warehouse ID"""
  id: UUID!

  """Name"""
  name: String

  """Order number of warehouse in list"""
  sort: Int

  """Address"""
  addressName: String

  """Short description"""
  description: String

  """
  Phone (should match one of patterns: +7-XXX-XXX-XX-XX, 7-XXX-XXX-XX-XX, 8-XXX-XXX-XX-XX, where hyphens are optional)
  """
  phone: String

  """Hours of business in arbitrary format"""
  businessHours: String

  """Website"""
  site: String

  """E-mail"""
  email: String

  """Arbitrary symbolic code"""
  symbolicCode: String

  """GPS longitude"""
  gpsLongitude: String

  """GPS latitude"""
  gpsLatitude: String

  """Is warehouse a shipping center"""
  shippingCenter: Boolean

  """Is warehouse a location for picking up"""
  pickupLocation: Boolean

  """Is warehouse active"""
  active: Boolean

  """
  The name of the Time Zone in which the store operates (IANA Time Zone Database)
  """
  zoneId: String

  """
  By default warehouse timezone sets on an address base or Moscow timezone, user
  should verify whether timezone has been set correctly
  """
  timezoneVerified: Boolean

  """Whether warehouse archived or not"""
  archived: Boolean

  """Date when warehouse has been archived"""
  archivedDate: Instant
  removeStoreIds: [UUID!]
  addStoreIds: [UUID!]
}

type XlsReportCreationStartedNotification {
  id: UUID
  message: String
  createdDate: Instant
  type: NotificationType
}

type XlsReportGeneratedNotification {
  id: UUID
  message: String
  createdDate: Instant
  type: NotificationType
  buttons: [NotificationButton!]
}

type YandexImage {
  """original image file name"""
  originalFileName: String

  """image extension (e.g. jpg, png...)"""
  extension: String

  """image width"""
  width: Int

  """image height"""
  height: Int
  externalImage: ExternalImage!
}

type YandexMenu {
  """menu id"""
  id: UUID!

  """Format yyyy-MM-dd'T'HH:mm:ss.SS'Z'"""
  createdDate: Instant!

  """menu name"""
  name: String!

  """organization to which the menu belongs"""
  organization: Organization!

  """store to which the menu belongs"""
  storeId: UUID!

  """sort number"""
  position: Int

  """menu type"""
  type: MenuType

  """menu sections that current menu has inside"""
  menuSections: [MenuSection!]

  """amoumt of all menu items in all menu sections"""
  menuItemsAmount: Long
  countOfTerminals: Long!
  countOfStores: Long!
  active: Boolean!
  url: String
  integrationProperty: IntegrationProperty
}

type YandexMenuCategory {
  """id from yandex eats"""
  eatsId: Long!
  items: [YandexMenuItem!]
  available: Boolean!
  name: String!
}

input YandexMenuCategoryInput {
  eatsId: Long!

  """
  if menuSectionId is defined, then category will map on menuSection,
  else will be create new menu section
  """
  menuSectionId: UUID
  skip: Boolean
  items: [YandexMenuItemInput!]
  available: Boolean!
  name: String!
}

type YandexMenuItem {
  """id from yandex eats"""
  eatsId: Long!
  available: Boolean!
  description: String!
  name: String!
  decimalPrice: BigDecimal!
  price: BigDecimal!
  images: [YandexImage!]
  weight: String
}

input YandexMenuItemInput {
  eatsId: Long!

  """
  menuItemId and stockUnitId is mutually exclusive.
  if menuItemId is defined, then yandex menu item will map on pos menu item, and connected stock unit with them.
  """
  menuItemId: UUID

  """
  if stockUnitId is defined, then will be create new pos menu item, and it will map on stock unit.
  if menuItemId and stockUnitId are undefined, will be create new pos menu items, stock unit and new catalog
  """
  stockUnitId: UUID
  skip: Boolean
  available: Boolean!
  description: String!
  name: String!
  decimalPrice: BigDecimal!
  price: BigDecimal!
  images: [ImageInput!]
  weight: String!
}

type YandexPromo {
  type: YandexPromoType!
  discount: BigDecimal!
}

enum YandexPromoType {
  GIFT
  PERCENTAGE
  FIXED
}
